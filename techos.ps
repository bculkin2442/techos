%!PS-Adobe-3.0
%%Title: comlist.c, command.c, commands.c, commandstate.c, datecmds.c, dispatchcmds.c, filecmds.c, argparser.c, argparser_test.c, intern.c
%%For: 
%%Creator: a2ps version 4.14
%%CreationDate: Mon Oct 22 22:57:25 2018
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 89
%%PageOrder: Special
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-BoldItalic
%%+ font Times-Italic
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 8.005733 def
/cw 4.803440 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   501.959430 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 2 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#include) K
( <assert.h>) p n
(#include) K
( <stdlib.h>) p n
() N
(#include) K
( ") p
(libs/intern.h) str
(") p n
(#include) K
( ") p
(command.h) str
(") p n
(#include) K
( ") p
(comlist.h) str
(") p n
() N
(/*) c n
( * Represents a list of commands.) N
( */) N
(struct) k
( comlist {) p n
() S 2 T () S
(/* Dynamic array of commands. */) c n
() p 2 T () S
(struct) k
( command **commands;) p n
() S 2 T () S
(/* The available/used space in the commands array. */) c n
() p 2 T () S
(int) k
( comspace;) p n
() S 2 T () S
(int) k
( comcount;) p n
() N
() S 2 T () S
(/* Map from command names to indexes into the commands array. */) c n
() p 2 T () S
(struct) k
( interntab *interncoms;) p n
(};) N
() N
(/* Allocate and initialize a command list. */) c n
(struct) k
( comlist *makecomlist\(\) {) p n
() S 2 T () S
(/* Allocate memory for the struct. */) c n
() p 2 T () S
(struct) k
( comlist *ret = malloc\() p
(sizeof) K
(\() p
(struct) k
( comlist\)\);) p n
() S 2 T () S
(/* Fail if allocation did. */) c n
() p 2 T (assert\(ret ) S
(\271) sy
( ) p
(NULL) K
(\);) p n
() N
() S 2 T () S
(/* Allocate memory for the command list. */) c n
() p 2 T (ret) S
(\256) sy
(commands = calloc\(10, ) p
(sizeof) K
(\() p
(struct) k
( command\)\);) p n
() S 2 T () S
(/* Fail if allocation did. */) c n
() p 2 T (assert\(ret) S
(\256) sy
(commands ) p
(\271) sy
( ) p
(NULL) K
(\);) p n
() N
() S 2 T () S
(/* Set the array space/available bounds. */) c n
() p 2 T (ret) S
(\256) sy
(comspace = 10;) p n
() S 2 T (ret) S
(\256) sy
(comcount = 0;) p n
() N
() S 2 T () S
(/* Create the intern table for the commands. */) c n
() p 2 T (ret) S
(\256) sy
(interncoms = makeinterntab\(\);) p n
() N
() S 2 T () S
(return) K
( ret;) p n
(}) N
() N
(/* Deinitialize and deallocate a command list. */) c n
(void) k
( killcomlist\() p
(struct) k
( comlist *list\) {) p n
() S 2 T () S
(/* Free the intern table. */) c n
() p 2 T (killinterntab\(list) S
(\256) sy
(interncoms\);) p n
() N
() S 2 T () S
(/* Free the commands. */) c n
() p 2 T () S
(int) k
( i;) p n
() S 2 T () S
(for) K
(\(i = 0; i < list) p
(\256) sy
(comcount; i++\) {) p n
() S 2 T () S 4 T () S
(/* Get the command. */) c n
() p 2 T () S 4 T (killcommand\(list) S
(\256) sy
(commands[i]\);) p n
() S 2 T (}) N
() S 2 T () S
(/* Free the command storage. */) c n
() p 2 T (free\(list) S
(\256) sy
(commands\);) p n
() N
() S 2 T () S
(/* Free the list itself. */) c n
() p 2 T (free\(list\);) N
(}) N
() N
(/*) c n
(comlist.c) (Page 1/3) (Nov 09, 17 20:12) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
( * Add a command to a command list.) c n
( *) N
( * Takes ) N
( * - The name of the command) N
( * - The brief help for the command) N
( * - The handler for the command) N
( *) N
( * and inserts it into the list.) N
( */) N
(void) k
( addcommand\() p
(struct) k
( comlist *plList, ) p
(char) k
( *pszName, ) p
(char) k
( *pszDesc, comfun_t p) p n
(fHandler\) {) N
() S 2 T () S
(/* Intern the name. */) c n
() p 2 T (internkey comkey = internstring\(plList) S
(\256) sy
(interncoms, pszName\);) p n
() S 2 T () S
(/* Fail if the request failed. */) c n
() p 2 T (assert\(comkey > 0\);) N
() N
() S 2 T () S
(if) K
(\(plList) p
(\256) sy
(comspace ) p
(\272) sy
( plList) p
(\256) sy
(comcount\) {) p n
() S 2 T () S 4 T () S
(/* Allocate more space for the list. */) c n
() p 2 T () S 4 T (plList) S
(\256) sy
(comspace *= 2;) p n
() S 2 T () S 4 T (plList) S
(\256) sy
(commands = realloc\(plList) p
(\256) sy
(commands, ) p
(sizeof) K
(\() p
(struct) k
( command *\) * plLi) p n
(st) S
(\256) sy
(comspace\);) p n
() S 2 T () S 4 T () S
(/* Fail if request fails. */) c n
() p 2 T () S 4 T (assert\(plList) S
(\256) sy
(commands ) p
(\271) sy
( ) p
(NULL) K
(\);) p n
() S 2 T (}) N
() N
() S 2 T () S
(/* ) c n
() S 2 T ( * Allocate a new command. We duplicate strings, so that they belong to) N
() S 2 T ( * the command. ) N
() S 2 T ( */) N
() p 2 T () S
(struct) k
( command *pCommand = makecommand\(\() p
(char) k
( *\)strdup\(pszName\), \() p
(char) k
( *\)strdup) p n
(\(pszDesc\), pfHandler\);) N
() N
() S 2 T () S
(/* Insert it into the list. */) c n
() p 2 T (plList) S
(\256) sy
(commands[comkey - 1]  = pCommand;) p n
() S 2 T (plList) S
(\256) sy
(comcount             += 1;) p n
(}) N
() N
(/* ) c n
( * Get a command based off of its name.) N
( *) N
( * Returns the INVALID_COMMAND if none by that name exist.) N
( */) N
(struct) k
( command *getcommand\() p
(struct) k
( comlist *list, ) p
(char) k
( *name\) {) p n
() S 2 T () S
(/* Lookup the key we stored the command under. */) c n
() p 2 T (internkey comkey = lookupstring\(list) S
(\256) sy
(interncoms, name\);) p n
() S 2 T () S
(/* Error if that's not a command. */) c n
() p 2 T () S
(if) K
(\(comkey ) p
(\272) sy
( SIINVALID\) ) p
(return) K
( &INVALID_COMMAND;) p n
() S 2 T () S
(/* Give the command back. */) c n
() p 2 T () S
(return) K
( list) p
(\256) sy
(commands[comkey - 1];) p n
(}) N
() N
(/*) c n
( * Execute a function for every command in a list.) N
( */) N
(void) k
( foreachcommand\() p
(struct) k
( comlist *list, ) p
(void) k
( \(*comitr\)\() p
(struct) k
( command *\)\) {) p n
() S 2 T () S
(int) k
( i;) p n
() S 2 T () S
(for) K
(\(i = 0; i < list) p
(\256) sy
(comcount; i++\) comitr\(list) p
(\256) sy
(commands[i]\);) p n
(}) N
() N
(/* Print a command list. */) c n
(void) k
( printcommands\() p
(struct) k
( comlist *list, ) p
(FILE) k
( *fle\) {) p n
() S 2 T () S
(int) k
( i;) p n
(comlist.c) (Page 2/3) (Nov 09, 17 20:12) title
border
grestore
(TechOS Sources) rhead
(comlist.c) (1/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3,1) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S
(for) K
(\(i = 0; i < list) p
(\256) sy
(comcount; i++\) {) p n
() S 2 T () S 4 T () S
(struct) k
( command *com = list) p
(\256) sy
(commands[i];) p n
() N
() S 2 T () S 4 T () S
(switch) K
(\(com) p
(\256) sy
(type\) {) p n
() S 2 T () S 4 T () S
(case) K
( CT_NORMAL:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(fle, ") S
(\\t%s\\t\\t\\t%s\\n) str
(", com) p
(\256) sy
(name, com) p
(\256) sy
(brief\);) p n
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T () S
(/* Shouldn't happen. */) c n
() p 2 T () S 4 T () S 6 T (assert\(0\);) N
() S 2 T () S 4 T (}) N
() S 2 T (}) N
(}) N
(comlist.c) (Page 3/3) (Nov 09, 17 20:12) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#include) K
( <assert.h>) p n
(#include) K
( <stdio.h>) p n
(#include) K
( <stdlib.h>) p n
(#include) K
( <string.h>) p n
() N
(#include) K
( ") p
(osstate.h) str
(") p n
(#include) K
( ") p
(command.h) str
(") p n
() N
(/* Check if a command that only takes the 'help' argument recieved it. */) c n
(int) k
( checkhelpargs\() p
(int) k
( argc, ) p
(char) k
( **argv, ) p
(char) k
( *usage, ) p
(struct) k
( osstate *ostate\) {) p n
() S 2 T () S
(if) K
(\(argc > 2 ) p
(\332) sy
( \(strcmp\(") p
(-h) str
(", argv[1]\) ) p
(\271) sy
( 0 ) p
(\331) sy
( strcmp\(") p
(--help) str
(", argv[1]\) ) p
(\271) sy
( 0\)\) {) p n
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line arguments.\\n) str
("\);) p n
() S 2 T (}) N
() N
() S 2 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s) str
(", usage\);) p n
() N
() S 2 T () S
(return) K
( 0;) p n
(}) N
() N
(/* Allocate/initialize a command. */) c n
(struct) k
( command *makecommand\() p
(char) k
( *pszName, ) p
(char) k
( *pszBrief, comfun_t pfHandler\) {) p n
() S 2 T () S
(/* Allocate a command and fail if it does. */) c n
() p 2 T () S
(struct) k
( command *pCommand = malloc\() p
(sizeof) K
(\() p
(struct) k
( command\)\);) p n
() S 2 T (assert\(pCommand ) S
(\271) sy
( ) p
(NULL) K
(\);) p n
() N
() S 2 T () S
(/* Initialize command. */) c n
() p 2 T (pCommand) S
(\256) sy
(type   = CT_NORMAL;) p n
() S 2 T (pCommand) S
(\256) sy
(name   = pszName;) p n
() S 2 T (pCommand) S
(\256) sy
(brief  = pszBrief;) p n
() S 2 T (pCommand) S
(\256) sy
(comfun = pfHandler;) p n
() N
() S 2 T () S
(return) K
( pCommand;) p n
(}) N
() N
(/* Deinitialize/deallocate a command. */) c n
(void) k
( killcommand\() p
(struct) k
( command *pCommand\) {) p n
() S 2 T (free\(pCommand) S
(\256) sy
(name\);) p n
() S 2 T (free\(pCommand) S
(\256) sy
(brief\);) p n
() S 2 T (free\(pCommand\);) N
(}) N
(command.c) (Page 1/1) (Oct 07, 17 0:15) title
border
grestore
(TechOS Sources) rhead
(comlist.c, command.c) (2/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#include) K
( <assert.h>) p n
(#include) K
( <ctype.h>) p n
(#include) K
( <fcntl.h>) p n
(#include) K
( <getopt.h>) p n
(#include) K
( <stdio.h>) p n
(#include) K
( <stdlib.h>) p n
(#include) K
( <string.h>) p n
(#include) K
( <unistd.h>) p n
() N
(#include) K
( <sys/types.h>) p n
(#include) K
( <sys/stat.h>) p n
() N
(#include) K
( ") p
(osstate.h) str
(") p n
() N
(#include) K
( ") p
(command.h) str
(") p n
(#include) K
( ") p
(comlist.h) str
(") p n
(#include) K
( ") p
(commandstate.h) str
(") p n
(#include) K
( ") p
(commands.h) str
(") p n
() N
(#include) K
( ") p
(dispatchcmds.h) str
(") p n
(#include) K
( ") p
(datecmds.h) str
(") p n
(#include) K
( ") p
(scriptcmds.h) str
(") p n
(#include) K
( ") p
(pcbcmds.h) str
(") p n
(#include) K
( ") p
(filecmds.h) str
(") p n
(#include) K
( ") p
(usercmds.h) str
(") p n
() N
(#include) K
( ") p
(techos.h) str
(") p n
() N
(/* Initialize commands. */) c n
(void) k
( initcoms\(\) {) p n
() S 2 T () S
(/* Doing nothing at the moment. */) c n
(}) p n
() N
(/* Dispose of commands. */) c n
(void) k
( disposecoms\(\) {) p n
() S 2 T () S
(/* Doing nothing at the moment. */) c n
(}) p n
() N
(/* Add commands to a command list. */) c n
(void) k
( addcommands\() p
(struct) k
( comlist *list\) {) p n
() S 2 T () S
(/* Date/time commands. */) c n
() p 2 T (addcommand\(list, ") S
(date) str
(",    ") p
(Display the current date/time) str
(",                &handle_date) p n
(\);) N
() S 2 T (addcommand\(list, ") S
(datefmt) str
(", ") p
(Set the format the date is displayed/read in) str
(", &handle_datefmt\);) p n
() S 2 T (addcommand\(list, ") S
(setdate) str
(", ") p
(Set the current date) str
(",                         &handle_set) p n
(date\);) N
() S 2 T (addcommand\(list, ") S
(time) str
(",    ") p
(Display the current time) str
(",                     &handle_ti) p n
(me\);) N
() N
() S 2 T () S
(/* Script commands. */) c n
() p 2 T (addcommand\(list, ") S
(script) str
(",    ") p
(Execute a script file) str
(",        &handle_script\);) p n
() N
() S 2 T () S
(/* PCB commands. */) c n
() p 2 T (addcommand\(list, ") S
(mkpcb) str
(",     ") p
(Create PCB and insert into queue) str
(",          &handle_mkpcb) p n
(\);) N
() S 2 T (addcommand\(list, ") S
(sspcb) str
(",     ") p
(Suspend PCB and reinsert into queue) str
(",       &handle_sspcb\)) p n
(;) N
() S 2 T (addcommand\(list, ") S
(rspcb) str
(",     ") p
(Set PCB state to unsuspended and reinsert) str
(", &handle_rspcb\);) p n
() S 2 T (addcommand\(list, ") S
(sppcb) str
(",     ") p
(Set PCB priority and reinserts) str
(",            &handle_sppcb\)) p n
(;) N
() S 2 T (addcommand\(list, ") S
(shpcb) str
(",     ") p
(Display PCB/queue information) str
(",             &handle_shp) p n
(cb\);) N
(commands.c) (Page 1/5) (Dec 05, 17 23:57) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
() S 2 T () S
(/* Dispatching commands. */) c n
() p 2 T (addcommand\(list, ") S
(dispatch) str
(", ") p
(Dispatch all processes currently available) str
(", &handle_dispatch\);) p n
() N
() S 2 T () S
(/* File commands. */) c n
() p 2 T (addcommand\(list, ") S
(ls) str
(",    ") p
(Show all files in the directory) str
(",  &handle_ls\);) p n
() S 2 T (addcommand\(list, ") S
(cd) str
(",    ") p
(Change the current directory) str
(",     &handle_cd\);) p n
() S 2 T (addcommand\(list, ") S
(mkdir) str
(", ") p
(Create a new file directory) str
(",   &handle_mkdir\);) p n
() S 2 T (addcommand\(list, ") S
(rmdir) str
(", ") p
(Delete a  directory) str
(",           &handle_rmdir\);) p n
() S 2 T (addcommand\(list, ") S
(touch) str
(", ") p
(Create a file) str
(",                 &handle_touch\);) p n
() S 2 T (addcommand\(list, ") S
(rm) str
(",    ") p
(Delete a file) str
(",                    &handle_rm\);) p n
() N
() S 2 T () S
(/* User commands. */) c n
() p 2 T (addcommand\(list, ") S
(mkusr) str
(",     ") p
(Create a new user) str
(",                   &handle_mkusr\)) p n
(;) N
() S 2 T (addcommand\(list, ") S
(rmusr) str
(",     ") p
(Delete a user) str
(",                       &handle_rmusr\)) p n
(;) N
() S 2 T (addcommand\(list, ") S
(pwd) str
(",       ") p
(Change current user password) str
(",        &handle_pwd\);) p n
() S 2 T (addcommand\(list, ") S
(toggleadm) str
(", ") p
(Toggle the admin status of a user) str
(",   &handle_toggleadm\);) p n
() N
() S 2 T () S
(/* Misc. Commands. */) c n
() p 2 T (addcommand\(list, ") S
(exit) str
(",    ") p
(Exit TechOS) str
(",                                    &ha) p n
(ndle_exit\);) N
() S 2 T (addcommand\(list, ") S
(help) str
(",    ") p
(Get help for commands, or list available ones.) str
(", &handle_help\);) p n
() S 2 T (addcommand\(list, ") S
(version) str
(", ") p
(Display version/author information) str
(",             &handle_vers) p n
(ion\);) N
() S 2 T (addcommand\(list, ") S
(moo) str
(", ") p
( ~~moo~~) str
(",                                           &) p n
(handle_moo\);) N
(}) N
() N
(/*) c n
( * Handle exiting from the prompt.) N
( *) N
( * Make sure to confirm before hand.) N
( */) N
(HANDLECOM\(exit\) {) p n
() S 2 T () S
(/* Variables for line input. */) c n
() p 2 T () S
(char) k
(  *pszLine = ) p
(NULL) K
(;) p n
() S 2 T (size_t lread, lsize;) N
() N
() S 2 T () S
(/* Command return status. */) c n
() p 2 T () S
(int) k
( ret;) p n
() N
() S 2 T () S
(/* Init vars. */) c n
() p 2 T (ret     = 0;) N
() S 2 T (pszLine = ) S
(NULL) K
(;) p n
() N
() S 2 T () S
(/* Handle CLI args. */) c n
() p 2 T () S
(if) K
(\(argc > 1\) {) p n
() S 2 T () S 4 T () S
(return) K
( checkhelpargs\(argc, argv, ") p
(Usage: exit [-h] [--help]\\n) str
(", ostate\);) p n
() S 2 T (}) N
() N
() S 2 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Are you sure you want to exit? \(y/n\) ) str
("\);) p n
() S 2 T (lread = getline\(&pszLine, &lsize, stdin\);) N
() N
() S 2 T () S
(/* Use rpmatch\(\) to pick an action. */) c n
() p 2 T () S
(if) K
(\(lread > 1\) {) p n
() S 2 T () S 4 T () S
(int) k
( result = rpmatch\(pszLine\);) p n
() N
() S 2 T () S 4 T () S
(switch) K
(\(result\) {) p n
() S 2 T () S 4 T () S
(case) K
( 1:) p n
() S 2 T () S 4 T () S 6 T (ret = -1;) N
(commands.c) (Page 2/5) (Dec 05, 17 23:57) title
border
grestore
(TechOS Sources) rhead
(commands.c) (3/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( 0:) p n
() S 2 T () S 4 T () S 6 T (ret = 0;) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( -1:) p n
() S 2 T () S 4 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: Unknown response '%s'\\n) str
(", pszLine\);) p n
() S 2 T () S 4 T (}) N
() S 2 T (}) N
() N
() S 2 T () S
(/*) c n
() S 2 T ( * Cleanup after ourselves.) N
() S 2 T ( */) N
() p 2 T () S
(if) K
(\(pszLine ) p
(\271) sy
( ) p
(NULL) K
(\) free\(pszLine\);) p n
() N
() S 2 T () S
(return) K
( ret;) p n
(}) N
() N
(/* Print out version/author information. */) c n
(HANDLECOM\(version\) {) p n
() S 2 T () S 4 T () S
(return) K
( checkhelpargs\(argc, argv, ") p
(Usage: version [-advh] [--author] [--date] [--version] [--h) str n
(elp]\\n) S
(", ostate\);) p n
() N
() S 2 T () S
(/* Should version info be printed? */) c n
() p 2 T () S
(int) k
( printVersion = 1;) p n
() S 2 T () S
(/* Should author information be printed? */) c n
() p 2 T () S
(int) k
( printAuthor  = 0;) p n
() S 2 T () S
(/* Should date information be printed? */) c n
() p 2 T () S
(int) k
( printDate    = 0;) p n
() N
() S 2 T () S
(/* Reinit getopt. */) c n
() p 2 T (optind = 1;) N
() N
() S 2 T () S
(/* Process options. */) c n
() p 2 T () S
(while) K
(\(1\) {) p n
() S 2 T () S 4 T () S
(/*) c n
() S 2 T () S 4 T ( * @TODO 10/07/17 Ben Culkin :VersionOpts) N
() S 2 T () S 4 T ( * ) S 8 T (Adjust these options to some better way of indicating) N
() S 2 T () S 4 T ( * ) S 8 T (which information we do/do not want to show. If this was) N
() S 2 T () S 4 T ( * ) S 8 T (java, I'd just go with a custom format string sorta) N
() S 2 T () S 4 T ( * ) S 8 T (thing, but that'd have to be reimplemented for C, and'd) N
() S 2 T () S 4 T ( * ) S 8 T (be kinda painful. Maybe we'd want to look into something) N
() S 2 T () S 4 T ( * ) S 8 T (with getsubopt\(\)?) N
() S 2 T () S 4 T ( */) N
() p n
() S 2 T () S 4 T () S
(/* The current option/long option. */) c n
() p 2 T () S 4 T () S
(int) k
( opt, optidx;) p n
() S 2 T () S 4 T () S
(/* Usage message. */) c n
() p 2 T () S 4 T () S
(static) K
( ) p
(char) k
( *usage = ") p
(Usage: version [-advh] [--author] [--date] [--version] [--help]\\n) str
(";) p n
() N
() S 2 T () S 4 T () S
(static) K
( ) p
(struct) k
( option longopts[] = {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Info ctl. options. */) c n
() p 2 T () S 4 T () S 6 T ({") S
(author) str
(",  no_argument, 0, ') p
(a) str
('},) p n
() S 2 T () S 4 T () S 6 T ({") S
(date) str
(",    no_argument, 0, ') p
(d) str
('},) p n
() S 2 T () S 4 T () S 6 T ({") S
(version) str
(", no_argument, 0, ') p
(v) str
('},) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Misc. options. */) c n
() p 2 T () S 4 T () S 6 T ({") S
(help) str
(", no_argument, 0, ') p
(h) str
('},) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Terminating option. */) c n
() p 2 T () S 4 T () S 6 T ({0, 0, 0, 0}) N
() S 2 T () S 4 T (};) N
(commands.c) (Page 3/5) (Dec 05, 17 23:57) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
() S 2 T () S 4 T () S
(/* Get an option. */) c n
() p 2 T () S 4 T (opt = getopt_long\(argc, argv, ") S
(advh) str
(", longopts, &optidx\);) p n
() N
() S 2 T () S 4 T () S
(/* Finish options. */) c n
() p 2 T () S 4 T () S
(if) K
(\(opt ) p
(\272) sy
( -1\) ) p
(break) K
(;) p n
() N
() S 2 T () S 4 T () S
(switch) K
(\(opt\) {) p n
() S 2 T () S 4 T () S 6 T () S
(/* a, d and v are toggle options. */) c n
() p 2 T () S 4 T () S
(case) K
( ') p
(a) str
(':) p n
() S 2 T () S 4 T () S 6 T (printAuthor = 1 - printAuthor;) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(d) str
(':) p n
() S 2 T () S 4 T () S 6 T (printDate = 1 - printDate;) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(v) str
(':) p n
() S 2 T () S 4 T () S 6 T (printVersion = 1 - printDate;) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(h) str
(':) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 0;) p n
() S 2 T () S 4 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: Unknown short option '%c'\\n) str
(", opt\);) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() S 2 T (}) N
() N
() S 2 T () S
(/* Print version info. */) c n
() p 2 T () S
(if) K
(\(printVersion\) fprintf\(ostate) p
(\256) sy
(output, ") p
(\\tTechOS v%d.%d\\n) str
(", major_ver, minor_ve) p n
(r\);) N
() S 2 T () S
(if) K
(\(printAuthor\)  fprintf\(ostate) p
(\256) sy
(output, ") p
(\\tAuthors: Benjamin Culkin, Lucas Darnell, Jared Mil) str n
(ler\\n) S
("\);) p n
() S 2 T () S
(if) K
(\(printDate\)    fprintf\(ostate) p
(\256) sy
(output, ") p
(\\tCompletion Date: 9/13/17\\n) str
("\);) p n
() N
() S 2 T () S
(return) K
( 0;) p n
(}) N
() N
(HANDLECOM\(help\) {) N
() S 2 T () S
(/* Usage message. */) c n
() p 2 T () S
(char) k
( *usage = ") p
(Usage: help [-h] [--help] [<command-name>]\\n) str
(";) p n
() N
() S 2 T () S
(/* Handle CLI args. */) c n
() p 2 T () S
(if) K
(\(argc ) p
(\272) sy
( 1\) {) p n
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Available commands:\\n) str
("\);) p n
() N
() S 2 T () S 4 T () S
(/* ) c n
() S 2 T () S 4 T ( * @TODO 10/07/17 Ben Culkin :PrintCommandState) N
() S 2 T () S 4 T ( * ) S 8 T ( printcommands needs to be rewritten to accept a) N
() S 2 T () S 4 T ( * ) S 8 T ( commandstate, so that it can handle things like command) N
() S 2 T () S 4 T ( * ) S 8 T ( categories and help-only commands/internal commands) N
() S 2 T () S 4 T ( * ) S 8 T ( that don't show up in the default help list.) N
() S 2 T () S 4 T ( */) N
() p 2 T () S 4 T (printcommands\(ostate) S
(\256) sy
(pComstate) p
(\256) sy
(plCommands, ostate) p
(\256) sy
(output\);) p n
() S 2 T (} ) S
(else) K
( ) p
(if) K
(\(argc ) p
(\272) sy
( 2\){) p n
() S 2 T () S 4 T () S
(/* The path to the man page. */) c n
() p 2 T () S 4 T () S
(char) k
( *manpath;) p n
() N
() S 2 T () S 4 T () S
(/* The struct for checking if a file exists. */) c n
() p 2 T () S 4 T () S
(struct) k
( stat scratch;) p n
() N
() S 2 T () S 4 T () S
(int) k
( ret;) p n
(commands.c) (Page 4/5) (Dec 05, 17 23:57) title
border
grestore
(TechOS Sources) rhead
(commands.c) (4/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5,1) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
() S 2 T () S 4 T () S
(/* Handle CLI args. */) c n
() p 2 T () S 4 T () S
(if) K
(\(argv[1][0] ) p
(\272) sy
( ') p
(-) str
('\) {) p n
() S 2 T () S 4 T () S 6 T (checkhelpargs\(argc, argv, usage, ostate\);) N
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T () S
(/* Get the path we want to use. */) c n
() p 2 T () S 4 T (assert\(asprintf\(&manpath, ") S
(help/%s.1) str
(", argv[1]\) ) p
(\271) sy
( -1\);) p n
() N
() S 2 T () S 4 T () S
(/* Check if the file exists. */) c n
() p 2 T () S 4 T () S
(if) K
(\(stat\(manpath, &scratch\) ) p
(\272) sy
( -1\) {) p n
() S 2 T () S 4 T () S 6 T () S
(/* File wasn't found. */) c n
() p 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tINTERNAL ERROR: Manpage for command '%s' \('%s'\) couldn't be f) str n
(ound.\\n) S
(", argv[1], manpath\);) p n
() N
() S 2 T () S 4 T () S 6 T (free\(manpath\);) N
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() S 2 T () S 4 T () S
(if) K
(\(S_ISREG\(scratch.st_mode\)\) {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Command to run. */) c n
() p 2 T () S 4 T () S 6 T () S
(char) k
( *compath;) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Create our command, then run it. */) c n
() p 2 T () S 4 T () S 6 T (assert\(asprintf\(&compath, ") S
(man %s) str
(", manpath\) ) p
(\271) sy
( -1\);) p n
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(system\(compath\) ) p
(\271) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tINTERNAL ERROR: Could not display the manpage for '%s'\\n) str
(", ) p n
(argv[1]\);) N
() S 2 T () S 4 T () S 6 T (}) N
() N
() S 2 T () S 4 T () S 6 T (free\(compath\);) S 22 T () N
() S 2 T () S 4 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tINTERNAL ERROR: Manpage for command '%s' \('%s'\) is not valid.\\) str n
(n) S
(", argv[1], manpath\);) p n
() N
() S 2 T () S 4 T () S 6 T (free\(manpath\);) N
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T (free\(manpath\);) N
() S 2 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line arguments\\n) str
("\);) p n
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\t%s) str
(", usage\);) p n
() S 2 T (}) N
() N
() S 2 T () S
(return) K
( 0;) p n
(}) N
() N
(HANDLECOM\(moo\) {) N
() S 2 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(        \(__\)\\n) str
("\);) p n
() S 2 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(        \(oo\)\\n) str
("\);) p n
() S 2 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(  /------\\\\/\\n) str
("\);) p n
() S 2 T (fprintf\(ostate) S
(\256) sy
(output, ") p
( / |    ||\\n) str
("\);) p n
() S 2 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(*  /\\\\---/\\\\\\n) str
("\);) p n
() S 2 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(   ~~   ~~\\n) str
("\);) p n
() S 2 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(....\\"Have you mooed today?\\"...\\n) str
("\);) p n
() S 2 T () S
(return) K
( 0;) p n
(}) N
(commands.c) (Page 5/5) (Dec 05, 17 23:57) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#include) K
( <assert.h>) p n
(#include) K
( <stdlib.h>) p n
() N
(#include) K
( ") p
(comlist.h) str
(") p n
(#include) K
( ") p
(commandstate.h) str
(") p n
() N
(struct) k
( commandstate *makecommandstate\(\) {) p n
() S 2 T () S
(/* Allocate command state, and fail if it does. */) c n
() p 2 T () S
(struct) k
( commandstate *pComstate = malloc\() p
(sizeof) K
(\() p
(struct) k
( commandstate\)\);) p n
() N
() S 2 T (pComstate) S
(\256) sy
(plCommands = makecomlist\(\);) p n
() N
() S 2 T () S
(return) K
( pComstate;) p n
(}) N
() N
(void) k
( killcommandstate\() p
(struct) k
( commandstate *pComstate\) {) p n
() S 2 T (killcomlist\(pComstate) S
(\256) sy
(plCommands\);) p n
() N
() S 2 T (free\(pComstate\);) N
(}) N
(commandstate.c) (Page 1/1) (Oct 07, 17 19:25) title
border
grestore
(TechOS Sources) rhead
(commands.c, commandstate.c) (5/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 6
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#include) K
( <assert.h>) p n
(#include) K
( <getopt.h>) p n
(#include) K
( <stdio.h>) p n
(#include) K
( <stdlib.h>) p n
(#include) K
( <string.h>) p n
(#include) K
( <time.h>) p n
(#include) K
( <unistd.h>) p n
() N
(#include) K
( ") p
(osstate.h) str
(") p n
(#include) K
( ") p
(command.h) str
(") p n
(#include) K
( ") p
(commands.h) str
(") p n
() N
(#include) K
( ") p
(datecmds.h) str
(") p n
() N
(/* Print out localtime in the current date format. */) c n
(HANDLECOM\(date\) {) p n
() S 2 T () S
(/* Time values. */) c n
() p 2 T (time_t) S 10 T (   clocktime;) N
() S 2 T () S
(struct) k
( tm *datetime;) p n
() N
() S 2 T () S
(/* String buffer for times. */) c n
() p 2 T () S
(char) k
( outtime[255];) p n
() N
() S 2 T () S
(/* Amount of occupied buffer. */) c n
() p 2 T (size_t timesize;) N
() N
() S 2 T () S
(/* Handle CLI args. */) c n
() p 2 T () S
(if) K
(\(argc > 1\) {) p n
() S 2 T () S 4 T () S
(return) K
( checkhelpargs\(argc, argv, ") p
(Usage: date [-h] [--help]\\n) str
(", ostate\);) p n
() S 2 T (}) N
() N
() S 2 T () S
(/* Get the time and stringize it in the proper format. */) c n
() p 2 T (timesize  = strftime\(outtime, 255, ostate) S
(\256) sy
(out_datefmt, ostate) p
(\256) sy
(datetime\);) p n
() S 2 T () S
(/* Error if the format was too long. */) c n
() p 2 T () S
(if) K
(\(timesize ) p
(\272) sy
( 0\) {) p n
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: Output for format '%s' is too long. It must be shorter than 255 char) str n
(acters when filled out\\n) S
(", ostate) p
(\256) sy
(out_datefmt\);) p n
() S 2 T () S 4 T () S
(return) K
( 1;) p n
() S 2 T (}) N
() N
() S 2 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", outtime\);) p n
() N
() S 2 T () S
(return) K
( 0;) p n
(}) N
() N
(/* Display current time. */) c n
(HANDLECOM\(time\) {) p n
() S 2 T () S
(/* Time values. */) c n
() p 2 T (time_t) S 10 T (   clocktime;) N
() S 2 T () S
(struct) k
( tm *datetime;) p n
() N
() S 2 T () S
(/* String buffer for times. */) c n
() p 2 T () S
(char) k
( outtime[255];) p n
() N
() S 2 T () S
(/* Amount of occupied buffer. */) c n
() p 2 T (size_t timesize;) N
() N
() S 2 T () S
(/* Handle CLI args. */) c n
() p 2 T () S
(if) K
(\(argc > 1\) {) p n
() S 2 T () S 4 T () S
(return) K
( checkhelpargs\(argc, argv, ") p
(Usage: time [-h] [--help]\\n) str
(", ostate\);) p n
() S 2 T (}) N
() N
(datecmds.c) (Page 1/6) (Nov 22, 17 16:58) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S
(/* Update the time in our time struct. */) c n
() p 2 T (clocktime = time\() S
(NULL) K
(\);) p n
() S 2 T (datetime  = localtime\(&clocktime\);) N
() N
() S 2 T (ostate) S
(\256) sy
(datetime) p
(\256) sy
(tm_sec = datetime) p
(\256) sy
(tm_sec;) p n
() S 2 T (ostate) S
(\256) sy
(datetime) p
(\256) sy
(tm_min = datetime) p
(\256) sy
(tm_min;) p n
() S 2 T (ostate) S
(\256) sy
(datetime) p
(\256) sy
(tm_hour = datetime) p
(\256) sy
(tm_hour;) p n
() N
() S 2 T () S
(/* Stringize the time in the proper format. */) c n
() p 2 T (timesize  = strftime\(outtime, 255, ostate) S
(\256) sy
(time_datefmt, ostate) p
(\256) sy
(datetime\);) p n
() S 2 T () S
(/* Error if the format was too long. */) c n
() p 2 T () S
(if) K
(\(timesize ) p
(\272) sy
( 0\) {) p n
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: Output for format '%s' is too long. It must be shorter than 255 char) str n
(acters when filled out\\n) S
(", ostate) p
(\256) sy
(out_datefmt\);) p n
() S 2 T () S 4 T () S
(return) K
( 1;) p n
() S 2 T (}) N
() N
() S 2 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", outtime\);) p n
() N
() S 2 T () S
(return) K
( 0;) p n
(}) N
() N
() N
(/* Configure the date format. */) c n
(HANDLECOM\(datefmt\) {) p n
() S 2 T () S
(/* Enum declarations for modes. */) c n
() p 2 T () S
(enum) k
( setmode { SM_SET, SM_DISPLAY,         };) p n
() S 2 T () S
(enum) k
( fmtmode { FM_IN,  FM_OUT,     FM_TIME };) p n
() N
() S 2 T () S
(/* Whether to set or display the format. */) c n
() p 2 T () S
(enum) k
( setmode set;) p n
() S 2 T () S
(/* The format to display/modify. */) c n
() p 2 T () S
(enum) k
( fmtmode fmt;) p n
() S 2 T () S
(/* The format provided by the user. */) c n
() p 2 T () S
(char) k
( *pszFormat;) p n
() N
() S 2 T () S
(/* Set options to sensible defaults. */) c n
() p 2 T (set       = SM_DISPLAY;) N
() S 2 T (fmt       = FM_IN;) N
() S 2 T (pszFormat = ) S
(NULL) K
(;) p n
() N
() S 2 T () S
(/* Reinit getopt. */) c n
() p 2 T (optind = 1;) N
() N
() S 2 T () S
(/* Parse CLI args. */) c n
() p 2 T () S
(while) K
(\(1\) {) p n
() S 2 T () S 4 T () S
(/* The current option, and the current long option */) c n
() p 2 T () S 4 T () S
(int) k
( opt, optidx;) p n
() N
() S 2 T () S 4 T () S
(/* Our usage message. */) c n
() p 2 T () S 4 T () S
(static) K
( ) p
(const) K
( ) p
(char) k
( *usage = ") p
(Usage: datefmt [-stdioh] [--help] [--set|--display] [--time|--in|--o) str n
(ut] [-f|--format <format>]\\n) S
(";) p n
() N
() S 2 T () S 4 T () S
(/* The long options we take. */) c n
() p 2 T () S 4 T () S
(static) K
( ) p
(struct) k
( option opts[] = {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Misc. options. */) c n
() p 2 T () S 4 T () S 6 T ({") S
(help) str
(", no_argument, 0, ') p
(h) str
('},) p n
() S 2 T () S 4 T () S 6 T ({") S
(format) str
(", no_argument, 0, ') p
(f) str
('},) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Mode options. */) c n
() p 2 T () S 4 T () S 6 T ({") S
(set) str
(",     no_argument, 0, ') p
(s) str
('},) p n
() S 2 T () S 4 T () S 6 T ({") S
(display) str
(", no_argument, 0, ') p
(d) str
('},) p n
(datecmds.c) (Page 2/6) (Nov 22, 17 16:58) title
border
grestore
(TechOS Sources) rhead
(datecmds.c) (6/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 7
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
() S 2 T () S 4 T () S 6 T () S
(/* Format picking options. */) c n
() p 2 T () S 4 T () S 6 T ({") S
(time) str
(", no_argument, 0, ') p
(t) str
('},) p n
() S 2 T () S 4 T () S 6 T ({") S
(in) str
(",   no_argument, 0, ') p
(i) str
('},) p n
() S 2 T () S 4 T () S 6 T ({") S
(out) str
(",  no_argument, 0, ') p
(o) str
('},) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Terminating option. */) c n
() p 2 T () S 4 T () S 6 T ({0, 0, 0, 0}) N
() S 2 T () S 4 T (};) N
() N
() S 2 T () S 4 T () S
(/* Get an option. */) c n
() p 2 T () S 4 T (opt = getopt_long\(argc, argv, ") S
(f:stdioh) str
(", opts, &optidx\);) p n
() S 2 T () S 4 T () S
(/* Break if we've processed every option. */) c n
() p 2 T () S 4 T () S
(if) K
(\(opt ) p
(\272) sy
( -1\) ) p
(break) K
(;) p n
() N
() S 2 T () S 4 T () S
(/* Handle options. */) c n
() p 2 T () S 4 T () S
(switch) K
(\(opt\) {) p n
() S 2 T () S 4 T () S
(case) K
( 0:) p n
() S 2 T () S 4 T () S 6 T () S
(/* We picked a long option. */) c n
() p 2 T () S 4 T () S 6 T () S
(switch) K
(\(optidx\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* ) c n
() S 2 T () S 4 T () S 6 T () S 8 T ( * Long options are handled by corresponding) N
() S 2 T () S 4 T () S 6 T () S 8 T ( * short options.) N
() S 2 T () S 4 T () S 6 T () S 8 T ( */) N
() p 2 T () S 4 T () S 6 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(f) str
(':) p n
() S 2 T () S 4 T () S 6 T () S
(/* Free previous format. */) c n
() p 2 T () S 4 T () S 6 T () S
(if) K
(\(pszFormat ) p
(\271) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (free\(pszFormat\);) N
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(/*) c n
() S 2 T () S 4 T () S 6 T ( * @NOTE) N
() S 2 T () S 4 T () S 6 T ( * ) S 10 T (Is this duplication necessary?) N
() S 2 T () S 4 T () S 6 T ( */) N
() p 2 T () S 4 T () S 6 T (pszFormat = \() S
(char) k
( *\)strdup\(optarg\);) p n
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(s) str
(':) p n
() S 2 T () S 4 T () S 6 T (set = SM_SET;) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(t) str
(':) p n
() S 2 T () S 4 T () S 6 T (fmt = FM_TIME;) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(d) str
(':) p n
() S 2 T () S 4 T () S 6 T (set = SM_DISPLAY;) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(i) str
(':) p n
() S 2 T () S 4 T () S 6 T (fmt = FM_IN;) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(o) str
(':) p n
() S 2 T () S 4 T () S 6 T (fmt = FM_OUT;) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(h) str
(':) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 0;) p n
() S 2 T () S 4 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument.\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
(datecmds.c) (Page 3/6) (Nov 22, 17 16:58) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() S 2 T (}) N
() N
() S 2 T () S
(if) K
(\(set ) p
(\272) sy
( SM_DISPLAY\) {) p n
() S 2 T () S 4 T () S
(/* Display the format. */) c n
() p 2 T () S 4 T () S
(switch) K
(\(fmt\) {) p n
() S 2 T () S 4 T () S
(case) K
( FM_IN:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", ostate) p
(\256) sy
(in_datefmt\);) p n
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( FM_OUT:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", ostate) p
(\256) sy
(out_datefmt\);) p n
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( FM_TIME:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", ostate) p
(\256) sy
(time_datefmt\);) p n
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T () S
(/* Shouldn't happen. */) c n
() p 2 T () S 4 T () S 6 T (assert\(0\);) N
() S 2 T () S 4 T (}) N
() S 2 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S
(/* Read a format only if we need to. */) c n
() p 2 T () S 4 T () S
(if) K
(\(pszFormat ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Variables for format input. */) c n
() p 2 T () S 4 T () S 6 T (size_t lsize, lread, llen;) N
() N
() S 2 T () S 4 T () S 6 T () S
(/* Prompt/read the new format. */) c n
() p 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Enter the new format: ) str
("\);) p n
() S 2 T () S 4 T () S 6 T (lread = getline\(&pszFormat, &lsize, ostate) S
(\256) sy
(strem\);) p n
() N
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(lread < 1\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: No input available\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() N
() S 2 T () S 4 T () S 6 T () S
(/* Trim trailing newline. */) c n
() p 2 T () S 4 T () S 6 T (llen = strlen\(pszFormat\);) N
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(pszFormat[llen-1] ) p
(\272) sy
( ') p
(\\n) str
('\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (pszFormat[llen-1] = ') S
(\\0) str
(';) p n
() S 2 T () S 4 T () S 6 T (}) N
() N
() S 2 T () S 4 T () S 6 T () S
(/* Warn if truncation is going to occur. */) c n
() p 2 T () S 4 T () S 6 T () S
(if) K
(\(llen ) p
(\263) sy
( 256\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(WARNING: Truncating format '%1$s' to '%1$.256s'\\n) str
(", pszFor) p n
(mat\);) N
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T () S
(/* Set the format. */) c n
() p 2 T () S 4 T () S
(switch) K
(\(fmt\) {) p n
() S 2 T () S 4 T () S
(case) K
( FM_IN:) p n
() S 2 T () S 4 T () S 6 T (sprintf\(ostate) S
(\256) sy
(in_datefmt,  ") p
(%.256s) str
(", pszFormat\);) p n
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( FM_OUT:) p n
() S 2 T () S 4 T () S 6 T (sprintf\(ostate) S
(\256) sy
(out_datefmt, ") p
(%.256s) str
(", pszFormat\);) p n
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( FM_TIME:) p n
() S 2 T () S 4 T () S 6 T (sprintf\(ostate) S
(\256) sy
(time_datefmt, ") p
(%.256s) str
(", pszFormat\);) p n
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T () S
(/* Shouldn't happen. */) c n
() p 2 T () S 4 T () S 6 T (assert\(0\);) N
(datecmds.c) (Page 4/6) (Nov 22, 17 16:58) title
border
grestore
(TechOS Sources) rhead
(datecmds.c) (7/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 8
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T () S
(/* Cleanup after ourselves. */) c n
() p 2 T () S 4 T (free\(pszFormat\);) N
() N
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Format set\\n) str
("\);) p n
() S 2 T (}) N
() N
() S 2 T () S
(return) K
( 0;) p n
(}) N
() N
(HANDLECOM\(setdate\) {) N
() S 2 T () S
(/*) c n
() S 2 T ( * @TODO 10/25/17 Ben Culkin :SetdateCLI) N
() S 2 T ( *) S 6 T (Convert this to use getopt for arg-handling and add the) N
() S 2 T ( *) S 6 T (following options:) N
() S 2 T ( * ) S 6 T (- Specify the date as a CLI param) N
() S 2 T ( * ) S 6 T (- Specify a custom format to use) N
() S 2 T ( */) N
() p 2 T () S
(/* Variables for date input. */) c n
() p 2 T () S
(char) k
( *line;) p n
() S 2 T (size_t lsize, lread, llen;) N
() N
() S 2 T () S
(/* The time from the line, and any left-over bits. */) c n
() p 2 T () S
(struct) k
( tm *datetime;) p n
() S 2 T () S
(char) k
() p 8 T (  *leftovers;) N
() N
() S 2 T () S
(/* The official time. */) c n
() p 2 T (time_t clocktime;) N
() N
() S 2 T () S
(/* Handle CLI args. */) c n
() p 2 T () S
(if) K
(\(argc > 1\) {) p n
() S 2 T () S 4 T () S
(return) K
( checkhelpargs\(argc, argv, ") p
(Usage: setdate [-h] [--help]\\n) str
(", ostate\);) p n
() S 2 T (}) N
() N
() S 2 T () S
(/* Get the current time. */) c n
() p 2 T (datetime  = ostate) S
(\256) sy
(datetime;) p n
() N
() S 2 T () S
(/* Prompt/read the new date. */) c n
() p 2 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Enter the new date: ) str
("\);) p n
() S 2 T (lread = getline\(&line, &lsize, ostate) S
(\256) sy
(strem\);) p n
() N
() S 2 T () S
(if) K
(\(lread < 1\) {) p n
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: No input provided.\\n) str
("\);) p n
() S 2 T () S 4 T () S
(return) K
( 1;) p n
() S 2 T (}) N
() N
() S 2 T () S
(/* Trim trailing newline. */) c n
() p 2 T (llen = strlen\(line\);) N
() S 2 T () S
(if) K
(\(line[llen-1] ) p
(\272) sy
( ') p
(\\n) str
('\)) p n
() S 2 T () S 4 T (line[llen-1] = ') S
(\\0) str
(';) p n
() N
() S 2 T () S
(/* Parse the input according to the format. */) c n
() p 2 T (leftovers = \() S
(char) k
( *\)strptime\(line, ostate) p
(\256) sy
(in_datefmt, datetime\);) p n
() S 2 T () S
(if) K
(\(leftovers ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S
(/* The format didn't match correctly. */) c n
() p 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Input '%s' doesn't match format '%s'\\n) str
(", line, ostate) p
(\256) sy
() p n
(in_datefmt\);) N
() S 2 T () S 4 T (free\(line\);) N
() S 2 T () S 4 T () S
(return) K
( 1;) p n
() S 2 T (} ) S
(else) K
( ) p
(if) K
(\(*leftovers ) p
(\271) sy
( ') p
(\\0) str
('\) {) p n
() S 2 T () S 4 T () S
(/* There were trailing characters in the input. */) c n
(datecmds.c) (Page 5/6) (Nov 22, 17 16:58) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tWARNING: Trailing input '%s' unused by format\\n) str
(", leftovers\);) p n
() S 2 T (}) N
() N
() S 2 T () S
(/* Sanitize/set the time. */) c n
() p 2 T (clocktime        = mktime\(datetime\);) N
() S 2 T (ostate) S
(\256) sy
(datetime = localtime\(&clocktime\);) p n
() S 2 T () S
(if) K
(\(ostate) p
(\256) sy
(datetime ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tFATAL ERROR: Date/time value overflowed.) str
("\);) p n
() S 2 T () S 4 T (free\(line\);) N
() S 2 T () S 4 T () S
(return) K
( -1;) p n
() S 2 T (}) N
() N
() S 2 T () S
(/* Cleanup. */) c n
() p 2 T (free\(line\);) N
() S 2 T () S
(return) K
( 0;) p n
(}) N
(datecmds.c) (Page 6/6) (Nov 22, 17 16:58) title
border
grestore
(TechOS Sources) rhead
(datecmds.c) (8/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 9
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#include) K
( <assert.h>) p n
(#include) K
( <stdio.h>) p n
(#include) K
( <stdlib.h>) p n
() N
(#include) K
( ") p
(command.h) str
(") p n
(#include) K
( ") p
(osstate.h) str
(") p n
() N
(#include) K
( ") p
(pcb.h) str
(") p n
(#include) K
( ") p
(pcbinternals.h) str
(") p n
() N
(#include) K
( ") p
(procexecute.h) str
(") p n
() N
(#include) K
( ") p
(dispatchcmds.h) str
(") p n
() N
(/* Do the actual work of dispatching processes. */) c n
(static) K
( ) p
(int) k
( dodispatch\() p
(struct) k
( osstate *ostate, ) p
(int) k
( verbosity\) {) p n
() S 2 T () S
(/* Original number of dispatchables. */) c n
() p 2 T () S
(int) k
( ondisp;) p n
() N
() S 2 T () S
(/* Counter variables. */) c n
() p 2 T () S
(int) k
( ndisp, niter, ninter, cndisp;) p n
() N
() S 2 T () S
(/* Initialize counters. */) c n
() p 2 T (ndisp = 0;) N
() S 2 T (niter = 0;) N
() S 2 T (ninter = 0;) N
() N
() S 2 T (ondisp = candispatch\(ostate) S
(\256) sy
(pPCBstat\);) p n
() S 2 T (cndisp = candispatch\(ostate) S
(\256) sy
(pPCBstat\);) p n
() N
() S 2 T () S
(while) K
(\(cndisp > 0\) {) p n
() S 2 T () S 4 T () S
(if) K
(\(verbosity > 1\) {) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%d dispatchables remaining at iteration %d \(%d originally\)\\n) str
(",) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (cndisp, niter, ondisp\);) N
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T () S
(/* Increment iteration counter. */) c n
() p 2 T () S 4 T (niter += 1;) N
() N
() S 2 T () S 4 T () S
(/* The PCB being dispatched. */) c n
() p 2 T () S 4 T () S
(struct) k
( pcb *pPCB;) p n
() N
() S 2 T () S 4 T () S
(/* The path to the file the image comes from. */) c n
() p 2 T () S 4 T () S
(const) K
( ) p
(char) k
( *pszImage;) p n
() S 2 T () S 4 T () S
(/* The file the image comes from. */) c n
() p 2 T () S 4 T () S
(FILE) k
( *pfImage;) p n
() S 2 T () S 4 T () S
(/* The name of the process being dispatched. */) c n
() p 2 T () S 4 T () S
(const) K
( ) p
(char) k
( *pszName;) p n
() N
() S 2 T () S 4 T (pPCB = \() S
(struct) k
( pcb *\)getdisppcb\(ostate) p
(\256) sy
(pPCBstat\);) p n
() N
() S 2 T () S 4 T () S
(if) K
(\(pPCB ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Something caused a dispatchable PCB to disappear. */) c n
() p 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(WARNING: Dispatchable process went *poof*\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S
(continue) K
(;) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T () S
(/* Get the name of the process. */) c n
() p 2 T () S 4 T (pszName = lookupkey\(ostate) S
(\256) sy
(pPCBstat) p
(\256) sy
(ptPCBNames, pPCB) p
(\256) sy
(kName\);) p n
() N
() S 2 T () S 4 T () S
(/* Get the path to the image. */) c n
() p 2 T () S 4 T (pszImage = lookupkey\(ostate) S
(\256) sy
(pPCBstat) p
(\256) sy
(ptPCBImages, pPCB) p
(\256) sy
(kImage\);) p n
(dispatchcmds.c) (Page 1/3) (Nov 04, 17 15:07) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S
(/* Open the image. */) c n
() p 2 T () S 4 T (pfImage = fopen\(pszImage, ") S
(r) str
("\);) p n
() S 2 T () S 4 T () S
(if) K
(\(pfImage ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(WARNING: Could not open image '%s' for process '%s' \(id no. %d\)\\n) str
(") p n
(,) N
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (pszImage, pszName, pPCB) S
(\256) sy
(id\);) p n
() S 2 T () S 4 T () S 6 T () S
(continue) K
(;) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T () S
(/* The process is now running. */) c n
() p 2 T () S 4 T (pPCB) S
(\256) sy
(status = PCB_RUNNING;) p n
() N
() S 2 T () S 4 T () S
(if) K
(\(verbosity > 0\) {) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Executing process '%s' \(id no. %d\), starting at offset %d\\n) str
(", pszName) p n
(, pPCB) S
(\256) sy
(id, pPCB) p
(\256) sy
(offset\);) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T () S
(/* Dispatch the process. */) c n
() p 2 T () S 4 T (pPCB) S
(\256) sy
(offset = executeimage\(pfImage, pPCB) p
(\256) sy
(offset\);) p n
() N
() S 2 T () S 4 T () S
(/* The process finished. */) c n
() p 2 T () S 4 T () S
(if) K
(\(pPCB) p
(\256) sy
(offset ) p
(\272) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Increment dispatchable counter. */) c n
() p 2 T () S 4 T () S 6 T (ndisp += 1;) N
() N
() S 2 T () S 4 T () S 6 T () S
(/* The process finished. */) c n
() p 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Process '%s' \(id no. %d\) finished execution\\n) str
(", pszName, pPCB) p
(\256) sy
(i) p n
(d\);) N
() S 2 T () S 4 T () S 6 T (killpcb\(pPCB\);) N
() S 2 T () S 4 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T (pPCB) S
(\256) sy
(offset += 1;) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* The return from inserting the PCB. */) c n
() p 2 T () S 4 T () S 6 T () S
(enum) k
( pcberror ret;) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* The process stopped. */) c n
() p 2 T () S 4 T () S 6 T () S
(if) K
(\(verbosity > 0\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Process '%s' \(id no. %d\) blocked at offset %d\\n) str
(", pszName, pPC) p n
(B) S
(\256) sy
(id, pPCB) p
(\256) sy
(offset - 1\);) p n
() S 2 T () S 4 T () S 6 T (}) N
() N
() S 2 T () S 4 T () S 6 T (pPCB) S
(\256) sy
(status = PCB_BLOCKED;) p n
() N
() S 2 T () S 4 T () S 6 T (ret = insertpcb\(ostate) S
(\256) sy
(pPCBstat, pPCB\);) p n
() N
() S 2 T () S 4 T () S 6 T () S
(switch) K
(\(ret\) {) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( PCBSUCCESS:) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* Increment interrupt counter. */) c n
() p 2 T () S 4 T () S 6 T () S 8 T (ninter += 1;) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( PCBINVSUSP:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(WARNING: Process '%s' \(id no. %d\) was dropped on the floor becau) str n
(se of an invalid suspension status \(%d\)\\n) S
(", pszName, pPCB) p
(\256) sy
(id, pPCB) p
(\256) sy
(susp\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (killpcb\(pPCB\);) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( PCBINVSTAT:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(WARNING: Process '%s' \(id no. %d\) was dropped on the floor becau) str n
(se of an invalid run status \(%d\)\\n) S
(", pszName, pPCB) p
(\256) sy
(id, pPCB) p
(\256) sy
(status\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (killpcb\(pPCB\);) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( PCBRUNNING:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(WARNING: Process '%s' \(id no. %d\) was dropped on the floor becau) str n
(dispatchcmds.c) (Page 2/3) (Nov 04, 17 15:07) title
border
grestore
(TechOS Sources) rhead
(dispatchcmds.c) (9/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3,1) 10
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(se it was improperly marked as running\\n) str
(", pszName, pPCB) p
(\256) sy
(id\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (killpcb\(pPCB\);) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( PCBINQUEUE:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(WARNING: Process '%s' \(id no. %d\) was dropped on the floor becau) str n
(se it was improperly inserted into a queue\\n) S
(", pszName, pPCB) p
(\256) sy
(id\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (killpcb\(pPCB\);) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* Shouldn't happen. */) c n
() p 2 T () S 4 T () S 6 T () S 8 T (assert\(0\);) N
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T () S
(/* Close the file. */) c n
() p 2 T () S 4 T (fclose\(pfImage\);) N
() N
() S 2 T () S 4 T (cndisp = candispatch\(ostate) S
(\256) sy
(pPCBstat\);) p n
() S 2 T (}) N
() N
() S 2 T () S
(if) K
(\(verbosity > 0\) {) p n
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Dispatched %d processes in %d iterations with %d interrupts\\n) str
(", ndisp,) p n
( niter, ninter\);) N
() S 2 T (}) N
() N
() S 2 T () S
(return) K
( 0;) p n
(}) N
() N
(/* Handle dispatching PCBs. */) c n
(HANDLECOM\(dispatch\) {) p n
() S 2 T () S
(/* The amount of text to print. */) c n
() p 2 T () S
(int) k
( verbosity;) p n
() N
() S 2 T () S
(/* The number of dispatchable PCBs available. */) c n
() p 2 T () S
(int) k
( ndisp;) p n
() N
() S 2 T (verbosity = 0;) N
() N
() S 2 T (ndisp = candispatch\(ostate) S
(\256) sy
(pPCBstat\);) p n
() N
() S 2 T () S
(if) K
(\(ndisp ) p
(\272) sy
( 0\) {) p n
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(No processes to dispatch\\n) str
("\);) p n
() S 2 T () S 4 T () S
(return) K
( 0;) p n
() S 2 T (}) N
() N
() S 2 T () S
(if) K
(\(verbosity > 0\) {) p n
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Dispatching %d processes\\n) str
(", ndisp\);) p n
() S 2 T (}) N
() N
() S 2 T () S
(return) K
( dodispatch\(ostate, verbosity\);) p n
(}) N
(dispatchcmds.c) (Page 3/3) (Nov 04, 17 15:07) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#define) K
( _ATFILE_SOURCE) p n
() N
(#include) K
( <assert.h>) p n
(#include) K
( <dirent.h>) p n
(#include) K
( <errno.h>) p n
(#include) K
( <fcntl.h>) p n
(#include) K
( <getopt.h>) p n
(#include) K
( <stdio.h>) p n
(#include) K
( <stdlib.h>) p n
(#include) K
( <string.h>) p n
(#include) K
( <unistd.h>) p n
() N
(#include) K
( <sys/types.h>) p n
(#include) K
( <sys/stat.h>) p n
() N
(#include) K
( ") p
(osstate.h) str
(") p n
(#include) K
( ") p
(command.h) str
(") p n
() N
(#include) K
( ") p
(filecmds.h) str
(") p n
() N
(HANDLECOM\(ls\) {) N
() S 2 T () S
(/* Reinit getopt. */) c n
() p 2 T (optind = 1;) N
() S 2 T () S
(int) k
( showSize = 0;) p n
() N
() S 2 T () S
(while) K
(\(1\) {) p n
() S 2 T () S 4 T () S
(/* Enum declaration for long options. */) c n
() p 2 T () S 4 T () S
(enum) k
( scriptopt {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Help option. */) c n
() p 2 T () S 4 T () S 6 T (SO_HELP = 0,) N
() S 2 T () S 4 T (};) N
() N
() S 2 T () S 4 T () S
(/* The current option, and the current long option. */) c n
() p 2 T () S 4 T () S
(int) k
( opt, optidx;) p n
() N
() S 2 T () S 4 T () S
(/* Our usage message. */) c n
() p 2 T () S 4 T () S
(char) k
( *usage = ") p
(Usage ls [-h] [--help] [-l] <directory-name or path>) str
(";) p n
() N
() S 2 T () S 4 T () S
(static) K
( ) p
(struct) k
( option opts[] = {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Show everything. */) c n
() p 2 T () S 4 T () S 6 T ({") S
(long) str
(", no_argument, 0, ') p
(l) str
('},) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Misc. options. */) c n
() p 2 T () S 4 T () S 6 T ({") S
(help) str
(", no_argument, 0, ') p
(h) str
('},) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Terminating option. */) c n
() p 2 T () S 4 T () S 6 T ({0, 0, 0, 0}) N
() S 2 T () S 4 T (};) N
() N
() S 2 T () S 4 T () S
(/* Get an option. */) c n
() p 2 T () S 4 T (opt = getopt_long\(argc, argv, ") S
(hl) str
(", opts, &optidx\);) p n
() S 2 T () S 4 T () S
(/* Break if we've processed everything. */) c n
() p 2 T () S 4 T () S
(if) K
(\(opt ) p
(\272) sy
( -1\) ) p
(break) K
(;) p n
() N
() S 2 T () S 4 T () S
(/* Handle options. */) c n
() p 2 T () S 4 T () S
(switch) K
(\(opt\) {) p n
() S 2 T () S 4 T () S
(case) K
( 0:) p n
() S 2 T () S 4 T () S 6 T () S
(/* ) c n
() S 2 T () S 4 T () S 6 T ( * We picked a long option, but they are handled by) N
() S 2 T () S 4 T () S 6 T ( * their short options.) N
() S 2 T () S 4 T () S 6 T ( */) N
() p 2 T () S 4 T () S 6 T () S
(switch) K
(\(optidx\) {) p n
(filecmds.c) (Page 1/13) (Nov 26, 17 12:15) title
border
grestore
(TechOS Sources) rhead
(dispatchcmds.c, filecmds.c) (10/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2-3) 11
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S 6 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(h) str
(':) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 0;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(l) str
(':) p n
() S 2 T () S 4 T () S 6 T (showSize = 1;) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() N
() S 2 T () S 4 T (}) N
() S 2 T (}) N
() N
() S 2 T () S
(/* The specified directory. */) c n
() p 2 T () S
(char) k
( *pszDirname;) p n
() N
() S 2 T () S
(if) K
(\(argc ) p
(\243) sy
( \(optind\)\) {) p n
() S 2 T () S 4 T (pszDirname = ") S
(.) str
(";) p n
() S 2 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T (pszDirname = argv[optind];) N
() S 2 T (}) N
() N
() S 2 T () S
(/* FD to directory. */) c n
() p 2 T () S
(int) k
( fDir;) p n
() S 2 T () S
(/* Directory stream. */) c n
() p 2 T (DIR *sDir;) N
() S 2 T () S
(/* Current entry into the stream. */) c n
() p 2 T () S
(struct) k
( dirent *pdEnt;) p n
() S 2 T () S
(/* The number of directory entries read so far. */) c n
() p 2 T () S
(int) k
( count;) p n
() N
() S 2 T () S
(/* Init count. */) c n
() p 2 T (count = 0;) N
() N
() S 2 T (fDir = openat\(ostate) S
(\256) sy
(fWorkingDir, pszDirname, 0\);) p n
() S 2 T () S
(if) K
(\(fDir ) p
(\272) sy
( -1\) {) p n
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Could not open directory '%s'\\n) str
(", pszDirname\);) p n
() S 2 T () S 4 T () S
(return) K
( 1;) p n
() S 2 T (}) N
() N
() S 2 T (sDir = \(DIR *\)fdopendir\(fDir\);) N
() S 2 T () S
(if) K
(\(sDir ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Could not open directory '%s' \\n) str
(", pszDirname\);) p n
() S 2 T () S 4 T () S
(return) K
( 1;) p n
() S 2 T (}) N
() N
() S 2 T (pdEnt = readdir\(sDir\);) N
() S 2 T () S
(while) K
(\(pdEnt ) p
(\271) sy
( ) p
(NULL) K
(\){) p n
() S 2 T () S 4 T () S
(char) k
( *fName = pdEnt) p
(\256) sy
(d_name;) p n
() N
() S 2 T () S 4 T () S
(if) K
(\(showSize\) {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Scratch struct. */) c n
() p 2 T () S 4 T () S 6 T () S
(struct) k
( stat buf;) p n
() N
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(fstatat\(fDir, fName, &buf, 0\) ) p
(\271) sy
( 0\) {) p n
(filecmds.c) (Page 2/13) (Nov 26, 17 12:15) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Could not check if file '%s' exists\\n) str
(", fName\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() N
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(buf.st_size > \(1024 * 1024\)\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(int) k
( temp = buf.st_size / \(1024*1024\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%d\\e[34mMB\\e[0m\\t\\t%s\\n) str
(",  temp, fName\);) p n
() S 2 T () S 4 T () S 6 T (} ) S
(else) K
( ) p
(if) K
(\(buf.st_size > 4096\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(int) k
( temp = buf.st_size / 1024;) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%d\\e[32mKB\\e[0m\\t\\t%s\\n) str
(",  temp, fName\);) p n
() S 2 T () S 4 T () S 6 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%ld\\e[37mB\\e[0m\\t\\t%s\\n) str
(",  buf.st_size, fName\);) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", fName\);) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T (pdEnt = readdir\(sDir\);) N
() S 2 T (}) N
() N
() S 2 T () S
(return) K
( 1;) p n
(}) N
() N
(HANDLECOM\(cd\) {) N
() S 2 T () S
(/* Reinit getopt. */) c n
() p 2 T (optind = 1;) N
() N
() S 2 T () S
(while) K
(\(1\) {) p n
() S 2 T () S 4 T () S
(/* Enum declaration for long options. */) c n
() p 2 T () S 4 T () S
(enum) k
( scriptopt {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Help option. */) c n
() p 2 T () S 4 T () S 6 T (SO_HELP = 0,) N
() S 2 T () S 4 T (};) N
() N
() S 2 T () S 4 T () S
(/* The current option, and the current long option. */) c n
() p 2 T () S 4 T () S
(int) k
( opt, optidx;) p n
() N
() S 2 T () S 4 T () S
(/* Our usage message. */) c n
() p 2 T () S 4 T () S
(char) k
( *usage = ") p
(Usage cd [-h] [--help] <directory-name>) str
(";) p n
() N
() S 2 T () S 4 T () S
(static) K
( ) p
(struct) k
( option opts[] = {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Misc. options. */) c n
() p 2 T () S 4 T () S 6 T ({") S
(help) str
(", no_argument, 0, ') p
(h) str
('},) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Terminating option. */) c n
() p 2 T () S 4 T () S 6 T ({0, 0, 0, 0}) N
() S 2 T () S 4 T (};) N
() N
() S 2 T () S 4 T () S
(/* Get an option. */) c n
() p 2 T () S 4 T (opt = getopt_long\(argc, argv, ") S
(h) str
(", opts, &optidx\);) p n
() S 2 T () S 4 T () S
(/* Break if we've processed everything. */) c n
() p 2 T () S 4 T () S
(if) K
(\(opt ) p
(\272) sy
( -1\) ) p
(break) K
(;) p n
() N
() S 2 T () S 4 T () S
(/* Handle options. */) c n
() p 2 T () S 4 T () S
(switch) K
(\(opt\) {) p n
() S 2 T () S 4 T () S
(case) K
( 0:) p n
() S 2 T () S 4 T () S 6 T () S
(/* ) c n
() S 2 T () S 4 T () S 6 T ( * We picked a long option, but they are handled by) N
() S 2 T () S 4 T () S 6 T ( * their short options.) N
() S 2 T () S 4 T () S 6 T ( */) N
() p 2 T () S 4 T () S 6 T () S
(switch) K
(\(optidx\) {) p n
() S 2 T () S 4 T () S 6 T () S
(default) K
(:) p n
(filecmds.c) (Page 3/13) (Nov 26, 17 12:15) title
border
grestore
(TechOS Sources) rhead
(filecmds.c) (11/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (4-5) 12
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(h) str
(':) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 0;) p n
() S 2 T () S 4 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() N
() S 2 T () S 4 T (}) N
() S 2 T (}) N
() N
() S 2 T () S
(/* Make sure enough arguments are provided. */) c n
() p 2 T () S
(if) K
(\(argc ) p
(\243) sy
( \(optind\)\) {) p n
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Must provide the directory name as an argument\\n) str
("\);) p n
() S 2 T () S 4 T () S
(return) K
( 1;) p n
() S 2 T (}) N
() N
() S 2 T ({) N
() S 2 T () S 4 T () S
(/* The name of the file. */) c n
() p 2 T () S 4 T () S
(char) k
( *pszDirname;) p n
() S 2 T () S 4 T () S
(/* The old working directory. */) c n
() p 2 T () S 4 T () S
(int) k
( fOld;) p n
() N
() S 2 T () S 4 T (pszDirname = argv[optind];) N
() N
() S 2 T () S 4 T () S
(/* Make sure that it is a directory. */) c n
() p 2 T () S 4 T ({) N
() S 2 T () S 4 T () S 6 T () S
(struct) k
( stat buf;) p n
() N
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(fstatat\(ostate) p
(\256) sy
(fWorkingDir, pszDirname, &buf, 0\) ) p
(\271) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Couldn't check the status of '%s' \(Are you sure it exists?\)\\) str n
(n) S
(", pszDirname\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() N
() S 2 T () S 4 T () S 6 T () S
(if) K
(\() p
(\330) sy
(S_ISDIR\(buf.st_mode\)\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: '%s' is not a directory\\n) str
(", pszDirname\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T (fOld = ostate) S
(\256) sy
(fWorkingDir;) p n
() N
() S 2 T () S 4 T (ostate) S
(\256) sy
(fWorkingDir = openat\(fOld, pszDirname, O_RDONLY\);) p n
() S 2 T () S 4 T () S
(if) K
(\(ostate) p
(\256) sy
(fWorkingDir ) p
(\272) sy
( -1\) {) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Couldn't switch to directory '%s'\\n) str
(", pszDirname\);) p n
() S 2 T () S 4 T () S 6 T (ostate) S
(\256) sy
(fWorkingDir = fOld;) p n
() N
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Succesfully changed to directory '%s'\\n) str
(", pszDirname\);) p n
() S 2 T () S 4 T (close\(fOld\);) N
() S 2 T (}) N
() N
() S 2 T () S
(return) K
( 0;) p n
(}) N
(filecmds.c) (Page 4/13) (Nov 26, 17 12:15) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(HANDLECOM\(mkdir\) {) N
() S 2 T () S
(/* Reinit getopt. */) c n
() p 2 T (optind = 1;) N
() N
() S 2 T () S
(while) K
(\(1\) {) p n
() S 2 T () S 4 T () S
(/* Enum declaration for long options. */) c n
() p 2 T () S 4 T () S
(enum) k
( scriptopt {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Help option. */) c n
() p 2 T () S 4 T () S 6 T (SO_HELP = 0,) N
() S 2 T () S 4 T (};) N
() N
() S 2 T () S 4 T () S
(/* The current option, and the current long option. */) c n
() p 2 T () S 4 T () S
(int) k
( opt, optidx;) p n
() N
() S 2 T () S 4 T () S
(/* Our usage message. */) c n
() p 2 T () S 4 T () S
(char) k
( *usage = ") p
(Usage mkdir [-h] [--help] <directory-name>) str
(";) p n
() N
() S 2 T () S 4 T () S
(static) K
( ) p
(struct) k
( option opts[] = {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Misc. options. */) c n
() p 2 T () S 4 T () S 6 T ({") S
(help) str
(", no_argument, 0, ') p
(h) str
('},) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Terminating option. */) c n
() p 2 T () S 4 T () S 6 T ({0, 0, 0, 0}) N
() S 2 T () S 4 T (};) N
() N
() S 2 T () S 4 T () S
(/* Get an option. */) c n
() p 2 T () S 4 T (opt = getopt_long\(argc, argv, ") S
(h) str
(", opts, &optidx\);) p n
() S 2 T () S 4 T () S
(/* Break if we've processed everything. */) c n
() p 2 T () S 4 T () S
(if) K
(\(opt ) p
(\272) sy
( -1\) ) p
(break) K
(;) p n
() N
() S 2 T () S 4 T () S
(/* Handle options. */) c n
() p 2 T () S 4 T () S
(switch) K
(\(opt\) {) p n
() S 2 T () S 4 T () S
(case) K
( 0:) p n
() S 2 T () S 4 T () S 6 T () S
(/* ) c n
() S 2 T () S 4 T () S 6 T ( * We picked a long option, but they are handled by) N
() S 2 T () S 4 T () S 6 T ( * their short options.) N
() S 2 T () S 4 T () S 6 T ( */) N
() p 2 T () S 4 T () S 6 T () S
(switch) K
(\(optidx\) {) p n
() S 2 T () S 4 T () S 6 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(h) str
(':) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 0;) p n
() S 2 T () S 4 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() N
() S 2 T () S 4 T (}) N
() S 2 T (}) N
() N
() S 2 T () S
(/* Make sure enough arguments are provided. */) c n
() p 2 T () S
(if) K
(\(argc ) p
(\243) sy
( \(optind\)\) {) p n
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Must provide the directory name as an argument\\n) str
("\);) p n
() S 2 T () S 4 T () S
(return) K
( 1;) p n
() S 2 T (}) N
() N
(filecmds.c) (Page 5/13) (Nov 26, 17 12:15) title
border
grestore
(TechOS Sources) rhead
(filecmds.c) (12/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (6-7) 13
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T ({) N
() S 2 T () S 4 T () S
(/* The name of the file. */) c n
() p 2 T () S 4 T () S
(char) k
( *pszDirname;) p n
() N
() S 2 T () S 4 T (pszDirname = argv[optind];) N
() N
() S 2 T () S 4 T () S
(/* check the status */) c n
() p 2 T () S 4 T () S
(if) K
(\(mkdirat\(ostate) p
(\256) sy
(fWorkingDir, pszDirname, 0777\) ) p
(\271) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T () S
(switch) K
(\(errno\) {) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( EACCES:) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( EPERM:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: You don't have permission to do that\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( EEXIST:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: A directory or file with that name already exists\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( ENAMETOOLONG:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: '%s' is too long for a directory name\\n) str
(", pszDirname\)) p n
(;) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( ENOSPC:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: No diskspace remaining\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T () S 8 T ({) N
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T () S
(char) k
( *pszError = strerror\(errno\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Unknown error creating directory '%s'\\n) str
(", pszDirn) p n
(ame\);) N
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tCause: %s\\n) str
(", pszError\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (}) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T (}) N
() N
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Successfully created directory '%s'\\n) str
(", pszDirname\);) p n
() N
() N
() S 2 T (}) N
() N
() S 2 T () S
(return) K
( 0;) p n
(}) N
() N
(/* Handle removing a directory. */) c n
(HANDLECOM\(rmdir\) {) p n
() S 2 T () S
(/* Reinit getopt. */) c n
() p 2 T (optind = 1;) N
() S 2 T () S
(/* Handle options. */) c n
() p 2 T () S
(while) K
( \(1\) {) p n
() N
() S 2 T () S 4 T () S
(/* The current option & long option. */) c n
() p 2 T () S 4 T () S
(int) k
( opt, optidx;) p n
() N
() S 2 T () S 4 T () S
(/* Our usage message. */) c n
() p 2 T () S 4 T () S
(char) k
( *pszUsage = ") p
(Usage: rmdir [-h] [--help] <directory-name>) str
(";) p n
() N
() S 2 T () S 4 T () S
(static) K
( ) p
(struct) k
( option opts[] = {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Misc. options. */) c n
() p 2 T () S 4 T () S 6 T ({") S
(help) str
(", no_argument, 0, ') p
(h) str
('},) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Terminating option. */) c n
(filecmds.c) (Page 6/13) (Nov 26, 17 12:15) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S 6 T ({0, 0, 0, 0}) N
() S 2 T () S 4 T (};) N
() N
() S 2 T () S 4 T () S
(/* Get an option. */) c n
() p 2 T () S 4 T (opt = getopt_long\(argc, argv, ") S
(h) str
(", opts, &optidx\);) p n
() S 2 T () S 4 T () S
(/* Break if we've processed everything. */) c n
() p 2 T () S 4 T () S
(if) K
(\(opt ) p
(\272) sy
( -1\) ) p
(break) K
(;) p n
() N
() S 2 T () S 4 T () S
(/* Handle options. */) c n
() p 2 T () S 4 T () S
(switch) K
(\(opt\) {) p n
() S 2 T () S 4 T () S
(case) K
( 0:) p n
() S 2 T () S 4 T () S 6 T () S
(/* ) c n
() S 2 T () S 4 T () S 6 T ( * We picked a long option, but they are handled by) N
() S 2 T () S 4 T () S 6 T ( * their short options.) N
() S 2 T () S 4 T () S 6 T ( */) N
() p 2 T () S 4 T () S 6 T () S
(switch) K
(\(optidx\) {) p n
() S 2 T () S 4 T () S 6 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", pszUsage\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(h) str
(':) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", pszUsage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 0;) p n
() S 2 T () S 4 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", pszUsage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() N
() S 2 T () S 4 T (}) N
() S 2 T (}) N
() N
() S 2 T () S
(if) K
(\(argc ) p
(\243) sy
( \(optind\)\) {) p n
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Must provide the directory to remove as an argument\\n) str
("\);) p n
() S 2 T () S 4 T () S
(return) K
( 1;) p n
() S 2 T (}) N
() N
() S 2 T () S
(/* The specified directory. */) c n
() p 2 T () S
(char) k
( *pszDirname;) p n
() N
() S 2 T (pszDirname = argv[optind];) N
() N
() S 2 T () S
(/* Verify that we're trying to delete a directory. */) c n
() p 2 T ({) N
() S 2 T () S 4 T () S
(/* Scratch struct. */) c n
() p 2 T () S 4 T () S
(struct) k
( stat buf;) p n
() N
() S 2 T () S 4 T () S
(/* Stat the thing. */) c n
() p 2 T () S 4 T () S
(if) K
(\(fstatat\(ostate) p
(\256) sy
(fWorkingDir, pszDirname, &buf, 0\) ) p
(\271) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Could not access '%s'\\n) str
(", pszDirname\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T () S
(/* Check that it is a directory. */) c n
() p 2 T () S 4 T () S
(if) K
(\() p
(\330) sy
(S_ISDIR\(buf.st_mode\)\) {) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: '%s' is not a directory\\n) str
(", pszDirname\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T () S
(/* Ensure the directory is empty. */) c n
() p 2 T () S 4 T ({) N
(filecmds.c) (Page 7/13) (Nov 26, 17 12:15) title
border
grestore
(TechOS Sources) rhead
(filecmds.c) (13/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (8-9) 14
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S 6 T () S
(/* FD to directory. */) c n
() p 2 T () S 4 T () S 6 T () S
(int) k
( fDir;) p n
() S 2 T () S 4 T () S 6 T () S
(/* Directory stream. */) c n
() p 2 T () S 4 T () S 6 T (DIR *sDir;) N
() S 2 T () S 4 T () S 6 T () S
(/* Current entry into the stream. */) c n
() p 2 T () S 4 T () S 6 T () S
(struct) k
( dirent *pdEnt;) p n
() S 2 T () S 4 T () S 6 T () S
(/* The number of directory entries read so far. */) c n
() p 2 T () S 4 T () S 6 T () S
(int) k
( count;) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Init count. */) c n
() p 2 T () S 4 T () S 6 T (count = 0;) N
() N
() S 2 T () S 4 T () S 6 T (fDir = openat\(ostate) S
(\256) sy
(fWorkingDir, pszDirname, 0\);) p n
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(fDir ) p
(\272) sy
( -1\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Could not check if '%s' was empty\\n) str
(", pszDirname\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() N
() S 2 T () S 4 T () S 6 T (sDir = \(DIR *\)fdopendir\(fDir\);) N
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(sDir ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Could not check if '%s' was empty\\n) str
(", pszDirname\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() N
() S 2 T () S 4 T () S 6 T (pdEnt = readdir\(sDir\);) N
() S 2 T () S 4 T () S 6 T () S
(while) K
(\(pdEnt ) p
(\271) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (count += 1;) N
() N
() S 2 T () S 4 T () S 6 T () S 8 T (pdEnt = readdir\(sDir\);) N
() S 2 T () S 4 T () S 6 T (}) N
() N
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(count > 2\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Directory '%s' is not empty\\n) str
(", pszDirname\);) p n
() N
() S 2 T () S 4 T () S 6 T () S 8 T (closedir\(sDir\);) N
() N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* fDir is closed by the closedir. */) c n
() p 2 T () S 4 T () S 6 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (closedir\(sDir\);) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* fDir is closed by the closedir. */) c n
() p 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T (}) N
() S 2 T (}) N
() N
() S 2 T () S
(if) K
(\(unlinkat\(ostate) p
(\256) sy
(fWorkingDir, pszDirname, AT_REMOVEDIR\) ) p
(\271) sy
( 0\) {) p n
() S 2 T () S 4 T () S
(/* Error removing directory. */) c n
() p 2 T () S 4 T () S
(switch) K
(\(errno\) {) p n
() S 2 T () S 4 T () S
(case) K
( EACCES:) p n
() S 2 T () S 4 T () S
(case) K
( EPERM:) p n
() S 2 T () S 4 T () S
(case) K
( EFAULT:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: You don't have permission to delete '%s'\\n) str
(", pszDirnam) p n
(e\);) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( EROFS:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Filesystem is read-only. Can't delete directory '%s'\\n) str
(", ps) p n
(zDirname\);) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T ({) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(char) k
( *pszError = strerror\(errno\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Unknown error removing directory '%s'\\n) str
(", pszDirna) p n
(filecmds.c) (Page 8/13) (Nov 26, 17 12:15) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(me\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tCause: %s\\n) str
(", pszError\);) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T () S
(return) K
( 1;) p n
() S 2 T (}) N
() N
() S 2 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Successfully removed directory '%s'\\n) str
(", pszDirname\);) p n
() S 2 T () S
(return) K
( 0;) p n
(}) N
() N
(HANDLECOM\(touch\) {) N
() S 2 T () S
(/* Reinit getopt. */) c n
() p 2 T (optind = 1;) N
() S 2 T () S
(/* Handle options. */) c n
() p 2 T () S
(while) K
( \(1\) {) p n
() N
() S 2 T () S 4 T () S
(/* The current option & long option. */) c n
() p 2 T () S 4 T () S
(int) k
( opt, optidx;) p n
() N
() S 2 T () S 4 T () S
(char) k
( *pszUsage = ") p
(Usage: touch [-h] [--help] <file-name>) str
(";) p n
() S 2 T () S 4 T () S
(static) K
( ) p
(struct) k
( option opts[] = {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Misc. options. */) c n
() p 2 T () S 4 T () S 6 T ({") S
(help) str
(", no_argument, 0, ') p
(h) str
('},) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Terminating option. */) c n
() p 2 T () S 4 T () S 6 T ({0, 0, 0, 0}) N
() S 2 T () S 4 T (};) N
() N
() S 2 T () S 4 T () S
(/* Get an option. */) c n
() p 2 T () S 4 T (opt = getopt_long\(argc, argv, ") S
(h) str
(", opts, &optidx\);) p n
() S 2 T () S 4 T () S
(/* Break if we've processed everything. */) c n
() p 2 T () S 4 T () S
(if) K
(\(opt ) p
(\272) sy
( -1\) ) p
(break) K
(;) p n
() N
() S 2 T () S 4 T () S
(/* Handle options. */) c n
() p 2 T () S 4 T () S
(switch) K
(\(opt\) {) p n
() S 2 T () S 4 T () S
(case) K
( 0:) p n
() S 2 T () S 4 T () S 6 T () S
(/* ) c n
() S 2 T () S 4 T () S 6 T ( * We picked a long option, but they are handled by) N
() S 2 T () S 4 T () S 6 T ( * their short options.) N
() S 2 T () S 4 T () S 6 T ( */) N
() p 2 T () S 4 T () S 6 T () S
(switch) K
(\(optidx\) {) p n
() S 2 T () S 4 T () S 6 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", pszUsage\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(h) str
(':) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", pszUsage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 0;) p n
() S 2 T () S 4 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", pszUsage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() S 2 T (}) N
() N
() S 2 T ({) N
() S 2 T () S 4 T () S
(/* The specified filename. */) c n
(filecmds.c) (Page 9/13) (Nov 26, 17 12:15) title
border
grestore
(TechOS Sources) rhead
(filecmds.c) (14/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (10-11) 15
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S
(char) k
( *pszFilename;) p n
() S 2 T () S 4 T () S
(/* The file being opened. */) c n
() p 2 T () S 4 T () S
(int) k
( dFile;) p n
() N
() S 2 T () S 4 T () S
(if) K
(\(argc ) p
(\243) sy
( \(optind\)\) {) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Must provide the file to create as an argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T (pszFilename = argv[optind];) N
() N
() S 2 T () S 4 T () S
(/* Open the file, give an error if opening fails. */) c n
() p 2 T () S 4 T (dFile = openat\(ostate) S
(\256) sy
(fWorkingDir, pszFilename, O_RDONLY | O_CREAT | O_EXCL) p n
(, 0777\);) N
() S 2 T () S 4 T () S
(if) K
(\(dFile ) p
(\272) sy
( -1\) {) p n
() S 2 T () S 4 T () S 6 T () S
(switch) K
(\(errno\) {) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( EACCES:) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( EPERM:) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( EFAULT:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: You don't have permission to do that\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( EDQUOT:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: You have exhausted your diskspace quota\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( EINTR:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Attempt to create file '%s' was interrupted\\n) str
(", pszFile) p n
(name\);) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( EMFILE:) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( ENFILE:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Too many files open to attempt to create file '%s'\\n) str
(", ps) p n
(zFilename\);) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( ENAMETOOLONG:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: '%s' is too long for a file name\\n) str
(", pszFilename\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( ENOSPC:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: The disk is full\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( EROFS:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Filesystem is read-only. Can't create file '%s'\\n) str
(", pszF) p n
(ilename\);) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( EEXIST:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: File '%s' already exists\\n) str
(", pszFilename\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p 16 T () N
() S 2 T () S 4 T () S 6 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T () S 8 T ({) N
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T () S
(char) k
( *pszError = strerror\(errno\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Unknown error creating file '%s'\\n) str
(", pszFilename) p n
(\);) N
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tCause: %s\\n) str
(", pszError\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (}) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T (}) N
() N
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T () S
(/* Don't leak the file handle. */) c n
() p 2 T () S 4 T (close\(dFile\);) N
() N
(filecmds.c) (Page 10/13) (Nov 26, 17 12:15) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Successfully created file '%s'\\n) str
(", pszFilename\);) p n
() S 2 T () S 4 T () S
(return) K
( 0;) p n
() S 2 T (}) N
(}) N
() N
(HANDLECOM\(rm\) {) N
() S 2 T () S
(/* Reinit getopt. */) c n
() p 2 T (optind = 1;) N
() S 2 T () S
(/* Handle options. */) c n
() p 2 T () S
(while) K
( \(1\) {) p n
() N
() S 2 T () S 4 T () S
(/* The current option & long option. */) c n
() p 2 T () S 4 T () S
(int) k
( opt, optidx;) p n
() N
() S 2 T () S 4 T () S
(/* Our usage message. */) c n
() p 2 T () S 4 T () S
(char) k
( *pszUsage = ") p
(Usage: rm [-h] [--help] <file-name>) str
(";) p n
() N
() S 2 T () S 4 T () S
(static) K
( ) p
(struct) k
( option opts[] = {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Misc. options. */) c n
() p 2 T () S 4 T () S 6 T ({") S
(help) str
(", no_argument, 0, ') p
(h) str
('},) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Terminating option. */) c n
() p 2 T () S 4 T () S 6 T ({0, 0, 0, 0}) N
() S 2 T () S 4 T (};) N
() N
() S 2 T () S 4 T () S
(/* Get an option. */) c n
() p 2 T () S 4 T (opt = getopt_long\(argc, argv, ") S
(h) str
(", opts, &optidx\);) p n
() S 2 T () S 4 T () S
(/* Break if we've processed everything. */) c n
() p 2 T () S 4 T () S
(if) K
(\(opt ) p
(\272) sy
( -1\) ) p
(break) K
(;) p n
() N
() S 2 T () S 4 T () S
(/* Handle options. */) c n
() p 2 T () S 4 T () S
(switch) K
(\(opt\) {) p n
() S 2 T () S 4 T () S
(case) K
( 0:) p n
() S 2 T () S 4 T () S 6 T () S
(/* ) c n
() S 2 T () S 4 T () S 6 T ( * We picked a long option, but they are handled by) N
() S 2 T () S 4 T () S 6 T ( * their short options.) N
() S 2 T () S 4 T () S 6 T ( */) N
() p 2 T () S 4 T () S 6 T () S
(switch) K
(\(optidx\) {) p n
() S 2 T () S 4 T () S 6 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", pszUsage\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(h) str
(':) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", pszUsage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", pszUsage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() N
() S 2 T () S 4 T (}) N
() S 2 T (}) N
() N
() S 2 T ({) N
() S 2 T () S 4 T () S
(/* The specified filename. */) c n
() p 2 T () S 4 T () S
(char) k
( *pszFilename;) p n
() N
() S 2 T () S 4 T () S
(if) K
(\(argc ) p
(\243) sy
( \(optind\)\) {) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Must provide the file to delete as an argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
(filecmds.c) (Page 11/13) (Nov 26, 17 12:15) title
border
grestore
(TechOS Sources) rhead
(filecmds.c) (15/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (12-13) 16
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T (pszFilename = argv[optind];) N
() N
() S 2 T () S 4 T () S
(/* Ensure the file exists. */) c n
() p 2 T () S 4 T ({) N
() S 2 T () S 4 T () S 6 T () S
(/* Scratch struct. */) c n
() p 2 T () S 4 T () S 6 T () S
(struct) k
( stat buf;) p n
() N
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(fstatat\(ostate) p
(\256) sy
(fWorkingDir, pszFilename, &buf, 0\) ) p
(\271) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Could not check if file '%s' exists\\n) str
(", pszFilename\)) p n
(;) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() N
() S 2 T () S 4 T () S 6 T () S
(if) K
(\() p
(\330) sy
(S_ISREG\(buf.st_mode\)\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: '%s' is not a regular file\\n) str
(", pszFilename\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T ({) N
() S 2 T () S 4 T () S 6 T () S
(char) k
( *pszLine;) p n
() N
() S 2 T () S 4 T () S 6 T (size_t llen, lread;) N
() N
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Are you sure you want to delete this file? \(y/n\) ) str
("\);) p n
() N
() S 2 T () S 4 T () S 6 T (llen = getline\(&pszLine, &llen, ostate) S
(\256) sy
(strem\);) p n
() N
() S 2 T () S 4 T () S 6 T () S
(switch) K
(\(rpmatch\(pszLine\)\) {) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( 0:) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* Don't delete the file. */) c n
() p 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 0;) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( 1:) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* Delete the file. */) c n
() p 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( -1:) p n
() S 2 T () S 4 T () S 6 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* Incorrect response. */) c n
() p 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Unrecognized response\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T () S
(if) K
(\(unlinkat\(ostate) p
(\256) sy
(fWorkingDir, pszFilename, 0\) ) p
(\272) sy
( -1\) {) p n
() S 2 T () S 4 T () S 6 T () S
(switch) K
(\(errno\) {) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( EACCES:) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( EFAULT:) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( EPERM:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: You do not have permission to delete '%s'\\n) str
(", pszFile) p n
(name\);) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( EROFS:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Filesystem is read-only, can't delete file '%s'\\n) str
(", pszF) p n
(ilename\);) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T () S 8 T ({) N
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T () S
(char) k
( *pszError = strerror\(errno\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Unknown error attempting to delete file '%s'\\n) str
(", psz) p n
(Filename\);) N
(filecmds.c) (Page 12/13) (Nov 26, 17 12:15) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S 6 T () S 8 T () S 10 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tCause: %s\\n) str
(", pszError\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (}) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T (}) N
() N
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Successfully deleted file '%s'\\n) str
(", pszFilename\);) p n
() S 2 T () S 4 T () S
(return) K
( 0;) p n
() S 2 T (}) N
(}) N
(filecmds.c) (Page 13/13) (Nov 26, 17 12:15) title
border
grestore
(TechOS Sources) rhead
(filecmds.c) (16/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 17
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#include) K
( <assert.h>) p n
(#include) K
( <stdlib.h>) p n
(#include) K
( <string.h>) p n
() N
(#include) K
( ") p
(argparser.h) str
(") p n
() N
(/* Parse a string from a set of arguments. */) c n
(static) K
( ) p
(char) k
( *parsestr\() p
(char) k
( *pszLead, ) p
(char) k
( delim, ) p
(char) k
( **pSaved\) {) p n
() S 2 T () S
(/* The rest of the string from the arguments. */) c n
() p 2 T () S
(char) k
( *pszRest;) p n
() S 2 T () S
(/* The string we're returning. */) c n
() p 2 T () S
(char) k
( *pszStrang;) p n
() N
() S 2 T () S
(/* The rest of the strings contents. */) c n
() p 2 T (pszRest = \() S
(char) k
( *\)strtok_r\() p
(NULL) K
(, &delim, pSaved\);) p n
() N
() S 2 T () S
(/* Print the string, and bail if that fails. */) c n
() p 2 T () S
(if) K
(\(asprintf\(&pszStrang, ") p
(%s %s) str
(", pszLead, pszRest\) ) p
(\272) sy
( -1\) assert\(0\);) p n
() N
() S 2 T () S
(return) K
( pszStrang;) p n
(}) N
() N
(/* Parse a set of CLI arguments. */) c n
(struct) k
( cliargs parseargs\() p
(char) k
( *pszStrang\) {) p n
() S 2 T () S
(/* The return value. */) c n
() p 2 T () S
(struct) k
( cliargs args;) p n
() N
() S 2 T () S
(/* The pointer for parsing. */) c n
() p 2 T () S
(char) k
( *pSave;) p n
() S 2 T () S
(/* The currently parsed token. */) c n
() p 2 T () S
(char) k
( *pszToken;) p n
() S 2 T () S
(/* Length of current token. */) c n
() p 2 T () S
(int) k
( lToken;) p n
() N
() S 2 T () S
(/* Initialize argument count. */) c n
() p 2 T (args.argc = 0;) N
() S 2 T () S
(/* Allocate space for the array of arguments. */) c n
() p 2 T (args.argv = calloc\(MAX_CLI_ARGS, ) S
(sizeof) K
(\() p
(char) k
( *\)\);) p n
() S 2 T () S
(/* Fail if we couldn't allocate memory. */) c n
() p 2 T (assert\(args.argv ) S
(\271) sy
( ) p
(NULL) K
(\);) p n
() N
() S 2 T () S
(/* Get the initial tokens. */) c n
() p 2 T (pszToken = \() S
(char) k
( *\)strtok_r\(pszStrang, ") p
( ) str
(", &pSave\);) p n
() N
() S 2 T () S
(while) K
(\(pszToken ) p
(\271) sy
( ) p
(NULL) K
( ) p
(\331) sy
( args.argc < MAX_CLI_ARGS\) {) p n
() S 2 T () S 4 T (lToken = strlen\(pszToken\);) N
() N
() S 2 T () S 4 T () S
(/* The possible quote. */) c n
() p 2 T () S 4 T () S
(char) k
( posQuote;) p n
() S 2 T () S 4 T () S
(/* The slot the arg goes into. */) c n
() p 2 T () S 4 T () S
(char) k
( **ppszArg;) p n
() N
() S 2 T () S 4 T (posQuote = pszToken[0];) N
() S 2 T () S 4 T (ppszArg  = &\(args.argv[args.argc]\);) N
() N
() S 2 T () S 4 T () S
(if) K
(\(posQuote ) p
(\272) sy
( ') p
(\\') str
(' ) p
(\332) sy
( posQuote ) p
(\272) sy
( ') p
(\\") str
('\) {) p n
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(pszToken[lToken - 1] ) p
(\272) sy
( posQuote\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* Length of single-string. */) c n
() p 2 T () S 4 T () S 6 T () S 8 T () S
(int) k
( stranglen;) p n
() N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* Single word string, no parsing needed */) c n
() p 2 T () S 4 T () S 6 T () S 8 T (*ppszArg = \() S
(char) k
( *\)strdup\(pszToken + 1\);) p n
(argparser.c) (Page 1/2) (Oct 25, 17 14:59) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S 6 T () S 8 T (stranglen = strlen\(*ppszArg\);) N
() N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* Pull off the ending quote. */) c n
() p 2 T () S 4 T () S 6 T () S 8 T (ppszArg[0][stranglen - 1] = ') S
(\\0) str
(';) p n
() S 2 T () S 4 T () S 6 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* Parse a string. */) c n
() p 2 T () S 4 T () S 6 T () S 8 T (*ppszArg = parsestr\(pszToken + 1, posQuote, &pSave\);) N
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T () S
(/* No string, just add the argument. */) c n
() p 2 T () S 4 T () S 6 T (*ppszArg = \() S
(char) k
( *\)strdup\(pszToken\);) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T () S
(/* Get the next token. */) c n
() p 2 T () S 4 T (pszToken   = \() S
(char) k
( *\)strtok_r\() p
(NULL) K
(, ") p
( ) str
(", &pSave\);) p n
() S 2 T () S 4 T (args.argc += 1;) N
() S 2 T (}) N
() N
() S 2 T () S
(return) K
( args;) p n
(}) N
(argparser.c) (Page 2/2) (Oct 25, 17 14:59) title
border
grestore
(TechOS Sources) rhead
(libs/argparser.c) (17/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1,1) 18
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#include) K
( <stdlib.h>) p n
(#include) K
( <stdio.h>) p n
(#include) K
( <string.h>) p n
() N
(#include) K
( ") p
(argparser.h) str
(") p n
() N
(int) k
( main\(\) {) p n
() S 2 T () S
(char) k
(   *line;) p n
() S 2 T (size_t  llen, lread;) N
() N
() S 2 T (printf\(") S
(Enter a line to parse: ) str
("\);) p n
() S 2 T () S
(while) K
(\(\(lread = getline\(&line, &llen, stdin\)\) > 0\) {) p n
() S 2 T () S 4 T () S
(struct) k
( cliargs args;) p n
() N
() S 2 T () S 4 T () S
(if) K
(\(feof\(stdin\)\) ) p
(break) K
(;) p n
() N
() S 2 T () S 4 T (args = parseargs\(line\);) N
() N
() S 2 T () S 4 T (printf\(") S
(Got %d args\\n) str
(", args.argc\);) p n
() N
() S 2 T () S 4 T () S
(int) k
( i;) p n
() S 2 T () S 4 T () S
(for) K
(\(i = 0; i < args.argc; i++\) {) p n
() S 2 T () S 4 T () S 6 T (printf\(") S
(\\tArg %d: '%s'\\n) str
(", i, args.argv[i]\);) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T (printf\(") S
(Enter a line to parse: ) str
("\);) p n
() S 2 T (}) N
() N
() S 2 T () S
(if) K
(\(line ) p
(\271) sy
( ) p
(NULL) K
(\) free\(line\);) p n
() N
() S 2 T () S
(return) K
( 0;) p n
(}) N
(argparser_test.c) (Page 1/1) (Sep 19, 17 11:37) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#include) K
( <assert.h>) p n
(#include) K
( <stdlib.h>) p n
(#include) K
( <string.h>) p n
() N
(/* Debugging. */) c n
(#include) K
( <stdio.h>) p n
() N
(#include) K
( ") p
(intern.h) str
(") p n
() N
(/*) c n
( * Implementation of interntables.) N
( */) N
() p n
(/* ) c n
( * The number of hash buckets we use.) N
( *) N
( * This should be a prime number.) N
( */) N
(#define) K
( BUCKET_COUNT 13) p n
() N
(/* Convert a string to a hashcode. */) c n
(static) K
( ) p
(unsigned) k
( ) p
(long) k
( hashstring\() p
(const) K
( ) p
(char) k
( *val\) {) p n
() S 2 T () S
(/* This is the DJB2K33 algorithm. It generally works quite well. */) c n
() p 2 T () S
(unsigned) k
( ) p
(long) k
( hash = 5381;) p n
() S 2 T () S
(int) k
( c;) p n
() N
() S 2 T () S
(/* Get the current string character. */) c n
() p 2 T (c    = *val;) N
() S 2 T (val += 1;) N
() N
() S 2 T () S
(/* While we're not at the end of the string. */) c n
() p 2 T () S
(while) K
(\(c\) {) p n
() S 2 T () S 4 T () S
(/* hash * 33 + c */) c n
() p 2 T () S 4 T (hash = \(\(hash << 5\) + hash\) + c; ) N
() N
() S 2 T () S 4 T () S
(/* Advance to the next character. */) c n
() p 2 T () S 4 T (c    = *val;) N
() S 2 T () S 4 T (val += 1;) N
() S 2 T (}) N
() N
() S 2 T () S
(return) K
( hash;) p n
(}) N
() N
(/* Convert an integer to a hashcode. */) c n
(static) K
( ) p
(unsigned) k
( ) p
(long) k
( hashkey\() p
(const) K
( ) p
(int) k
( val\) {) p n
() S 2 T () S
(return) K
( val;) p n
(}) N
() N
(/* A bucket in the intern table */) c n
(struct) k
( bucket {) p n
() S 2 T () S
(/* The string in this bucket. */) c n
() p 2 T () S
(char) k
(      *val;) p n
() S 2 T () S
(/* The intern key for this string. */) c n
() p 2 T (internkey  key;) N
() N
() S 2 T () S
(/*) c n
() S 2 T ( * Next/prev form a circular list of buckets.) N
() S 2 T ( */) N
() p n
() S 2 T () S
(/* The next bucket in the chain. */) c n
() p 2 T () S
(struct) k
( bucket *next;) p n
() S 2 T () S
(/* The previous bucket in the chain. */) c n
(intern.c) (Page 1/8) (Dec 06, 17 12:39) title
border
grestore
(TechOS Sources) rhead
(libs/argparser_test.c, libs/intern.c) (18/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2-3) 19
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S
(struct) k
( bucket *prev;) p n
(};) N
() N
(/* Definition of an intern table. */) c n
(struct) k
( interntab {) p n
() S 2 T () S
(/* The next intern key to use. */) c n
() p 2 T (internkey nextkey;) N
() S 2 T () N
() S 2 T () S
(/* The table of strings */) c n
() p 2 T () S
(struct) k
( bucket *strings[BUCKET_COUNT];) p n
() S 2 T () S
(/* The table of keys */) c n
() p 2 T () S
(struct) k
( bucket *keys[BUCKET_COUNT];) p n
(};) N
() N
(/* Allocate/initialize an intern table. */) c n
(struct) k
( interntab *makeinterntab\(\) {) p n
() S 2 T () S
(/* The table. */) c n
() p 2 T () S
(struct) k
( interntab *tab;) p n
() S 2 T () S
(/* The counter for entry initialization */) c n
() p 2 T () S
(int) k
( i;) p n
() N
() S 2 T () S
(/* Create a new intern table, and set its key value. */) c n
() p 2 T (tab = malloc\() S
(sizeof) K
(\() p
(struct) k
( interntab\)\);) p n
() S 2 T (assert\(tab ) S
(\271) sy
( ) p
(NULL) K
(\);) p n
() S 2 T (tab) S
(\256) sy
(nextkey = 1;) p n
() N
() S 2 T () S
(/* Initialize the tables. */) c n
() p 2 T () S
(for) K
(\(i = 0; i < BUCKET_COUNT; i++\) {) p n
() S 2 T () S 4 T () S
(/* Initialize string table. */) c n
() p 2 T () S 4 T (tab) S
(\256) sy
(strings[i]       = malloc\() p
(sizeof) K
(\() p
(struct) k
( bucket\)\);) p n
() S 2 T () S 4 T (tab) S
(\256) sy
(strings[i]) p
(\256) sy
(val  = ) p
(NULL) K
(;) p n
() S 2 T () S 4 T (tab) S
(\256) sy
(strings[i]) p
(\256) sy
(key  = SIINVALID;) p n
() S 2 T () S 4 T (tab) S
(\256) sy
(strings[i]) p
(\256) sy
(next = ) p
(NULL) K
(;) p n
() S 2 T () S 4 T (tab) S
(\256) sy
(strings[i]) p
(\256) sy
(prev = ) p
(NULL) K
(;) p n
() N
() S 2 T () S 4 T () S
(/* Initialize key table. */) c n
() p 2 T () S 4 T (tab) S
(\256) sy
(keys[i]       = malloc\() p
(sizeof) K
(\() p
(struct) k
( bucket\)\);) p n
() S 2 T () S 4 T (tab) S
(\256) sy
(keys[i]) p
(\256) sy
(val  = ) p
(NULL) K
(;) p n
() S 2 T () S 4 T (tab) S
(\256) sy
(keys[i]) p
(\256) sy
(key  = SIINVALID;) p n
() S 2 T () S 4 T (tab) S
(\256) sy
(keys[i]) p
(\256) sy
(next = ) p
(NULL) K
(;) p n
() S 2 T () S 4 T (tab) S
(\256) sy
(keys[i]) p
(\256) sy
(prev = ) p
(NULL) K
(;) p n
() S 2 T (}) N
() N
() S 2 T () S
(return) K
( tab;) p n
(}) N
() N
(/* Destroy a bucket chain. */) c n
(static) K
( ) p
(void) k
( killbucket\() p
(struct) k
( bucket *buck, ) p
(int) k
( freestrings\) {) p n
() S 2 T () S
(/* Terminate the chain. */) c n
() p 2 T () S
(/*) c n
() S 2 T ( * NOTE:) N
() S 2 T ( * ) S 6 T (buck->prev is only null in the case where nothing has) N
() S 2 T ( * ) S 6 T (been inserted into this bucket before. ) N
() S 2 T ( */) N
() p 2 T () S
(if) K
(\(buck) p
(\256) sy
(prev ) p
(\271) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T (buck) S
(\256) sy
(prev) p
(\256) sy
(next = ) p
(NULL) K
(;) p n
() S 2 T (}) N
() N
() S 2 T () S
(while) K
(\(buck ) p
(\271) sy
( ) p
(NULL) K
( ) p
(\331) sy
( buck) p
(\256) sy
(next ) p
(\271) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S
(/* Next bucket. */) c n
() p 2 T () S 4 T () S
(struct) k
( bucket *tmp;) p n
() N
(intern.c) (Page 2/8) (Dec 06, 17 12:39) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S
(/* Advance the queue. */) c n
() p 2 T () S 4 T (tmp  = buck;) N
() S 2 T () S 4 T (buck = buck) S
(\256) sy
(next;) p n
() N
() S 2 T () S 4 T () S
(/* Free the string we own. */) c n
() p 2 T () S 4 T () S
(if) K
(\(tmp) p
(\256) sy
(val ) p
(\271) sy
( ) p
(NULL) K
( ) p
(\331) sy
( freestrings ) p
(\272) sy
( 1\) free\(tmp) p
(\256) sy
(val\);) p n
() S 2 T () S 4 T () S
(/* Free the bucket. */) c n
() p 2 T () S 4 T (free\(tmp\);) N
() S 2 T (}) N
(}) N
() N
(void) k
( killinterntab\() p
(struct) k
( interntab *table\) {) p n
() S 2 T () S
(/* Loop index. */) c n
() p 2 T () S
(int) k
( i;) p n
() N
() S 2 T () S
(/* Free strings table. */) c n
() p 2 T () S
(for) K
(\(i = 0; i < BUCKET_COUNT; i++\) {) p n
() S 2 T () S 4 T (killbucket\(table) S
(\256) sy
(strings[i], 0\);) p n
() S 2 T (}) N
() S 2 T () S
(/* Free keys table. */) c n
() p 2 T () S
(for) K
(\(i = 0; i < BUCKET_COUNT; i++\) {) p n
() S 2 T () S 4 T (killbucket\(table) S
(\256) sy
(keys[i], 1\);) p n
() S 2 T (}) N
() N
() S 2 T (free\(table\);) N
(}) N
() N
(/* Add a bucket to a bucket chain. */) c n
(static) K
( ) p
(void) k
( addbucket\() p
(struct) k
( bucket *bucket\) {) p n
() S 2 T () S
(/* Allocate a new bucket. */) c n
() p 2 T () S
(struct) k
( bucket *nbucket;) p n
() S 2 T (nbucket = malloc\() S
(sizeof) K
(\() p
(struct) k
( bucket\)\);) p n
() S 2 T (assert\(nbucket ) S
(\271) sy
( ) p
(NULL) K
(\);) p n
() N
() S 2 T () S
(if) K
(\(bucket) p
(\256) sy
(next ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S
(/* Solo bucket. */) c n
() p 2 T () S 4 T (bucket) S
(\256) sy
(next  = nbucket;) p n
() S 2 T () S 4 T (bucket) S
(\256) sy
(prev  = nbucket;) p n
() N
() S 2 T () S 4 T (nbucket) S
(\256) sy
(next = bucket;) p n
() S 2 T () S 4 T (nbucket) S
(\256) sy
(prev = bucket;) p n
() S 2 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S
(/* Chain bucket. */) c n
() p n
() S 2 T () S 4 T () S
(/* The next bucket in the list. */) c n
() p 2 T () S 4 T () S
(struct) k
( bucket *nextbucket;) p n
() S 2 T () S 4 T (nextbucket = bucket) S
(\256) sy
(next;) p n
() N
() S 2 T () S 4 T () S
(/* Insert our bucket into the chain. */) c n
() p 2 T () S 4 T (bucket) S
(\256) sy
(next     = nbucket;) p n
() S 2 T () S 4 T (nextbucket) S
(\256) sy
(prev = nbucket;) p n
() N
() S 2 T () S 4 T (nbucket) S
(\256) sy
(next = nextbucket;) p n
() S 2 T () S 4 T (nbucket) S
(\256) sy
(prev = bucket;) p n
() S 2 T (}) N
(}) N
() N
(/* Intern a string. */) c n
(internkey internstring\() p
(struct) k
( interntab *table, ) p
(const) K
( ) p
(char) k
( *string\) {) p n
() S 2 T () S
(/* The intern key we use. */) c n
() p 2 T (internkey key;) N
() S 2 T () S
(/* The key/string hashes. */) c n
(intern.c) (Page 3/8) (Dec 06, 17 12:39) title
border
grestore
(TechOS Sources) rhead
(libs/intern.c) (19/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (4-5) 20
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S
(int) k
( khash, shash;) p n
() S 2 T () S
(/* The string/key buckets. */) c n
() p 2 T () S
(struct) k
( bucket *sbucket, *kbucket;) p n
() N
() S 2 T () S
(/* Don't duplicate an already interned string. */) c n
() p 2 T (key = lookupstring\(table, string\);) N
() S 2 T () S
(if) K
(\(key ) p
(\271) sy
( SIINVALID\) ) p
(return) K
( key;) p n
() N
() S 2 T () S
(/* Get the next valid intern key. */) c n
() p 2 T (key = table) S
(\256) sy
(nextkey;) p n
() S 2 T (table) S
(\256) sy
(nextkey += 1;) p n
() S 2 T () S
(/* Fail if we ran out of space for strings. */) c n
() p 2 T () S
(if) K
(\(key < 0\) ) p
(return) K
( SITABFULL;) p n
() S 2 T () S
(/* Make sure we never make the invalid key valid. */) c n
() p 2 T (assert\(key ) S
(\271) sy
( SIINVALID\);) p n
() N
() S 2 T () S
(/* Create a copy of the string we own. */) c n
() p 2 T () S
(char) k
( *strang = \() p
(char) k
( *\)strdup\(string\);) p n
() N
() S 2 T () S
(/* Get both hashes. */) c n
() p 2 T (shash = hashstring\(strang\) % BUCKET_COUNT;) N
() S 2 T (khash = hashkey\(key\)       % BUCKET_COUNT;) N
() N
() S 2 T () S
(/* Get the buckets for each hash. */) c n
() p 2 T (sbucket = table) S
(\256) sy
(strings[shash];) p n
() S 2 T (kbucket = table) S
(\256) sy
(keys[khash];) p n
() N
() S 2 T () S
(if) K
(\(sbucket) p
(\256) sy
(key ) p
(\271) sy
( SIINVALID\) {) p n
() S 2 T () S 4 T () S
(/*) c n
() S 2 T () S 4 T ( * Non-empty bucket. ) N
() S 2 T () S 4 T ( *) N
() S 2 T () S 4 T ( * Insert into a new one.) N
() S 2 T () S 4 T ( */) N
() p 2 T () S 4 T (sbucket = sbucket) S
(\256) sy
(prev;) p n
() S 2 T (}) N
() S 2 T () S
(if) K
(\(kbucket) p
(\256) sy
(key ) p
(\271) sy
( SIINVALID\) {) p n
() S 2 T () S 4 T () S
(/*) c n
() S 2 T () S 4 T ( * Non-empty bucket. ) N
() S 2 T () S 4 T ( *) N
() S 2 T () S 4 T ( * Insert into a new one.) N
() S 2 T () S 4 T ( */) N
() p 2 T () S 4 T (kbucket = kbucket) S
(\256) sy
(prev;) p n
() S 2 T (}) N
() N
() S 2 T () S
(/* Insert into the right bucket in both tables. */) c n
() p 2 T (sbucket) S
(\256) sy
(val = strang;) p n
() S 2 T (kbucket) S
(\256) sy
(val = strang;) p n
() N
() S 2 T (sbucket) S
(\256) sy
(key = key;) p n
() S 2 T (kbucket) S
(\256) sy
(key = key;) p n
() N
() S 2 T () S
(/* Add a new empty bucket to both tables. */) c n
() p 2 T (addbucket\(sbucket\);) N
() S 2 T (addbucket\(kbucket\);) N
() N
() S 2 T () S
(return) K
( key;) p n
(}) N
() N
(/* Lookup a interned key for a string. */) c n
(internkey lookupstring\() p
(struct) k
( interntab *table, ) p
(const) K
( ) p
(char) k
( *string\) {) p n
() S 2 T () S
(/* The string hash. */) c n
() p 2 T () S
(int) k
( shash;) p n
(intern.c) (Page 4/8) (Dec 06, 17 12:39) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S
(/* The string bucket. */) c n
() p 2 T () S
(struct) k
( bucket *sbucket;) p n
() S 2 T () S
(/* The first key in a bucket. */) c n
() p 2 T () S
(int) k
( fkey;) p n
() N
() S 2 T () S
(/* Get the bucket for this string. */) c n
() p 2 T (shash   = hashstring\(string\) % BUCKET_COUNT;) N
() S 2 T (sbucket = table) S
(\256) sy
(strings[shash];) p n
() S 2 T (fkey    = sbucket) S
(\256) sy
(key;) p n
() N
() S 2 T () S
(/* Bail out early if the bucket is empty. */) c n
() p 2 T () S
(if) K
(\(sbucket) p
(\256) sy
(key ) p
(\272) sy
( SIINVALID\) ) p
(return) K
( SIINVALID;) p n
() N
() S 2 T () S
(do) K
( {) p n
() S 2 T () S 4 T () S
(/* Only check buckets with valid values. */) c n
() p 2 T () S 4 T () S
(if) K
(\(sbucket) p
(\256) sy
(val ) p
(\271) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Check if this is the right bucket. */) c n
() p 2 T () S 4 T () S 6 T () S
(if) K
(\(strcmp\(string, sbucket) p
(\256) sy
(val\) ) p
(\272) sy
( 0\) ) p
(return) K
( sbucket) p
(\256) sy
(key;) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T () S
(/* Move to next bucket. */) c n
() p 2 T () S 4 T (sbucket = sbucket) S
(\256) sy
(next;) p n
() N
() S 2 T () S 4 T () S
(/* Bail out if we've looped or hit an empty bucket. */) c n
() p 2 T (} ) S
(while) K
(\(sbucket) p
(\256) sy
(key ) p
(\271) sy
( fkey ) p
(\331) sy
( sbucket) p
(\256) sy
(key ) p
(\271) sy
( SIINVALID\);) p n
() N
() S 2 T () S
(/* We didn't find anything. */) c n
() p 2 T () S
(return) K
( SIINVALID;) p n
(}) N
() N
(/* Lookup the string for an interned key. */) c n
(const) K
( ) p
(char) k
( *lookupkey\() p
(struct) k
( interntab *table, ) p
(const) K
( internkey key\) {) p n
() S 2 T () S
(/* The key hash. */) c n
() p 2 T () S
(int) k
( khash;) p n
() S 2 T () S
(/* The key bucket. */) c n
() p 2 T () S
(struct) k
( bucket *kbucket;) p n
() S 2 T () S
(/* The first key in a bucket. */) c n
() p 2 T () S
(int) k
( fkey;) p n
() N
() S 2 T () S
(/* This key can't possibly be in the table. */) c n
() p 2 T () S
(if) K
(\(table) p
(\256) sy
(nextkey < key\) ) p
(return) K
( ) p
(NULL) K
(;) p n
() N
() S 2 T () S
(/* Get the bucket for this key. */) c n
() p 2 T (khash   = hashkey\(key\) % BUCKET_COUNT;) N
() S 2 T (kbucket = table) S
(\256) sy
(keys[khash];) p n
() S 2 T (fkey    = kbucket) S
(\256) sy
(key;) p n
() N
() S 2 T () S
(/* Bail out early if the bucket is empty. */) c n
() p 2 T () S
(if) K
(\(fkey ) p
(\272) sy
( SIINVALID\) ) p
(return) K
( ) p
(NULL) K
(;) p n
() N
() S 2 T () S
(do) K
( {) p n
() S 2 T () S 4 T () S
(/* Check if this is the right bucket. */) c n
() p 2 T () S 4 T () S
(if) K
(\(key ) p
(\272) sy
( kbucket) p
(\256) sy
(key\) ) p
(return) K
( kbucket) p
(\256) sy
(val;) p n
() N
() S 2 T () S 4 T () S
(/* Move to next bucket. */) c n
() p 2 T () S 4 T (kbucket = kbucket) S
(\256) sy
(next;) p n
() N
() S 2 T () S 4 T () S
(/* Bail out if we've looped or hit an empty bucket. */) c n
() p 2 T (} ) S
(while) K
(\(kbucket) p
(\256) sy
(key ) p
(\271) sy
( fkey ) p
(\331) sy
( kbucket) p
(\256) sy
(key ) p
(\271) sy
( SIINVALID\);) p n
() N
() S 2 T () S
(/*) c n
() S 2 T ( * We didn't find anything. */) N
(intern.c) (Page 5/8) (Dec 06, 17 12:39) title
border
grestore
(TechOS Sources) rhead
(libs/intern.c) (20/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (6-7) 21
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S
(return) K
( ) p
(NULL) K
(;) p n
(}) N
() N
(/* Execute an action for every key in a table. */) c n
(void) k
( foreachintern\() p
(struct) k
( interntab *table, tableitr itr, ) p
(void) k
( *pvData\) {) p n
() S 2 T () S
(int) k
( i;) p n
() S 2 T () S
(/* Iterate over every bucket. */) c n
() p 2 T () S
(for) K
(\(i = 0; i < BUCKET_COUNT; i++\) {) p n
() S 2 T () S 4 T () S
(struct) k
( bucket *buck;) p n
() S 2 T () S 4 T (internkey      kFirst;) N
() S 2 T () S 4 T () N
() S 2 T () S 4 T () S
(/* Get the first bucket, and its key. */) c n
() p 2 T () S 4 T (buck = table) S
(\256) sy
(keys[i];) p n
() S 2 T () S 4 T (kFirst = buck) S
(\256) sy
(key;) p n
() S 2 T () S 4 T () N
() S 2 T () S 4 T () S
(/* Ignore this bucket if its empty. */) c n
() p 2 T () S 4 T () S
(if) K
(\(kFirst ) p
(\272) sy
( SIINVALID\) ) p
(continue) K
(;) p n
() N
() S 2 T () S 4 T () S
(do) K
( {) p n
() S 2 T () S 4 T () S 6 T (itr\(buck) S
(\256) sy
(val, buck) p
(\256) sy
(key, pvData\);) p n
() S 2 T () S 4 T () S 6 T () S
(/* Bail out if we've looped or hit an empty bucket. */) c n
() p 2 T () S 4 T (} ) S
(while) K
(\(buck) p
(\256) sy
(key ) p
(\271) sy
( kFirst ) p
(\331) sy
( buck) p
(\256) sy
(key ) p
(\271) sy
( SIINVALID\);) p n
() S 2 T (}) N
(}) N
() N
(/*) c n
( * Implementation of internlists) N
( */) N
(struct) k
( internlist {) p n
() S 2 T () S
(/* The dynamic array for storing data. */) c n
() p 2 T () S
(void) k
( **paData;) p n
() N
() S 2 T () S
(/* Amount available/used in the array. */) c n
() p 2 T () S
(int) k
( dataspace;) p n
() S 2 T () S
(int) k
( datausage;) p n
() N
() S 2 T () S
(/* Mapping from string keys to array indexes. */) c n
() p 2 T () S
(struct) k
( interntab *ptKeys;) p n
() N
() S 2 T () S
(/* Destructor function for data. */) c n
() p 2 T () S
(void) k
( \(*pfDestroy\)\() p
(void) k
( *\);) p n
(};) N
() N
(/*) c n
( * Create an intern list.) N
( *) N
( * Takes the initial capacity for the intern list, and the function to use to) N
( * destroy items in the intern list.) N
( */) N
(struct) k
( internlist *makeinternlist\() p
(int) k
( initcap, ) p
(void) k
( \(*pfDestroy\)\() p
(void) k
( *\)\) {) p n
() S 2 T () S
(/* Allocate the list, and fail if allocation fails. */) c n
() p 2 T () S
(struct) k
( internlist *plList = malloc\() p
(sizeof) K
(\() p
(struct) k
( internlist\)\);) p n
() S 2 T (assert\(plList ) S
(\271) sy
( ) p
(NULL) K
(\);) p n
() N
() S 2 T () S
(/* Create the key mapping. */) c n
() p 2 T (plList) S
(\256) sy
(ptKeys = makeinterntab\(\);) p n
() S 2 T () S
(/* Remember the destructor. */) c n
() p 2 T (plList) S
(\256) sy
(pfDestroy = pfDestroy;) p n
() N
() S 2 T () S
(/* Allocate space for the data. */) c n
() p 2 T (plList) S
(\256) sy
(paData = calloc\(initcap, ) p
(sizeof) K
(\() p
(void) k
( *\)\);) p n
() S 2 T (assert\(plList) S
(\256) sy
(paData ) p
(\271) sy
( ) p
(NULL) K
(\);) p n
(intern.c) (Page 6/8) (Dec 06, 17 12:39) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S
(/* Initialize capacity tracking. */) c n
() p 2 T (plList) S
(\256) sy
(dataspace = initcap;) p n
() S 2 T (plList) S
(\256) sy
(datausage = 0;) p n
() N
() S 2 T () S
(return) K
( plList;) p n
(}) N
() N
(/* Destroy an intern list. */) c n
(void) k
( killinternlist\() p
(struct) k
( internlist * plList\) {) p n
() S 2 T () S
(/* Destruct the contained data. */) c n
() p 2 T () S
(int) k
( i;) p n
() S 2 T () S
(for) K
(\(i = 0; i < plList) p
(\256) sy
(datausage; i++\) {) p n
() S 2 T () S 4 T (plList) S
(\256) sy
(pfDestroy\(plList) p
(\256) sy
(paData[i]\);) p n
() S 2 T (}) N
() S 2 T () S
(/* Free the data storage. */) c n
() p 2 T (free\(plList) S
(\256) sy
(paData\);) p n
() S 2 T () S
(/* Free key storage. */) c n
() p 2 T (killinterntab\(plList) S
(\256) sy
(ptKeys\);) p n
() S 2 T () S
(/* Free the list. */) c n
() p 2 T (free\(plList\);) N
(}) N
() N
(/* Insert an item into the list. */) c n
(void) k
( putinternlist\() p
(struct) k
( internlist *plList, ) p
(char) k
( *pszKey, ) p
(void) k
( *pvData\) {) p n
() S 2 T () S
(/* Intern the name, and fail if interning fails */) c n
() p 2 T (internkey  kData = internstring\(plList) S
(\256) sy
(ptKeys, pszKey\);) p n
() S 2 T (assert\(kData > 0\);) N
() N
() S 2 T () S
(if) K
(\(plList) p
(\256) sy
(dataspace ) p
(\272) sy
( plList) p
(\256) sy
(datausage\) {) p n
() S 2 T () S 4 T () S
(/* Allocate more space for the list. */) c n
() p 2 T () S 4 T (plList) S
(\256) sy
(dataspace *= 2;) p n
() S 2 T () S 4 T (plList) S
(\256) sy
(dataspace += 1;) p n
() S 2 T () S 4 T (plList) S
(\256) sy
(paData     = realloc\(plList) p
(\256) sy
(paData, ) p
(sizeof) K
(\() p
(void) k
( *\) * plList) p
(\256) sy
(dataspa) p n
(ce\);) N
() S 2 T () S 4 T () S
(/* Fail if allocation fails. */) c n
() p 2 T () S 4 T (assert\(plList) S
(\256) sy
(paData ) p
(\271) sy
( ) p
(NULL) K
(\);) p n
() S 2 T (}) N
() N
() S 2 T () S
(/* Delete any item that was in that slot. */) c n
() p 2 T () S
(if) K
(\(plList) p
(\256) sy
(paData[kData -1] ) p
(\271) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T (plList) S
(\256) sy
(pfDestroy\(plList) p
(\256) sy
(paData[kData - 1]\);) p n
() S 2 T (}) N
() N
() S 2 T () S
(/* Insert the item. */) c n
() p 2 T (plList) S
(\256) sy
(paData[kData - 1]  = pvData;) p n
() S 2 T (plList) S
(\256) sy
(datausage         += 1;) p n
(}) N
() N
(/* ) c n
( * Get an item from an intern list. ) N
( *) N
( * Returns NULL if there is no item for that key. ) N
( */) N
(void) k
( *getinternlist\() p
(struct) k
( internlist * plList, ) p
(char) k
( *pszKey\) {) p n
() S 2 T () S
(/* Lookup the index. */) c n
() p 2 T (internkey kData = lookupstring\(plList) S
(\256) sy
(ptKeys, pszKey\);) p n
() S 2 T () S
(/* Error if we don't have that key. */) c n
() p 2 T () S
(if) K
(\(kData ) p
(\272) sy
( SIINVALID\) ) p
(return) K
( ) p
(NULL) K
(;) p n
() N
() S 2 T () S
(/* Give back the stored data. */) c n
() p 2 T () S
(return) K
( plList) p
(\256) sy
(paData[kData - 1];) p n
(}) N
(intern.c) (Page 7/8) (Dec 06, 17 12:39) title
border
grestore
(TechOS Sources) rhead
(libs/intern.c) (21/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (8,1) 22
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(/* Delete an item from an intern list. */) c n
(void) k
( deleteinternlist\() p
(struct) k
( internlist *plList, ) p
(char) k
( *pszKey\) {) p n
() S 2 T () S
(/* Lookup the index. */) c n
() p 2 T (internkey kData = lookupstring\(plList) S
(\256) sy
(ptKeys, pszKey\);) p n
() S 2 T () S
(/* Error if we don't have that key. */) c n
() p 2 T () S
(if) K
(\(kData ) p
(\272) sy
( SIINVALID\) ) p
(return) K
(;) p n
() N
() S 2 T () S
(if) K
(\(plList) p
(\256) sy
(paData[kData - 1] ) p
(\271) sy
( ) p
(NULL) K
(\)) p n
() S 2 T () S 4 T (plList) S
(\256) sy
(pfDestroy\(plList) p
(\256) sy
(paData[kData - 1]\);) p n
() N
() S 2 T (plList) S
(\256) sy
(paData[kData - 1] = ) p
(NULL) K
(;) p n
(}) N
() N
(/* ) c n
( * Check if an item is in an intern list. ) N
( *) N
( * Returns 0 if the item is not cotinained, 1 oterhwise.) N
( */) N
(int) k
( containsinternlist\() p
(struct) k
( internlist *plList, ) p
(char) k
( *pszKey\) {) p n
() S 2 T () S
(/* Lookup the index. */) c n
() p 2 T (internkey kData = lookupstring\(plList) S
(\256) sy
(ptKeys, pszKey\);) p n
() S 2 T () S
(/* Error if we don't have that key. */) c n
() p 2 T () S
(if) K
(\(kData ) p
(\272) sy
( SIINVALID\) {) p n
() S 2 T () S 4 T () S
(return) K
( 0;) p n
() S 2 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S
(return) K
( plList) p
(\256) sy
(paData[kData - 1] ) p
(\271) sy
( ) p
(NULL) K
(;) p n
() S 2 T (}) N
(}) N
() N
(struct) k
( listitrdata {) p n
() S 2 T () S
(struct) k
( internlist *plList;) p n
() N
() S 2 T (internlistitr pfFunc;) N
() N
() S 2 T () S
(void) k
( *pvData;) p n
(};) N
() N
(static) K
( ) p
(void) k
( dointernlistitr\() p
(const) K
( ) p
(char) k
( *pszName, internkey kKey, ) p
(void) k
( *pvData\) {) p n
() S 2 T () S
(void) k
( *pvItem;) p n
() N
() S 2 T () S
(struct) k
( listitrdata *pData = \() p
(struct) k
( listitrdata *\)pvData;) p n
() N
() S 2 T (pvItem = getinternlist\(pData) S
(\256) sy
(plList, \() p
(char) k
( *\)pszName\);) p n
() N
() S 2 T () S
(if) K
(\(pvItem ) p
(\271) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T (pData) S
(\256) sy
(pfFunc\(\() p
(char) k
( *\)pszName, pvItem, pData) p
(\256) sy
(pvData\);) p n
() S 2 T (}) N
(}) N
() N
(void) k
( foreachinternlist\() p
(struct) k
( internlist *plList, internlistitr pfFunc, ) p
(void) k
( *pv) p n
(Data\) {) N
() S 2 T () S
(struct) k
( listitrdata dat;) p n
() N
() S 2 T (dat.pfFunc = pfFunc;) N
() S 2 T (dat.plList = plList;) N
() S 2 T (dat.pvData = pvData;) N
() N
() S 2 T (foreachintern\(plList) S
(\256) sy
(ptKeys, &dointernlistitr, &dat\);) p n
(}) N
(intern.c) (Page 8/8) (Dec 06, 17 12:39) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#define) K
( _POSIX_C_SOURCE 200810) p n
() N
(#include) K
( <assert.h>) p n
(#include) K
( <fcntl.h>) p n
(#include) K
( <stdio.h>) p n
(#include) K
( <stdlib.h>) p n
(#include) K
( <time.h>) p n
() N
(#include) K
( <sys/types.h>) p n
(#include) K
( <sys/stat.h>) p n
() N
(#include) K
( ") p
(osstate.h) str
(") p n
() N
(#include) K
( ") p
(pcb.h) str
(") p n
(#include) K
( ") p
(pcbinternals.h) str
(") p n
() N
(#include) K
( ") p
(commandstate.h) str
(") p n
() N
(/* Set default date formats */) c n
(char) k
( *defin_datefmt   = ") p
(%Y-%m-%d) str
(";) p n
(char) k
( *deftime_datefmt = ") p
(%r \(%Z\)) str
(";) p n
(char) k
( *defout_datefmt  = ") p
(%A, %d, %B, %Y) str
(";) p n
() N
(/* Allocate/initialize OS state. */) c n
(struct) k
( osstate *makeosstate\(\) {) p n
() S 2 T () S
(/* State to return. */) c n
() p 2 T () S
(struct) k
( osstate *ostate;) p n
() N
() S 2 T () S
(/* Current time. */) c n
() p 2 T (clock_t clocktime;) N
() N
() S 2 T (ostate = malloc\() S
(sizeof) K
(\() p
(struct) k
( osstate\)\);) p n
() S 2 T (assert\(ostate ) S
(\271) sy
( ) p
(NULL) K
(\);) p n
() N
() S 2 T () S
(/* Set up default formats for date I/O. */) c n
() p 2 T (ostate) S
(\256) sy
(in_datefmt   = malloc\(MAX_FMT_SIZE\);) p n
() S 2 T (ostate) S
(\256) sy
(out_datefmt  = malloc\(MAX_FMT_SIZE\);) p n
() S 2 T (ostate) S
(\256) sy
(time_datefmt = malloc\(MAX_FMT_SIZE\);) p n
() S 2 T () S
(/* Fail if a memory allocation failed. */) c n
() p 2 T (assert\(ostate) S
(\256) sy
(in_datefmt ) p
(\271) sy
( ) p
(NULL) K
(\);) p n
() S 2 T (assert\(ostate) S
(\256) sy
(out_datefmt ) p
(\271) sy
( ) p
(NULL) K
(\);) p n
() S 2 T (assert\(ostate) S
(\256) sy
(time_datefmt ) p
(\271) sy
( ) p
(NULL) K
(\);) p n
() N
() S 2 T () S
(/* Set them to their default values. */) c n
() p 2 T (sprintf\(ostate) S
(\256) sy
(in_datefmt,   ") p
(%.256s) str
(", defin_datefmt\);) p n
() S 2 T (sprintf\(ostate) S
(\256) sy
(time_datefmt, ") p
(%.256s) str
(", deftime_datefmt\);) p n
() S 2 T (sprintf\(ostate) S
(\256) sy
(out_datefmt,  ") p
(%.256s) str
(", defout_datefmt\);) p n
() N
() S 2 T () S
(/* Get current date/time. */) c n
() p 2 T (clocktime = time\() S
(NULL) K
(\);) p n
() S 2 T (ostate) S
(\256) sy
(datetime = localtime\(&clocktime\);) p n
() N
() S 2 T () S
(/* Setup PCB state. */) c n
() p 2 T (ostate) S
(\256) sy
(pPCBstat = makepcbstate\(\);) p n
() N
() S 2 T () S
(/* Setup command state. */) c n
() p 2 T (ostate) S
(\256) sy
(pComstate = makecommandstate\(\);) p n
() N
() S 2 T () S
(/* Setup working directory. */) c n
() p 2 T (ostate) S
(\256) sy
(fWorkingDir = open\(") p
(tree) str
(", O_RDONLY\);) p n
() S 2 T () S
(if) K
(\(ostate) p
(\256) sy
(fWorkingDir ) p
(\272) sy
( -1\) {) p n
() S 2 T () S 4 T (assert\(0\);) N
(osstate.c) (Page 1/2) (Nov 29, 17 19:14) title
border
grestore
(TechOS Sources) rhead
(libs/intern.c, osstate.c) (22/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2,1) 23
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T (}) N
() N
() S 2 T () S
(/* Load user database. */) c n
() p 2 T (ostate) S
(\256) sy
(pdUsers = makeudb\(\);) p n
() S 2 T (ramfileintodb\(ostate) S
(\256) sy
(pdUsers, ") p
(users.txt) str
("\);) p n
() N
() S 2 T () S
(return) K
( ostate;) p n
(}) N
() N
(/* Free/destroy OS state. */) c n
(void) k
( killosstate\() p
(struct) k
( osstate *ostate\) {) p n
() S 2 T () S
(/* Save user changes and free DB. */) c n
() p 2 T (ramdbintofile\(ostate) S
(\256) sy
(pdUsers, ") p
(users.txt) str
("\);) p n
() S 2 T (killudb\(ostate) S
(\256) sy
(pdUsers\);) p n
() N
() S 2 T () S
(/* Close working directory. */) c n
() p 2 T (close\(ostate) S
(\256) sy
(fWorkingDir\);) p n
() N
() S 2 T () S
(/* Free command state. */) c n
() p 2 T (killcommandstate\(ostate) S
(\256) sy
(pComstate\);) p n
() N
() S 2 T () S
(/* Free PCB state. */) c n
() p 2 T (killpcbstate\(ostate) S
(\256) sy
(pPCBstat\);) p n
() N
() S 2 T () S
(/* Free date/time vars. */) c n
() p 2 T (free\(ostate) S
(\256) sy
(in_datefmt\);) p n
() S 2 T (free\(ostate) S
(\256) sy
(time_datefmt\);) p n
() S 2 T (free\(ostate) S
(\256) sy
(out_datefmt\);) p n
() N
() S 2 T () S
(/* Free state. */) c n
() p 2 T (free\(ostate\);) N
(}) N
(osstate.c) (Page 2/2) (Nov 29, 17 19:14) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#include) K
( <assert.h>) p n
(#include) K
( <stdlib.h>) p n
(#include) K
( <stdio.h>) p n
() N
(#include) K
( ") p
(libs/intern.h) str
(") p n
() N
(#include) K
( ") p
(osstate.h) str
(") p n
() N
(#include) K
( ") p
(pcb.h) str
(") p n
(#include) K
( ") p
(pcbinternals.h) str
(") p n
() N
(/* Allocate and initialize a PCB. */) c n
(struct) k
( pcb *makepcb\() p
(struct) k
( pcbstate *pState, ) p
(char) k
( *pszPCBName, ) p
(char) k
( *pszPCBImage) p n
(, ) S
(enum) k
( pcbclass clas, ) p
(int) k
( prior\) {) p n
() S 2 T () S
(/* The PCB to return. */) c n
() p 2 T () S
(struct) k
( pcb *pPCB;) p n
() N
() S 2 T () S
(/* Make sure priorities are valid. */) c n
() p 2 T () S
(if) K
(\(prior < PCB_MINPRIOR ) p
(\332) sy
( prior > PCB_MAXPRIOR\) ) p
(return) K
( ) p
(NULL) K
(;) p n
() N
() S 2 T () S
(/* Allocate a PCB and fail if allocation does. */) c n
() p 2 T (pPCB = malloc\() S
(sizeof) K
(\() p
(struct) k
( pcb\)\);) p n
() S 2 T (assert\(pPCB ) S
(\271) sy
( ) p
(NULL) K
(\);) p n
() N
() S 2 T () S
(/* Set PCB ID. */) c n
() p 2 T (pPCB) S
(\256) sy
(id    = pState) p
(\256) sy
(nProcid++;) p n
() S 2 T () S
(/* Intern the string for the PCB name. */) c n
() p 2 T (pPCB) S
(\256) sy
(kName = internstring\(pState) p
(\256) sy
(ptPCBNames, pszPCBName\);) p n
() N
() S 2 T () S
(/* Initialize passed in properties. */) c n
() p 2 T (pPCB) S
(\256) sy
(clas     = clas;) p n
() S 2 T (pPCB) S
(\256) sy
(priority = prior;) p n
() N
() S 2 T () S
(/* Initialize PCB status. */) c n
() p 2 T (pPCB) S
(\256) sy
(status = PCB_READY;) p n
() S 2 T (pPCB) S
(\256) sy
(susp   = PCB_FREE;) p n
() N
() S 2 T () S
(/* Initialize PCB queue. */) c n
() p 2 T (pPCB) S
(\256) sy
(pNext = pPCB;) p n
() S 2 T (pPCB) S
(\256) sy
(pPrev = pPCB;) p n
() N
() S 2 T () S
(/* Setup process data. */) c n
() p 2 T (pPCB) S
(\256) sy
(kImage = internstring\(pState) p
(\256) sy
(ptPCBImages, pszPCBImage\);) p n
() S 2 T (pPCB) S
(\256) sy
(offset = 0;) p n
() N
() S 2 T () S
(return) K
( pPCB;) p n
(}) N
() N
(/* Deinitialize and deallocate a PCB. */) c n
(void) k
( killpcb\() p
(struct) k
( pcb * pPCB\) {) p n
() S 2 T (free\(pPCB\);) N
(}) N
() N
(/* Find something by number in a PCB queue. */) c n
(static) K
( ) p
(struct) k
( pcb *queuefindpcbnum\() p
(struct) k
( pcbqueue *pqQueue, ) p
(int) k
( pcbnum\) {) p n
() S 2 T () S
(switch) K
(\(pqQueue) p
(\256) sy
(type\) {) p n
() S 2 T () S
(case) K
( QT_NORMAL:) p n
() S 2 T () S 4 T ({) N
() S 2 T () S 4 T () S 6 T () S
(/* The number of the first PCB. */) c n
() p 2 T () S 4 T () S 6 T () S
(int) k
( initPCB;) p n
() S 2 T () S 4 T () S 6 T () S
(/* The current PCB to search. */) c n
() p 2 T () S 4 T () S 6 T () S
(struct) k
( pcb *pPCB;) p n
(pcb.c) (Page 1/8) (Oct 25, 17 20:20) title
border
grestore
(TechOS Sources) rhead
(osstate.c, pcb.c) (23/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2-3) 24
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
() S 2 T () S 4 T () S 6 T () S
(/* Initialize iteration. */) c n
() p 2 T () S 4 T () S 6 T (pPCB    = pqQueue) S
(\256) sy
(pHead;) p n
() S 2 T () S 4 T () S 6 T (initPCB = pPCB) S
(\256) sy
(id;) p n
() N
() S 2 T () S 4 T () S 6 T () S
(do) K
( {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* Return the PCB if it matches. */) c n
() p 2 T () S 4 T () S 6 T () S 8 T () S
(if) K
(\(pPCB) p
(\256) sy
(id ) p
(\272) sy
( pcbnum\) ) p
(return) K
( pPCB;) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* Advance to the next PCB in the queue. */) c n
() p 2 T () S 4 T () S 6 T () S 8 T (pPCB = pPCB) S
(\256) sy
(pNext;) p n
() S 2 T () S 4 T () S 6 T (} ) S
(while) K
(\(pPCB) p
(\256) sy
(id ) p
(\271) sy
( initPCB\);) p n
() N
() S 2 T () S 4 T () S 6 T () S
(return) K
( ) p
(NULL) K
(;) p n
() S 2 T () S 4 T (}) N
() S 2 T () S
(case) K
( QT_PRIORITY:) p n
() S 2 T () S 4 T ({) N
() S 2 T () S 4 T () S 6 T () S
(/* Loop index for queues. */) c n
() p 2 T () S 4 T () S 6 T () S
(int) k
( i;) p n
() S 2 T () S 4 T () S 6 T () S
(/* Cast queue. */) c n
() p 2 T () S 4 T () S 6 T () S
(struct) k
( pcbqueueprior *pqrQueue;) p n
() N
() S 2 T () S 4 T () S 6 T (pqrQueue = \() S
(struct) k
( pcbqueueprior *\)pqQueue;) p n
() S 2 T () S 4 T () S 6 T () S
(for) K
(\(i = 0; i ) p
(\243) sy
( PCB_MAXPRIOR; i++\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* The PCB we possibly found. */) c n
() p 2 T () S 4 T () S 6 T () S 8 T () S
(struct) k
( pcb *pPCB;) p n
() N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* Find in each priority level. */) c n
() p 2 T () S 4 T () S 6 T () S 8 T (pPCB = queuefindpcbnum\(pqrQueue) S
(\256) sy
(apqQueues[i], pcbnum\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(if) K
(\(pPCB ) p
(\271) sy
( ) p
(NULL) K
(\) ) p
(return) K
( pPCB;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () N
() S 2 T () S 4 T () S 6 T () S
(/* We found nothing. */) c n
() p 2 T () S 4 T () S 6 T () S
(return) K
( ) p
(NULL) K
(;) p n
() S 2 T () S 4 T (}) N
() S 2 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S
(/* Shouldn't happen. */) c n
() p 2 T () S 4 T (assert\(0\);) N
() S 2 T (}) N
(}) N
() N
(/* Find something by name in a PCB queue. */) c n
(static) K
( ) p
(struct) k
( pcb *queuefindpcbname\() p
(struct) k
( pcbqueue *pqQueue, ) p
(int) k
( kPCBName\) {) p n
() S 2 T () S
(switch) K
(\(pqQueue) p
(\256) sy
(type\) {) p n
() S 2 T () S
(case) K
( QT_NORMAL:) p n
() S 2 T () S 4 T ({) N
() S 2 T () S 4 T () S 6 T () S
(/* The number of the first PCB. */) c n
() p 2 T () S 4 T () S 6 T () S
(int) k
( initPCB;) p n
() S 2 T () S 4 T () S 6 T () S
(/* The current PCB to search. */) c n
() p 2 T () S 4 T () S 6 T () S
(struct) k
( pcb *pPCB;) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Initialize iteration. */) c n
() p 2 T () S 4 T () S 6 T (pPCB    = pqQueue) S
(\256) sy
(pHead;) p n
() N
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(pPCB ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* Empty queue. */) c n
() p 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 0;) p n
() S 2 T () S 4 T () S 6 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (initPCB = pPCB) S
(\256) sy
(id;) p n
() S 2 T () S 4 T () S 6 T (}) N
() N
() S 2 T () S 4 T () S 6 T () S
(do) K
( {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* Return the PCB if it matches. */) c n
(pcb.c) (Page 2/8) (Oct 25, 17 20:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S 6 T () S 8 T () S
(if) K
(\(pPCB) p
(\256) sy
(kName ) p
(\272) sy
( kPCBName\) ) p
(return) K
( pPCB;) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* Advance to the next PCB in the queue. */) c n
() p 2 T () S 4 T () S 6 T () S 8 T (pPCB = pPCB) S
(\256) sy
(pNext;) p n
() S 2 T () S 4 T () S 6 T (} ) S
(while) K
(\(pPCB) p
(\256) sy
(id ) p
(\271) sy
( initPCB\);) p n
() N
() S 2 T () S 4 T () S 6 T () S
(return) K
( ) p
(NULL) K
(;) p n
() S 2 T () S 4 T (}) N
() S 2 T () S
(case) K
( QT_PRIORITY:) p n
() S 2 T () S 4 T ({) N
() S 2 T () S 4 T () S 6 T () S
(/* Loop index for queues. */) c n
() p 2 T () S 4 T () S 6 T () S
(int) k
( i;) p n
() S 2 T () S 4 T () S 6 T () S
(/* Cast queue. */) c n
() p 2 T () S 4 T () S 6 T () S
(struct) k
( pcbqueueprior *pqrQueue;) p n
() N
() S 2 T () S 4 T () S 6 T (pqrQueue = \() S
(struct) k
( pcbqueueprior *\)pqQueue;) p n
() S 2 T () S 4 T () S 6 T () S
(for) K
(\(i = 0; i ) p
(\243) sy
( PCB_MAXPRIOR; i++\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* The PCB we possibly found. */) c n
() p 2 T () S 4 T () S 6 T () S 8 T () S
(struct) k
( pcb *pPCB;) p n
() N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* Find in each priority level. */) c n
() p 2 T () S 4 T () S 6 T () S 8 T (pPCB = queuefindpcbname\(pqrQueue) S
(\256) sy
(apqQueues[i], kPCBName\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(if) K
(\(pPCB ) p
(\271) sy
( ) p
(NULL) K
(\) ) p
(return) K
( pPCB;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () N
() S 2 T () S 4 T () S 6 T () S
(/* We found nothing. */) c n
() p 2 T () S 4 T () S 6 T () S
(return) K
( ) p
(NULL) K
(;) p n
() S 2 T () S 4 T (}) N
() S 2 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S
(/* Shouldn't happen. */) c n
() p 2 T () S 4 T (assert\(0\);) N
() S 2 T (}) N
(}) N
(/* Find a PCB by number in all of the queues. */) c n
(struct) k
( pcb *findpcbnum\() p
(struct) k
( pcbstate *pState, ) p
(int) k
( pcbnum\) {) p n
() S 2 T () S
(/* The PCB to return. */) c n
() p 2 T () S
(struct) k
( pcb *pPCB;) p n
() N
() S 2 T () S
(/* Fail fast for numbers that don't exist. */) c n
() p 2 T () S
(if) K
(\(pState) p
(\256) sy
(nProcid < pcbnum\) ) p
(return) K
( ) p
(NULL) K
(;) p n
() N
() S 2 T () S
(/* Search the queues in order. */) c n
() p 2 T (pPCB                  = queuefindpcbnum\(pState) S
(\256) sy
(pqReady,    pcbnum\);) p n
() S 2 T () S
(if) K
(\(pPCB ) p
(\272) sy
( ) p
(NULL) K
(\) pPCB = queuefindpcbnum\(pState) p
(\256) sy
(pqBlocked,  pcbnum\);) p n
() S 2 T () S
(if) K
(\(pPCB ) p
(\272) sy
( ) p
(NULL) K
(\) pPCB = queuefindpcbnum\(pState) p
(\256) sy
(pqsReady,   pcbnum\);) p n
() S 2 T () S
(if) K
(\(pPCB ) p
(\272) sy
( ) p
(NULL) K
(\) pPCB = queuefindpcbnum\(pState) p
(\256) sy
(pqsBlocked, pcbnum\);) p n
() N
() S 2 T () S
(return) K
( pPCB;) p n
(}) N
() N
(/* Find a PCB by name in all of the queues. */) c n
(struct) k
( pcb *findpcbname\() p
(struct) k
( pcbstate *pState, ) p
(char) k
( *pszPCBName\) {) p n
() S 2 T () S
(/* The PCB to return. */) c n
() p 2 T () S
(struct) k
( pcb *pPCB;) p n
() S 2 T () S
(/* The interned name. */) c n
() p 2 T () S
(int) k
( kPCBName;) p n
() N
() S 2 T () S
(/* Lookup the PCB name. */) c n
() p 2 T (kPCBName = lookupstring\(pState) S
(\256) sy
(ptPCBNames, pszPCBName\);) p n
() S 2 T () S
(if) K
(\(kPCBName ) p
(\272) sy
( SIINVALID\) ) p
(return) K
( ) p
(NULL) K
(;) p n
() N
() S 2 T () S
(/* Only look in non-empty queues. */) c n
() p 2 T () S
(if) K
(\(pState) p
(\256) sy
(pqReady) p
(\256) sy
(pHead ) p
(\271) sy
( ) p
(NULL) K
(\)) p n
(pcb.c) (Page 3/8) (Oct 25, 17 20:20) title
border
grestore
(TechOS Sources) rhead
(pcb.c) (24/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (4-5) 25
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T (pPCB = queuefindpcbname\(pState) S
(\256) sy
(pqReady, kPCBName\);) p n
() S 2 T () S
(if) K
(\(pState) p
(\256) sy
(pqBlocked) p
(\256) sy
(pHead ) p
(\271) sy
( ) p
(NULL) K
(\) ) p n
() S 2 T () S 4 T () S
(if) K
(\(pPCB ) p
(\272) sy
( ) p
(NULL) K
(\) pPCB = queuefindpcbname\(pState) p
(\256) sy
(pqBlocked, kPCBName\);) p n
() S 2 T () S
(if) K
(\(pState) p
(\256) sy
(pqsReady) p
(\256) sy
(pHead ) p
(\271) sy
( ) p
(NULL) K
(\) ) p n
() S 2 T () S 4 T () S
(if) K
(\(pPCB ) p
(\272) sy
( ) p
(NULL) K
(\) pPCB = queuefindpcbname\(pState) p
(\256) sy
(pqsReady, kPCBName\);) p n
() S 2 T () S
(if) K
(\(pState) p
(\256) sy
(pqsBlocked) p
(\256) sy
(pHead ) p
(\271) sy
( ) p
(NULL) K
(\) ) p n
() S 2 T () S 4 T () S
(if) K
(\(pPCB ) p
(\272) sy
( ) p
(NULL) K
(\) pPCB = queuefindpcbname\(pState) p
(\256) sy
(pqsBlocked, kPCBName\);) p n
() N
() S 2 T () S
(return) K
( pPCB;) p n
(}) N
() N
(/* Fill an queue if it is empty. */) c n
(static) K
( ) p
(int) k
( fillqueue\() p
(struct) k
( pcbqueue *pqQueue, ) p
(struct) k
( pcb *pPCB\) {) p n
() S 2 T () S
(/* Only valid on normal queues. */) c n
() p 2 T (assert\(pqQueue) S
(\256) sy
(type ) p
(\272) sy
( QT_NORMAL\);) p n
() N
() S 2 T () S
(if) K
(\(pqQueue) p
(\256) sy
(pHead ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T (pqQueue) S
(\256) sy
(pHead = pPCB;) p n
() S 2 T () S 4 T () S
(return) K
( 1;) p n
() S 2 T (}) N
() N
() S 2 T () S
(return) K
( 0;) p n
(}) N
() N
(/* Insert a PCB into a FIFO queue. */) c n
(static) K
( ) p
(void) k
( fifoinsertpcb\() p
(struct) k
( pcbqueue *pqQueue, ) p
(struct) k
( pcb *pPCB\) {) p n
() S 2 T () S
(/* Only valid on normal queues. */) c n
() p 2 T (assert\(pqQueue) S
(\256) sy
(type ) p
(\272) sy
( QT_NORMAL\);) p n
() N
() S 2 T () S
(/* The current head of the chain. */) c n
() p 2 T () S
(struct) k
( pcb *pHead;) p n
() S 2 T () S
(/* The current tail of the chain. */) c n
() p 2 T () S
(struct) k
( pcb *pTail;) p n
() N
() S 2 T () S
(/* Fill an queue if it is empty. */) c n
() p 2 T () S
(if) K
(\(fillqueue\(pqQueue, pPCB\)\) ) p
(return) K
(;) p n
() N
() S 2 T (pHead = pqQueue) S
(\256) sy
(pHead;) p n
() S 2 T (pTail = pHead) S
(\256) sy
(pPrev;) p n
() N
() S 2 T () S
(/* Chain the PCB to the back. */) c n
() p 2 T (pPCB) S
(\256) sy
(pNext = pHead;) p n
() S 2 T (pPCB) S
(\256) sy
(pPrev = pTail;) p n
() N
() S 2 T () S
(/* Adjust the queue members. */) c n
() p 2 T (pTail) S
(\256) sy
(pNext = pPCB;) p n
() S 2 T (pHead) S
(\256) sy
(pPrev = pPCB;) p n
(}) N
() N
(/* Insert a PCB into a FILO queue. */) c n
(static) K
( ) p
(void) k
( filoinsertpcb\() p
(struct) k
( pcbqueue *pqQueue, ) p
(struct) k
( pcb *pPCB\) {) p n
() S 2 T () S
(/* Only valid on normal queues. */) c n
() p 2 T (assert\(pqQueue) S
(\256) sy
(type ) p
(\272) sy
( QT_NORMAL\);) p n
() N
() S 2 T () S
(/* Fill an queue if it is empty. */) c n
() p 2 T () S
(if) K
(\(fillqueue\(pqQueue, pPCB\)\) ) p
(return) K
(;) p n
() N
() S 2 T () S
(/* Chain the PCB to the queue. */) c n
() p 2 T (fifoinsertpcb\(pqQueue, pPCB\);) N
() N
() S 2 T () S
(/* Set the new head. */) c n
() p 2 T (pqQueue) S
(\256) sy
(pHead = pPCB;) p n
(pcb.c) (Page 4/8) (Oct 25, 17 20:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(}) p n
() N
(/* Insert a PCB into a priority queue. */) c n
(static) K
( ) p
(void) k
( priorinsertpcb\() p
(struct) k
( pcbqueue *pqQueue, ) p
(struct) k
( pcb *pPCB\) {) p n
() S 2 T () S
(/* Cast queue. */) c n
() p 2 T () S
(struct) k
( pcbqueueprior *pqrQueue;) p n
() N
() S 2 T () S
(/* Only valid on priority queues. */) c n
() p 2 T (assert\(pqQueue) S
(\256) sy
(type ) p
(\272) sy
( QT_PRIORITY\);) p n
() N
() S 2 T (pqrQueue = \() S
(struct) k
( pcbqueueprior *\)pqQueue;) p n
() N
() S 2 T () S
(/* Insert it into the proper queue. */) c n
() p 2 T (fifoinsertpcb\(pqrQueue) S
(\256) sy
(apqQueues[pPCB) p
(\256) sy
(priority], pPCB\);) p n
() S 2 T (pqrQueue) S
(\256) sy
(apqQueues[pPCB) p
(\256) sy
(priority]) p
(\256) sy
(nprocs += 1;) p n
(}) N
() N
(void) k
( doinsertpcb\() p
(struct) k
( pcbqueue *pqQueue, ) p
(struct) k
( pcb *pPCB\) {) p n
() S 2 T () S
(switch) K
(\(pqQueue) p
(\256) sy
(type\) {) p n
() S 2 T () S
(case) K
( QT_NORMAL:) p n
() S 2 T () S 4 T (fifoinsertpcb\(pqQueue, pPCB\);) N
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(case) K
( QT_PRIORITY:) p n
() S 2 T () S 4 T (priorinsertpcb\(pqQueue, pPCB\);) N
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S
(/* Shouldn't happen. */) c n
() p 2 T () S 4 T (assert\(0\);) N
() S 2 T (}) N
(}) N
(/* Insert a PCB into the proper queue. */) c n
(enum) k
( pcberror insertpcb\() p
(struct) k
( pcbstate *pState, ) p
(struct) k
( pcb *pPCB\) {) p n
() S 2 T () S
(/* The two queues to select from. */) c n
() p 2 T () S
(struct) k
( pcbqueue *pqReady;) p n
() S 2 T () S
(struct) k
( pcbqueue *pqBlocked;) p n
() N
() S 2 T () S
(/* Don't insert a PCB that is already in a queue. */) c n
() p 2 T () S
(if) K
(\(pPCB) p
(\256) sy
(pNext ) p
(\271) sy
( pPCB ) p
(\332) sy
( pPCB) p
(\256) sy
(pPrev ) p
(\271) sy
( pPCB\) ) p
(return) K
( PCBINQUEUE;) p n
() N
() S 2 T () S
(switch) K
(\(pPCB) p
(\256) sy
(susp\) {) p n
() S 2 T () S
(case) K
( PCB_FREE:) p n
() S 2 T () S 4 T (pqReady   = pState) S
(\256) sy
(pqReady;) p n
() S 2 T () S 4 T (pqBlocked = pState) S
(\256) sy
(pqBlocked;) p n
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(case) K
( PCB_SUSPENDED:) p n
() S 2 T () S 4 T (pqReady   = pState) S
(\256) sy
(pqsReady;) p n
() S 2 T () S 4 T (pqBlocked = pState) S
(\256) sy
(pqsBlocked;) p n
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S
(return) K
( PCBINVSUSP;) p n
() S 2 T (}) N
() N
() S 2 T () S
(switch) K
(\(pPCB) p
(\256) sy
(status\) {) p n
() S 2 T () S
(case) K
( PCB_READY:) p n
() S 2 T () S 4 T (doinsertpcb\(pqReady, pPCB\);) N
() S 2 T () S 4 T (pqReady) S
(\256) sy
(nprocs += 1;) p n
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(case) K
( PCB_BLOCKED:) p n
() S 2 T () S 4 T (doinsertpcb\(pqBlocked, pPCB\);) N
() S 2 T () S 4 T (pqBlocked) S
(\256) sy
(nprocs += 1;) p n
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(case) K
( PCB_RUNNING:) p n
(pcb.c) (Page 5/8) (Oct 25, 17 20:20) title
border
grestore
(TechOS Sources) rhead
(pcb.c) (25/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (6-7) 26
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S
(return) K
( PCBRUNNING;) p n
() S 2 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S
(return) K
( PCBINVSTAT;) p n
() S 2 T (}) N
() N
() S 2 T () S
(return) K
( 0;) p n
(}) N
() N
(/* Remove a PCB from a queue. */) c n
(void) k
( removepcb\() p
(struct) k
( pcbstate *pState, ) p
(struct) k
( pcb *pPCB\) {) p n
() S 2 T () S
(/* Temporary links that will be restored. */) c n
() p 2 T () S
(struct) k
( pcb *pPrev, *pNext;) p n
() S 2 T () S
(/* The queue this PCB came from. */) c n
() p 2 T () S
(struct) k
( pcbqueue *pqQueue;) p n
() N
() S 2 T () S
(if) K
(\(pPCB) p
(\256) sy
(susp ) p
(\272) sy
( PCB_SUSPENDED ) p
(\331) sy
( pPCB) p
(\256) sy
(status ) p
(\272) sy
( PCB_READY\) {) p n
() S 2 T () S 4 T (pqQueue = pState) S
(\256) sy
(pqsReady;) p n
() S 2 T (} ) S
(else) K
( ) p
(if) K
(\(pPCB) p
(\256) sy
(susp ) p
(\272) sy
( PCB_SUSPENDED ) p
(\331) sy
( pPCB) p
(\256) sy
(status ) p
(\272) sy
( PCB_BLOCKED\) {) p n
() S 2 T () S 4 T (pqQueue = pState) S
(\256) sy
(pqsBlocked;) p n
() S 2 T (} ) S
(else) K
( ) p
(if) K
(\(pPCB) p
(\256) sy
(susp ) p
(\272) sy
( PCB_FREE ) p
(\331) sy
( pPCB) p
(\256) sy
(status ) p
(\272) sy
( PCB_READY\) {) p n
() S 2 T () S 4 T (pqQueue = pState) S
(\256) sy
(pqReady;) p n
() S 2 T (} ) S
(else) K
( ) p
(if) K
(\(pPCB) p
(\256) sy
(susp ) p
(\272) sy
( PCB_FREE ) p
(\331) sy
( pPCB) p
(\256) sy
(status ) p
(\272) sy
( PCB_BLOCKED\) {) p n
() S 2 T () S 4 T (pqQueue = pState) S
(\256) sy
(pqBlocked;) p n
() S 2 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T (printf\(") S
(BANG! Attempted to remove a PCB not in a queue.\\n) str
("\);) p n
() S 2 T () S 4 T (assert\(0\);) N
() S 2 T (}) N
() N
() S 2 T () S
(/* Save the links to restore. */) c n
() p 2 T (pNext = pPCB) S
(\256) sy
(pNext;) p n
() S 2 T (pPrev = pPCB) S
(\256) sy
(pPrev;) p n
() N
() S 2 T () S
(/* Remove the PCB from the queue. */) c n
() p 2 T (pPCB) S
(\256) sy
(pNext = pPCB;) p n
() S 2 T (pPCB) S
(\256) sy
(pPrev = pPCB;) p n
() N
() S 2 T () S
(/* Set the proper queue. */) c n
() p 2 T () S
(switch) K
(\(pqQueue) p
(\256) sy
(type\) {) p n
() S 2 T () S
(case) K
( QT_NORMAL:) p n
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(case) K
( QT_PRIORITY:) p n
() S 2 T () S 4 T (pqQueue) S
(\256) sy
(nprocs -= 1;) p n
() S 2 T () S 4 T (pqQueue = \(\() S
(struct) k
( pcbqueueprior *\)pqQueue\)) p
(\256) sy
(apqQueues[pPCB) p
(\256) sy
(priority];) p n
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S
(/* Shouldn't happen. */) c n
() p 2 T () S 4 T (assert\(0\);) N
() S 2 T (}) N
() N
() S 2 T (pqQueue) S
(\256) sy
(nprocs -= 1;) p n
() N
() S 2 T () S
(if) K
(\(pqQueue) p
(\256) sy
(nprocs < 1\) {) p n
() S 2 T () S 4 T () S
(/* Empty a queue. */) c n
() p 2 T () S 4 T (pqQueue) S
(\256) sy
(pHead = ) p
(NULL) K
(;) p n
() S 2 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S
(/* Restore the queue links. */) c n
() p 2 T () S 4 T (pNext) S
(\256) sy
(pPrev = pPrev;) p n
() S 2 T () S 4 T (pPrev) S
(\256) sy
(pNext = pNext;) p n
() N
() S 2 T () S 4 T () S
(if) K
(\(pqQueue) p
(\256) sy
(pHead ) p
(\272) sy
( pPCB\) {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Reset queue head. */) c n
() p 2 T () S 4 T () S 6 T (pqQueue) S
(\256) sy
(pHead = pNext;) p n
(pcb.c) (Page 6/8) (Oct 25, 17 20:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T (}) N
() S 2 T (}) N
(}) N
() N
(/* Print a PCB. */) c n
(void) k
( printpcb\() p
(struct) k
( pcb *pPCB, ) p
(void) k
( *pvState\) {) p n
() S 2 T () S
(/* The OS state. */) c n
() p 2 T () S
(struct) k
( osstate *ostate;) p n
() N
() S 2 T () S
(/* The name of the PCB. */) c n
() p 2 T () S
(const) K
( ) p
(char) k
( *pszPCBName;) p n
() S 2 T () S
(/* The process image for the PCB. */) c n
() p 2 T () S
(const) K
( ) p
(char) k
( *pszPCBImage;) p n
() S 2 T () S
(/* The class of the PCB. */) c n
() p 2 T () S
(const) K
( ) p
(char) k
( *pszPCBClass;) p n
() S 2 T () S
(/* The status of the PCB. */) c n
() p 2 T () S
(const) K
( ) p
(char) k
( *pszPCBStatus;) p n
() S 2 T () S
(/* The suspension status of the PCB. */) c n
() p 2 T () S
(const) K
( ) p
(char) k
( *pszPCBSusp;) p n
() N
() S 2 T () S
(/* Cast arg. */) c n
() p 2 T (ostate = \() S
(struct) k
( osstate *\)\(pvState\);) p n
() N
() S 2 T () S
(/* Get the PCB name. */) c n
() p 2 T (pszPCBName  = lookupkey\(ostate) S
(\256) sy
(pPCBstat) p
(\256) sy
(ptPCBNames, pPCB) p
(\256) sy
(kName\);) p n
() S 2 T () S
(/* Get the image name. */) c n
() p 2 T (pszPCBImage = lookupkey\(ostate) S
(\256) sy
(pPCBstat) p
(\256) sy
(ptPCBImages, pPCB) p
(\256) sy
(kImage\);) p n
() N
() S 2 T () S
(/* Get the PCB class. */) c n
() p 2 T () S
(switch) K
(\(pPCB) p
(\256) sy
(clas\) {) p n
() S 2 T () S
(case) K
( PCB_SYSTEM:) p n
() S 2 T () S 4 T (pszPCBClass = ") S
(System) str
(";) p n
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(case) K
( PCB_APPLICATION:) p n
() S 2 T () S 4 T (pszPCBClass = ") S
(Application) str
(";) p n
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S
(/* Shouldn't happen. */) c n
() p 2 T () S 4 T (assert\(0\);) N
() S 2 T (}) N
() N
() S 2 T () S
(/* Get the PCB status. */) c n
() p 2 T () S
(switch) K
(\(pPCB) p
(\256) sy
(status\) {) p n
() S 2 T () S
(case) K
( PCB_READY:) p n
() S 2 T () S 4 T (pszPCBStatus = ") S
(Ready) str
(";) p n
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(case) K
( PCB_RUNNING:) p n
() S 2 T () S 4 T (pszPCBStatus = ") S
(Running) str
(";) p n
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(case) K
( PCB_BLOCKED:) p n
() S 2 T () S 4 T (pszPCBStatus = ") S
(Blocked) str
(";) p n
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S
(/* Shouldn't happen. */) c n
() p 2 T () S 4 T (assert\(0\);) N
() S 2 T (}) N
() N
() S 2 T () S
(/* Get the PCB suspension status. */) c n
() p 2 T () S
(switch) K
(\(pPCB) p
(\256) sy
(susp\) {) p n
() S 2 T () S
(case) K
( PCB_SUSPENDED:) p n
() S 2 T () S 4 T (pszPCBSusp = ") S
(Yes) str
(";) p n
() S 2 T () S 4 T () S
(break) K
(;) p n
(pcb.c) (Page 7/8) (Oct 25, 17 20:20) title
border
grestore
(TechOS Sources) rhead
(pcb.c) (26/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (8,1) 27
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S
(case) K
( PCB_FREE:) p n
() S 2 T () S 4 T (pszPCBSusp = ") S
(No) str
(";) p n
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S
(/* Shouldn't happen. */) c n
() p 2 T () S 4 T (assert\(0\);) N
() S 2 T (}) N
() N
() S 2 T () S
(/* Print basic PCB information. */) c n
() p 2 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(PCB ID:           %d\\n) str
(", pPCB) p
(\256) sy
(id\);) p n
() S 2 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(PCB Name:         %s\\n) str
(", pszPCBName\);) p n
() S 2 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(PCB Class:        %s\\n) str
(", pszPCBClass\);) p n
() S 2 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(PCB Priority:     %d\\n) str
(", pPCB) p
(\256) sy
(priority\);) p n
() N
() S 2 T () S
(/* Print PCB status information. */) c n
() p 2 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(PCB Status:       %s\\n) str
(", pszPCBStatus\);) p n
() S 2 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Is PCB Suspended: %s\\n) str
(", pszPCBSusp\);) p n
() N
() S 2 T () S
(/* Print PCB process information. */) c n
() p 2 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(PCB Image:         %s\\n) str
(", pszPCBImage\);) p n
() S 2 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(PCB Image Offset:  %d\\n\\n) str
(", pPCB) p
(\256) sy
(offset\);) p n
(}) N
() N
(/* Check if there are any processes to dispatch. */) c n
(int) k
( candispatch\() p
(struct) k
( pcbstate *pState\) {) p n
() S 2 T () S
(if) K
(\(pState) p
(\256) sy
(pqReady) p
(\256) sy
(nprocs > 0 ) p
(\332) sy
( pState) p
(\256) sy
(pqBlocked) p
(\256) sy
(nprocs > 0\) {) p n
() S 2 T () S 4 T () S
(return) K
( pState) p
(\256) sy
(pqReady) p
(\256) sy
(nprocs + pState) p
(\256) sy
(pqBlocked) p
(\256) sy
(nprocs;) p n
() S 2 T (}) N
() N
() S 2 T () S
(return) K
( 0;) p n
(}) N
() N
(/* Get a dispatchable process. */) c n
(struct) k
( pcb *getdisppcb\() p
(struct) k
( pcbstate *pState\) {) p n
() S 2 T () S
(if) K
(\(pState) p
(\256) sy
(pqReady) p
(\256) sy
(nprocs > 0 ) p
(\331) sy
( pState) p
(\256) sy
(pqBlocked) p
(\256) sy
(nprocs > 0\) {) p n
() S 2 T () S 4 T () S
(if) K
(\(random\(\) > .5\) ) p
(return) K
( poppcb\(pState, pState) p
(\256) sy
(pqReady\);) p n
() S 2 T () S 4 T () S
(else) K
(              ) p
(return) K
( poppcb\(pState, pState) p
(\256) sy
(pqBlocked\);) p n
() S 2 T (} ) S
(else) K
( ) p
(if) K
(\(pState) p
(\256) sy
(pqReady) p
(\256) sy
(nprocs > 0\) {) p n
() S 2 T () S 4 T () S
(return) K
( poppcb\(pState, pState) p
(\256) sy
(pqReady\);) p n
() S 2 T (} ) S
(else) K
( ) p
(if) K
(\(pState) p
(\256) sy
(pqBlocked) p
(\256) sy
(nprocs > 0\) {) p n
() S 2 T () S 4 T () S
(return) K
( poppcb\(pState, pState) p
(\256) sy
(pqBlocked\);) p n
() S 2 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S
(return) K
( ) p
(NULL) K
(;) p n
() S 2 T (}) N
(}) N
(pcb.c) (Page 8/8) (Oct 25, 17 20:20) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#include) K
( <assert.h>) p n
(#include) K
( <getopt.h>) p n
(#include) K
( <stdio.h>) p n
(#include) K
( <stdlib.h>) p n
(#include) K
( <string.h>) p n
(#include) K
( <unistd.h>) p n
() N
(#include) K
( <sys/types.h>) p n
(#include) K
( <sys/stat.h>) p n
() N
(#include) K
( ") p
(libs/intern.h) str
(") p n
() N
(#include) K
( ") p
(osstate.h) str
(") p n
(#include) K
( ") p
(command.h) str
(") p n
(#include) K
( ") p
(commands.h) str
(") p n
() N
(#include) K
( ") p
(pcb.h) str
(") p n
(#include) K
( ") p
(pcbinternals.h) str
(") p n
(#include) K
( ") p
(pcbcmds.h) str
(") p n
() N
(/*) c n
( * @TODO 10/25/17 Ben Culkin :InsertPCBCheck) N
( * ) S 4 T (Make sure the return value of insertpcb is checked every time it is) N
( * ) S 4 T (called.) N
( */) N
(/* Handle creating a PCB. */) N
(HANDLECOM\(mkpcb\) { ) p n
() S 2 T () S
(/* Class of the PCB. */) c n
() p 2 T () S
(enum) k
( pcbclass clas;) p n
() S 2 T () S
(/* Priority of the PCB. */) c n
() p 2 T () S
(int) k
( priority;) p n
() S 2 T () S
(/* Name of the PCB. */) c n
() p 2 T () S
(char) k
( *pszPCBName;) p n
() N
() S 2 T () S
(/* Current option/long option. */) c n
() p 2 T () S
(int) k
( opt, optidx;) p n
() N
() S 2 T () S
(/* Set default options. */) c n
() p 2 T (clas       = PCB_APPLICATION;) N
() S 2 T (pszPCBName = ) S
(NULL) K
(;) p n
() N
() S 2 T () S
(/* Reinit getopt. */) c n
() p 2 T (optind = 1;) N
() N
() S 2 T () S
(/* Process options. */) c n
() p 2 T () S
(while) K
(\(1\) {) p n
() S 2 T () S 4 T () S
(/* Usage message. */) c n
() p 2 T () S 4 T () S
(char) k
( *usage = ") p
(Usage: mkpcb [-cnh] [-c|--class \(app|application\)|\(system|sys\)] [--help] [-n|--name <pr) str n
(oc-name>] <image-name> <priority>\\n) S
(";) p n
() N
() S 2 T () S 4 T () S
(/* The long options we take. */) c n
() p 2 T () S 4 T () S
(static) K
( ) p
(struct) k
( option opts[] = {) p n
() S 2 T () S 4 T () S 6 T () S
(/*class options*/) c n
() p 2 T () S 4 T () S 6 T ({") S
(class) str
(", required_argument, 0, ') p
(c) str
('},) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Misc. options. */) c n
() p 2 T () S 4 T () S 6 T ({") S
(help) str
(", no_argument,       0, ') p
(h) str
('},) p n
() S 2 T () S 4 T () S 6 T ({") S
(name) str
(", required_argument, 0, ') p
(n) str
('},) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Terminating option. */) c n
() p 2 T () S 4 T () S 6 T ({0, 0, 0, 0}) N
() S 2 T () S 4 T (};) N
(pcbcmds.c) (Page 1/16) (Oct 25, 17 18:33) title
border
grestore
(TechOS Sources) rhead
(pcb.c, pcbcmds.c) (27/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2-3) 28
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
() S 2 T () S 4 T () S
(/* Get an option. */) c n
() p 2 T () S 4 T (opt = getopt_long\(argc, argv, ") S
(c:n:h) str
(", opts, &optidx\);) p n
() S 2 T () S 4 T () N
() S 2 T () S 4 T () S
(/* Break if we've processed every option. */) c n
() p 2 T () S 4 T () S
(if) K
(\(opt ) p
(\272) sy
( -1\) ) p
(break) K
(;) p n
() N
() S 2 T () S 4 T () S
(/* Handle options. */) c n
() p 2 T () S 4 T () S
(switch) K
(\(opt\) {) p n
() S 2 T () S 4 T () S
(case) K
( 0:) p n
() S 2 T () S 4 T () S 6 T () S
(/*) c n
() S 2 T () S 4 T () S 6 T ( * Long-options with corrsponding short-options are) N
() S 2 T () S 4 T () S 6 T ( * handled by the corresponding short option. ) N
() S 2 T () S 4 T () S 6 T ( */) N
() p 2 T () S 4 T () S 6 T () S
(switch) K
(\(optidx\) {) p n
() S 2 T () S 4 T () S 6 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(c) str
(':) p n
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(strcmp\(optarg, ") p
(application) str
("\) ) p
(\272) sy
( 0 ) p
(\332) sy n
() p 2 T () S 4 T () S 6 T (   strcmp\(optarg, ") S
(app) str
("\)         ) p
(\272) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (clas = PCB_APPLICATION;) N
() S 2 T () S 4 T () S 6 T (} ) S
(else) K
( ) p
(if) K
(\(strcmp\(optarg, ") p
(system) str
("\) ) p
(\272) sy
( 0 ) p
(\332) sy n
() p 2 T () S 4 T () S 6 T () S 8 T (  strcmp\(optarg, ") S
(sys) str
("\)    ) p
(\272) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (clas = PCB_SYSTEM;) N
() S 2 T () S 4 T () S 6 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: Invalid PCB class '%s' \(valid classes are 'app'/'application' ) str n
(and 'sys/system'\)\\n) S
(", optarg\);) p n
() N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(h) str
(':) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 0;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(n) str
(':) p n
() S 2 T () S 4 T () S 6 T () S
(/* Free an already set name. */) c n
() p 2 T () S 4 T () S 6 T () S
(if) K
(\(pszPCBName ) p
(\271) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (free\(pszPCBName\);) N
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(/* ) c n
() S 2 T () S 4 T () S 6 T ( * @NOTE) N
() S 2 T () S 4 T () S 6 T ( *) S 10 T (Do we need to duplicate this?) N
() S 2 T () S 4 T () S 6 T ( */) N
() p 2 T () S 4 T () S 6 T (pszPCBName = \() S
(char) k
( *\)strdup\(optarg\);) p n
() S 2 T () S 4 T () S 6 T (assert\(pszPCBName ) S
(\271) sy
( ) p
(NULL) K
(\);) p n
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument.\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T (}) N
() N
() S 2 T () S
(/* Check if we have a priority as the second non-arg option. */) c n
() p 2 T () S
(if) K
(\(argc ) p
(\263) sy
( \(optind + 2\)\){) p n
() S 2 T () S 4 T () S
(/* Priority argument. */) c n
() p 2 T () S 4 T () S
(char) k
( *prarg;) p n
(pcbcmds.c) (Page 2/16) (Oct 25, 17 18:33) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T (prarg = argv[optind + 1];) N
() N
() S 2 T () S 4 T () S
(/* Parse priority. */) c n
() p 2 T () S 4 T () S
(if) K
(\(sscanf\(prarg, ") p
(%d) str
(", &priority\) < 1\) {) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: '%s' is not a valid priority \(must be an integer\)\\n) str
(", prarg\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() S 2 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: Priority not given.\\n) str
("\);) p n
() S 2 T () S 4 T () S
(return) K
( 1;) p n
() S 2 T (}) N
() N
() S 2 T () S
(/* Check the PCB priority is valid. */) c n
() p 2 T () S
(if) K
(\(priority < PCB_MINPRIOR ) p
(\332) sy
( priority > PCB_MAXPRIOR\) {) p n
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: Priority entered is out of bounds \(must be between %d and %d\)\\n) str
(") p n
(, PCB_MINPRIOR, PCB_MAXPRIOR\);) N
() S 2 T () S 4 T () S
(return) K
( 1;) p n
() S 2 T (}) N
() N
() S 2 T () S
(/* Bind the PCB image. */) c n
() p 2 T () S
(char) k
( *pszPCBImage = argv[optind];) p n
() N
() S 2 T () S
(/* Validate that the image referenced exists. */) c n
() p 2 T ({) N
() S 2 T () S 4 T () S
(struct) k
( stat scratch;) p n
() N
() S 2 T () S 4 T () S
(/* Error if there isn't a normal file for the image. */) c n
() p 2 T () S 4 T () S
(if) K
(\(stat\(pszPCBImage, &scratch\) ) p
(\272) sy
( -1\) {) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: No image found for process '%s'\\n) str
(", pszPCBImage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (} ) S
(else) K
( ) p
(if) K
(\() p
(\330) sy
(S_ISREG\(scratch.st_mode\)\) {) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: Invalid image for process '%s'\\n) str
(", pszPCBImage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() S 2 T (}) N
() N
() S 2 T () S
(/* Set the PCB name correctly. */) c n
() p 2 T () S
(if) K
(\(pszPCBName ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T (pszPCBName = pszPCBImage;) N
() S 2 T (}) N
() N
() S 2 T () S
(/* Create the PCB. */) c n
() p 2 T () S
(struct) k
( pcb *madePCB = makepcb\(ostate) p
(\256) sy
(pPCBstat, pszPCBName, pszPCBImage, clas,) p n
( priority\);) N
() S 2 T () S
(if) K
(\(madePCB ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(INTERNAL ERROR: PCB named '%s' created as null.\\n) str
(", pszPCBIma) p n
(ge\);) N
() S 2 T () S 4 T () S
(return) K
( 1;) p n
() S 2 T (}) N
() N
() S 2 T ({) N
() S 2 T () S 4 T () S
(/* Return from insertpcb. */) c n
() p 2 T () S 4 T () S
(enum) k
( pcberror pcbstat;) p n
() N
() S 2 T () S 4 T (pcbstat = insertpcb\(ostate) S
(\256) sy
(pPCBstat, madePCB\);) p n
() N
() S 2 T () S 4 T () S
(switch) K
(\(pcbstat\) {) p n
() S 2 T () S 4 T () S
(case) K
( PCBSUCCESS:) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 0;) p n
() S 2 T () S 4 T () S
(case) K
( PCBINVSUSP:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(INTERNAL ERROR: New PCB %d \(named '%s'\) has invalid suspensio) str n
(n type %d\\n) S
(", madePCB) p
(\256) sy
(id, pszPCBImage, madePCB) p
(\256) sy
(susp\);) p n
(pcbcmds.c) (Page 3/16) (Oct 25, 17 18:33) title
border
grestore
(TechOS Sources) rhead
(pcbcmds.c) (28/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (4-5) 29
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( PCBINVSTAT:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(INTERNAL ERROR: New PCB %d \(named '%s'\) has invalid run state ) str n
(%d\\n) S
(",) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (madePCB) S
(\256) sy
(id, pszPCBImage, madePCB) p
(\256) sy
(status\);) p n
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( PCBRUNNING:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(INTERNAL ERROR: New PCB %d \(named '%s'\) is already running\\n) str
(") p n
(,) N
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (madePCB) S
(\256) sy
(id, pszPCBImage\);) p n
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( PCBINQUEUE:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(INTERNAL ERROR: New PCB %d \(named '%s'\) is already in a queue\\) str n
(n) S
(",) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (madePCB) S
(\256) sy
(id, pszPCBImage\);) p n
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(INTERNAL ERROR: Unknown return %d from attempting to insert new) str n
( PCB %d \(named '%s\)\\n) S
(", pcbstat, madePCB) p
(\256) sy
(id, pszPCBImage\);) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T () S
(return) K
( 1;) p n
() S 2 T (}) N
(}) N
() N
(/* Handle deleting a PCB. */) c n
(/*) N
( * @NOTE) N
( *) S 4 T (This command has been removed from the list of commands, but the) N
( *) S 4 T (function is sticking around in case something we want to do is remove) N
( *) S 4 T (processes that are currently executing.) N
( */) N
(HANDLECOM\(rmpcb\) {) p n
() S 2 T () S
(/* Current option/long option. */) c n
() p 2 T () S
(int) k
( opt, optidx;) p n
() N
() S 2 T () S
(/*The pcb to remove*/) c n
() p 2 T () S
(struct) k
( pcb *pPCB;) p n
() N
() S 2 T () S
(enum) k
( pidopt {) p n
() S 2 T () S 4 T () S
(/* Locate a PCB by name. */) c n
() p 2 T () S 4 T (PID_NAME,) N
() S 2 T () S 4 T () S
(/* Locate a PCB by number. */) c n
() p 2 T () S 4 T (PID_NUM) N
() S 2 T (};) N
() N
() S 2 T () S
(/* Reinit getopt. */) c n
() p 2 T (optind = 1;) N
() N
() S 2 T () S
(/* The default PCB id type. */) c n
() p 2 T () S
(enum) k
( pidopt idtype = PID_NAME;) p n
() S 2 T () S
(while) K
(\(1\) {) p n
() S 2 T () S 4 T () S
(/* Our usage method. */) c n
() p 2 T () S 4 T () S
(char) k
( *usage = ") p
(Usage: rmpcb [name] [-hp] [--help] [--proc name|num] <proc-name>|<proc-id>\\n) str
(";) p n
() S 2 T () S 4 T () S
(/* The long options we take. */) c n
() p 2 T () S 4 T () S
(static) K
( ) p
(struct) k
( option opts[] = {) p n
() S 2 T () S 4 T () S 6 T () S
(/*Mode options*/) c
( ) p n
() S 2 T () S 4 T () S 6 T ({") S
(proc) str
(",  required_argument, 0, ') p
(p) str
('},) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Misc. options. */) c n
() p 2 T () S 4 T () S 6 T ({") S
(help) str
(", no_argument, 0, ') p
(h) str
('},) p n
() N
(pcbcmds.c) (Page 4/16) (Oct 25, 17 18:33) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S 6 T () S
(/* Terminating option. */) c n
() p 2 T () S 4 T () S 6 T ({0, 0, 0, 0}) N
() S 2 T () S 4 T (};) N
() N
() S 2 T () S 4 T () S
(/* Get an option. */) c n
() p 2 T () S 4 T (opt = getopt_long\(argc, argv, ") S
(hp:) str
(", opts, &optidx\);) p n
() S 2 T () S 4 T () S
(/* Break if we've processed every option. */) c n
() p 2 T () S 4 T () S
(if) K
(\(opt ) p
(\272) sy
( -1\) ) p
(break) K
(;) p n
() N
() S 2 T () S 4 T () S
(/* Handle options. */) c n
() p 2 T () S 4 T () S
(switch) K
(\(opt\) {) p n
() S 2 T () S 4 T () S
(case) K
( 0:) p n
() S 2 T () S 4 T () S 6 T () S
(/*) c n
() S 2 T () S 4 T () S 6 T ( * Long options with corresponding short options are) N
() S 2 T () S 4 T () S 6 T ( * handled by their short options.) N
() S 2 T () S 4 T () S 6 T ( */) N
() p 2 T () S 4 T () S 6 T () S
(switch) K
(\(optidx\) {) p n
() S 2 T () S 4 T () S 6 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(h) str
(':) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 0;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(p) str
(':) p n
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(strcmp\(optarg, ") p
(name) str
("\) ) p
(\272) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (idtype = PID_NAME;) N
() S 2 T () S 4 T () S 6 T (} ) S
(else) K
( ) p
(if) K
(\(strcmp\(optarg, ") p
(num) str
("\) ) p
(\272) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (idtype = PID_NUM;) N
() S 2 T () S 4 T () S 6 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: Invalid process ID type '%s'. Valid ID types are 'name' and ) str n
('num'\\n) S
(", optarg\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument.\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) S 6 T () N
() S 2 T (}) N
() N
() S 2 T () S
(/* Grab the PCB. */) c n
() p 2 T () S
(switch) K
(\(idtype\) {) p n
() S 2 T () S
(case) K
( PID_NAME:) p n
() S 2 T () S 4 T () S
(if) K
(\(optind < argc\) {) p n
() S 2 T () S 4 T () S 6 T () S
(char) k
( *pszPCBName = argv[optind];) p n
() N
() S 2 T () S 4 T () S 6 T (pPCB = findpcbname\(ostate) S
(\256) sy
(pPCBstat, pszPCBName\);) p n
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(pPCB ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: No PCB with name '%s'\\n) str
(", pszPCBName\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: Must specify PCB name as argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(case) K
( PID_NUM:) p n
() S 2 T () S 4 T () S
(if) K
(\(optind < argc\) {) p n
(pcbcmds.c) (Page 5/16) (Oct 25, 17 18:33) title
border
grestore
(TechOS Sources) rhead
(pcbcmds.c) (29/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (6-7) 30
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S 6 T () S
(/* PCB ID. */) c n
() p 2 T () S 4 T () S 6 T () S
(int) k
( pcbid;) p n
() S 2 T () S 4 T () S 6 T () S
(/* Tentative PCB ID. */) c n
() p 2 T () S 4 T () S 6 T () S
(char) k
( *pszPCBID;) p n
() N
() S 2 T () S 4 T () S 6 T (pszPCBID = argv[optind];) N
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(sscanf\(pszPCBID, ") p
(%d) str
(", &pcbid\) < 1\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: '%s' is not a valid PCB id \(must be a positive integer\)\\n) str
(", ) p n
(pszPCBID\);) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(pcbid < 0\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: PCB ID %d is not valid \(must be a positive integer\)\\n) str
(", pc) p n
(bid\);) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() N
() S 2 T () S 4 T () S 6 T (pPCB = findpcbnum\(ostate) S
(\256) sy
(pPCBstat, pcbid\);) p n
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(pPCB ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: No PCB with ID %d\\n) str
(", pcbid\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: Must specify PCB ID as argument.\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S
(/* Shouldn't happen. */) c n
() p 2 T () S 4 T (assert\(0\);) N
() S 2 T (}) N
() N
() S 2 T () S
(/* Remove and free the PCB. */) c n
() p 2 T (removepcb\(ostate) S
(\256) sy
(pPCBstat, pPCB\);) p n
() S 2 T (killpcb\(pPCB\);) N
() N
() S 2 T () S
(return) K
( 0;) p n
(}) N
() N
(HANDLECOM\(sspcb\) {) N
() S 2 T () S
(/* Current option & long option. */) c n
() p 2 T () S
(int) k
( opt, optidx;) p n
() N
() S 2 T () S
(/* Reinit getopt. */) c n
() p 2 T (optind = 1;) N
() N
() S 2 T () S
(/* Types of locating PCBs. */) c n
() p 2 T () S
(/*) c n
() S 2 T ( * @NOTE) N
() S 2 T ( * ) S 6 T (Should this enum get put somewhere global?) N
() S 2 T ( */) N
() p 2 T () S
(enum) k
( pidopt {) p n
() S 2 T () S 4 T () S
(/* Locate a PCB by name. */) c n
() p 2 T () S 4 T (PID_NAME,) N
() S 2 T () S 4 T () S
(/* Locate a PCB by number. */) c n
() p 2 T () S 4 T (PID_NUM) N
() S 2 T (};) N
() N
() S 2 T () S
(/* Set sensible default options. */) c n
() p 2 T () S
(enum) k
( pidopt idtype = PID_NAME;) p n
() N
() S 2 T () S
(while) K
(\(1\) {) p n
(pcbcmds.c) (Page 6/16) (Oct 25, 17 18:33) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S
(/* Our usage message. */) c n
() p 2 T () S 4 T () S
(char) k
( *usage = ") p
(Usage: sspcb [name] [-h] [--help] [--proc name|num] <proc-name>|<proc-id>\\n) str
(";) p n
() N
() S 2 T () S 4 T () S
(/* The long options we take. */) c n
() p 2 T () S 4 T () S
(static) K
( ) p
(struct) k
( option opts[] = {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Misc. options. */) c n
() p 2 T () S 4 T () S 6 T ({") S
(help) str
(", no_argument, 0, ') p
(h) str
('},) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/*Mode options*/) c n
() p 2 T () S 4 T () S 6 T ({") S
(proc) str
(", required_argument, 0 , ') p
(p) str
('},) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Terminating option. */) c n
() p 2 T () S 4 T () S 6 T ({0, 0, 0, 0},) N
() S 2 T () S 4 T (};) N
() N
() S 2 T () S 4 T () S
(/* Get an option. */) c n
() p 2 T () S 4 T (opt = getopt_long\(argc, argv, ") S
(hp:) str
(", opts, &optidx\);) p n
() N
() S 2 T () S 4 T () S
(/* Break if we've processed every option. */) c n
() p 2 T () S 4 T () S
(if) K
(\(opt ) p
(\272) sy
( -1\) ) p
(break) K
(;) p n
() N
() S 2 T () S 4 T () S
(/* Handle options. */) c n
() p 2 T () S 4 T () S
(switch) K
(\(opt\) {) p n
() S 2 T () S 4 T () S
(case) K
( 0:) p n
() S 2 T () S 4 T () S 6 T () S
(/* Handle long options. */) c n
() p 2 T () S 4 T () S 6 T () S
(switch) K
(\(optidx\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* ) c n
() S 2 T () S 4 T () S 6 T () S 8 T ( * Long options are handled by their) N
() S 2 T () S 4 T () S 6 T () S 8 T ( * corresponding short option.) N
() S 2 T () S 4 T () S 6 T () S 8 T ( */) N
() p 2 T () S 4 T () S 6 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(h) str
(':) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 0;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(p) str
(':) p n
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(strcmp\(optarg, ") p
(name) str
("\) ) p
(\272) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (idtype = PID_NAME;) N
() S 2 T () S 4 T () S 6 T (} ) S
(else) K
( ) p
(if) K
(\(strcmp\(optarg, ") p
(num) str
("\) ) p
(\272) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (idtype = PID_NUM;) N
() S 2 T () S 4 T () S 6 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: Invalid process ID type '%s'. Valid ID types are 'name' and ) str n
('num'\\n) S
(", optarg\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument.\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T (}) N
() N
() S 2 T ({) N
() S 2 T () S 4 T () S
(/* The PCB we're looking for. */) c n
() p 2 T () S 4 T () S
(struct) k
( pcb *foundPCB;) p n
() N
(pcbcmds.c) (Page 7/16) (Oct 25, 17 18:33) title
border
grestore
(TechOS Sources) rhead
(pcbcmds.c) (30/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (8-9) 31
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S
(/* Grab the PCB. */) c n
() p 2 T () S 4 T () S
(switch) K
(\(idtype\) {) p n
() S 2 T () S 4 T () S
(case) K
( PID_NAME:) p n
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(optind < argc\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(char) k
( *pszPCBName = argv[optind];) p n
() S 2 T () S 4 T () S 6 T () S 8 T (foundPCB = findpcbname\(ostate) S
(\256) sy
(pPCBstat, pszPCBName\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(if) K
(\(foundPCB ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: No PCB with name '%s'\\n) str
(", pszPCBName\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T () S 8 T (}) N
() S 2 T () S 4 T () S 6 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: Must specify PCB name as argument.\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( PID_NUM:) p n
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(optind < argc\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(int) k
( pcbid = atoi\(argv[optind]\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (foundPCB = findpcbnum\(ostate) S
(\256) sy
(pPCBstat, pcbid\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(if) K
(\(foundPCB ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: No PCB with ID '%d'\\n) str
(", pcbid\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T () S 8 T (}) N
() S 2 T () S 4 T () S 6 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: Must specify PCB name as argument.\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T () S
(/* Shouldn't happen. */) c n
() p 2 T () S 4 T () S 6 T (assert\(0\);) N
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T (removepcb\(ostate) S
(\256) sy
(pPCBstat, foundPCB\);) p n
() S 2 T () S 4 T (foundPCB) S
(\256) sy
(susp = PCB_SUSPENDED;) p n
() S 2 T () S 4 T (insertpcb\(ostate) S
(\256) sy
(pPCBstat, foundPCB\);) p n
() S 2 T (}) N
() N
() S 2 T () S
(return) K
( 0;) p n
(}) N
() N
(HANDLECOM\(rspcb\) {) N
() S 2 T () S
(//current option and long option) c n
() p 2 T () S
(int) k
( opt, optidx;) p n
() S 2 T (optind = 1;) N
() N
() S 2 T () S
(enum) k
( pidopt {) p n
() S 2 T () S 4 T () S
(/* Locate a PCB by name. */) c n
() p 2 T () S 4 T (PID_NAME,) N
() S 2 T () S 4 T () S
(/* Locate a PCB by number. */) c n
() p 2 T () S 4 T (PID_NUM) N
() S 2 T (};) N
() N
() S 2 T () S
(enum) k
( pidopt idtype = PID_NAME;) p n
() N
() S 2 T () S
(while) K
(\(1\)) p n
() S 2 T ({) N
() S 2 T () S 4 T () S
(char) k
( *usage = ") p
(Usage: rspcb [name] [-h] [--help] [--proc name|num] <proc-name>|<proc-id>\\n) str
(";) p n
() S 2 T () S 4 T () S
(/* The long options we take. */) c n
() p 2 T () S 4 T () S
(static) K
( ) p
(struct) k
( option opts[] = {) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Misc. options. */) c n
(pcbcmds.c) (Page 8/16) (Oct 25, 17 18:33) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S 6 T ({") S
(help) str
(", no_argument, 0, 0},) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/*Mode options*/) c n
() p 2 T () S 4 T () S 6 T ({") S
(proc) str
(", required_argument, 0 , 0},) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Terminating option. */) c n
() p 2 T () S 4 T () S 6 T ({0, 0, 0, 0},) N
() S 2 T () S 4 T (};) N
() N
() S 2 T () S 4 T () S
(//get an option) c n
() p 2 T () S 4 T (opt = getopt_long\(argc, argv, ") S
(h) str
(", opts, &optidx\);) p n
() N
() S 2 T () S 4 T () S
(//break if we've processed every option) c n
() p 2 T () S 4 T () S
(if) K
(\(opt ) p
(\272) sy
( -1\) ) p
(break) K
(;) p n
() N
() S 2 T () S 4 T () S
(//Handle options) c n
() p 2 T () S 4 T () S
(switch) K
(\(opt\)) p n
() S 2 T () S 4 T ({) N
() S 2 T () S 4 T () S
(case) K
( 0:) p n
() S 2 T () S 4 T () S 6 T () S
(//Long options) c n
() p 2 T () S 4 T () S 6 T () S
(switch) K
(\(optidx\)) p n
() S 2 T () S 4 T () S 6 T ({) N
() S 2 T () S 4 T () S 6 T () S
(case) K
( 0:) p
(//Help) c n
() p 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 0;) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( 1:) p
(//SH_PROC) c n
() p 2 T () S 4 T () S 6 T () S 8 T () S
(if) K
(\(strcmp\(optarg, ") p
(name) str
("\) ) p
(\272) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (idtype = PID_NAME;) N
() S 2 T () S 4 T () S 6 T () S 8 T (}) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(else) K
( ) p
(if) K
(\(strcmp\(optarg, ") p
(num) str
("\) ) p
(\272) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (idtype = PID_NUM;) N
() S 2 T () S 4 T () S 6 T () S 8 T (}) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: Invalid process ID type '%s'. Valid ID types are 'name' a) str n
(nd 'num'\\n) S
(", optarg\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T () S 8 T (}) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(//Short options) c 22 T () N
() p 2 T () S 4 T () S
(case) K
( ') p
(h) str
(':) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 0;) p n
() S 2 T () S 4 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument.\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) S 6 T () N
() N
() S 2 T (}) N
() N
() S 2 T () S
(struct) k
( pcb *foundPCB;) p n
() N
() S 2 T () S
(switch) K
(\(idtype\) {) p n
() S 2 T () S
(case) K
( PID_NAME:) p n
() S 2 T () S 4 T () S
(if) K
(\(optind < argc\) {) p n
() S 2 T () S 4 T () S 6 T () S
(char) k
( *pszPCBName = argv[optind];) p n
(pcbcmds.c) (Page 9/16) (Oct 25, 17 18:33) title
border
grestore
(TechOS Sources) rhead
(pcbcmds.c) (31/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (10-11) 32
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S 6 T (foundPCB = findpcbname\(ostate) S
(\256) sy
(pPCBstat, pszPCBName\);) p n
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(foundPCB ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: No PCB with name '%s'\\n) str
(", pszPCBName\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: Must specify PCB name as argument.\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(case) K
( PID_NUM:) p n
() S 2 T () S 4 T () S
(if) K
(\(optind < argc\) {) p n
() S 2 T () S 4 T () S 6 T () S
(int) k
( pcbid = atoi\(argv[optind]\);) p n
() S 2 T () S 4 T () S 6 T (foundPCB = findpcbnum\(ostate) S
(\256) sy
(pPCBstat, pcbid\);) p n
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(foundPCB ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: No PCB with ID '%d'\\n) str
(", pcbid\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: Must specify PCB name as argument.\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S
(/* Shouldn't happen. */) c n
() p 2 T () S 4 T (assert\(0\);) N
() S 2 T (}) N
() N
() S 2 T (removepcb\(ostate) S
(\256) sy
(pPCBstat, foundPCB\);) p n
() S 2 T (foundPCB) S
(\256) sy
(susp = PCB_FREE;) p n
() S 2 T (insertpcb\(ostate) S
(\256) sy
(pPCBstat, foundPCB\);) p n
() N
() S 2 T () S
(return) K
( 0;) p n
(}) N
() N
(HANDLECOM\(sppcb\) {) N
() N
() S 2 T () S
(//current option and long option) c n
() p 2 T () S
(int) k
( opt, optidx;) p n
() S 2 T (optind = 1;) N
() N
() S 2 T () S
(enum) k
( pidopt {) p n
() S 2 T () S 4 T () S
(/* Locate a PCB by name. */) c n
() p 2 T () S 4 T (PID_NAME,) N
() S 2 T () S 4 T () S
(/* Locate a PCB by number. */) c n
() p 2 T () S 4 T (PID_NUM) N
() S 2 T (};) N
() N
() S 2 T () S
(enum) k
( pidopt idtype = PID_NAME;) p n
() N
() S 2 T () S
(int) k
( priorityN;) p n
() N
() S 2 T () S
(while) K
(\(1\)) p n
() S 2 T ({) N
() S 2 T () S 4 T () S
(char) k
( *usage = ") p
(Usage: rspcb [name] [priority] [-h] [--help] [--proc name|num] <proc-name>|<proc-id>) str n
(\\n) S
(";) p n
() S 2 T () S 4 T () S
(/* The long options we take. */) c n
() p 2 T () S 4 T () S
(static) K
( ) p
(struct) k
( option opts[] = {) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Misc. options. */) c n
() p 2 T () S 4 T () S 6 T ({") S
(help) str
(", no_argument, 0, 0},) p n
() N
(pcbcmds.c) (Page 10/16) (Oct 25, 17 18:33) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S 6 T () S
(/*Mode options*/) c n
() p 2 T () S 4 T () S 6 T ({") S
(proc) str
(", required_argument, 0 , 0},) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Terminating option. */) c n
() p 2 T () S 4 T () S 6 T ({0, 0, 0, 0},) N
() S 2 T () S 4 T (};) N
() N
() S 2 T () S 4 T () S
(//get an option) c n
() p 2 T () S 4 T (opt = getopt_long\(argc, argv, ") S
(h) str
(", opts, &optidx\);) p n
() N
() S 2 T () S 4 T () S
(//break if we've processed every option) c n
() p 2 T () S 4 T () S
(if) K
(\(opt ) p
(\272) sy
( -1\) ) p
(break) K
(;) p n
() N
() S 2 T () S 4 T () S
(//Handle options) c n
() p 2 T () S 4 T () S
(switch) K
(\(opt\)) p n
() S 2 T () S 4 T ({) N
() S 2 T () S 4 T () S
(case) K
( 0:) p n
() S 2 T () S 4 T () S 6 T () S
(//Long options) c n
() p 2 T () S 4 T () S 6 T () S
(switch) K
(\(optidx\)) p n
() S 2 T () S 4 T () S 6 T ({) N
() S 2 T () S 4 T () S 6 T () S
(case) K
( 0:) p
(//Help) c n
() p 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 0;) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( 1:) p
(//SH_PROC) c n
() p 2 T () S 4 T () S 6 T () S 8 T () S
(if) K
(\(strcmp\(optarg, ") p
(name) str
("\) ) p
(\272) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (idtype = PID_NAME;) N
() S 2 T () S 4 T () S 6 T () S 8 T (}) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(else) K
( ) p
(if) K
(\(strcmp\(optarg, ") p
(num) str
("\) ) p
(\272) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (idtype = PID_NUM;) N
() S 2 T () S 4 T () S 6 T () S 8 T (}) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: Invalid process ID type '%s'. Valid ID types are 'name' a) str n
(nd 'num'\\n) S
(", optarg\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T () S 8 T (}) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(//Short options) c 22 T () N
() p 2 T () S 4 T () S
(case) K
( ') p
(h) str
(':) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 0;) p n
() S 2 T () S 4 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument.\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) S 6 T () N
() N
() S 2 T (}) N
() N
() S 2 T () S
(struct) k
( pcb *foundPCB;) p n
() N
() S 2 T () S
(switch) K
(\(idtype\) {) p n
() S 2 T () S
(case) K
( PID_NAME:) p n
() S 2 T () S 4 T () S
(if) K
(\(optind < argc\) {) p n
() S 2 T () S 4 T () S 6 T () S
(char) k
( *pszPCBName = argv[optind];) p n
() S 2 T () S 4 T () S 6 T (foundPCB = findpcbname\(ostate) S
(\256) sy
(pPCBstat, pszPCBName\);) p n
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(foundPCB ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
(pcbcmds.c) (Page 11/16) (Oct 25, 17 18:33) title
border
grestore
(TechOS Sources) rhead
(pcbcmds.c) (32/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (12-13) 33
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: No PCB with name '%s'\\n) str
(", pszPCBName\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: Must specify PCB name as argument.\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(case) K
( PID_NUM:) p n
() S 2 T () S 4 T () S
(if) K
(\(optind < argc\) {) p n
() S 2 T () S 4 T () S 6 T () S
(int) k
( pcbid = atoi\(argv[optind]\);) p n
() S 2 T () S 4 T () S 6 T (foundPCB = findpcbnum\(ostate) S
(\256) sy
(pPCBstat, pcbid\);) p n
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(foundPCB ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: No PCB with ID '%d'\\n) str
(", pcbid\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: Must specify PCB name as argument.\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S
(/* Shouldn't happen. */) c n
() p 2 T () S 4 T (assert\(0\);) N
() S 2 T (}) N
() N
() S 2 T () S
(if) K
(\(argc ) p
(\263) sy
( \(optind + 2\)\){) p n
() S 2 T () S 4 T (priorityN = atoi\(argv[optind + 1]\);) N
() S 2 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: Priority not given\\n) str
("\);) p n
() S 2 T () S 4 T () S
(return) K
( 1;) p n
() S 2 T (}) N
() N
() S 2 T () S
(if) K
(\(priorityN < PCB_MINPRIOR ) p
(\332) sy
( priorityN > PCB_MAXPRIOR\)) p n
() S 2 T ({) N
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Priority entered is out of bounds.\\n) str
("\);) p n
() S 2 T () S 4 T () S
(return) K
( 1;) p n
() S 2 T (}) N
() N
() S 2 T (foundPCB) S
(\256) sy
(priority = priorityN;) p n
() N
() S 2 T () S
(return) K
( 0;) p n
(}) N
() N
(HANDLECOM\(shpcb\) {) N
() S 2 T () S
(/* Mode options. */) c n
() p 2 T () S
(enum) k
( showopt { ) p n
() S 2 T () S 4 T () S
(/* Show a specific PCB. */) c n
() p 2 T () S 4 T (SHOW_PCB,) N
() S 2 T () S 4 T () S
(/* Show a PCB queue. */) c n
() p 2 T () S 4 T (SHOW_QUEUE) N
() S 2 T (};) N
() S 2 T () S
(/* Queue options. */) c n
() p 2 T () S
(enum) k
( queueopt {) p n
() S 2 T () S 4 T () S
(/* Show the ready queues. */) c n
() p 2 T () S 4 T (QU_READY,) N
() S 2 T () S 4 T () S
(/* Show the blocked queues. */) c n
() p 2 T () S 4 T (QU_BLOCKED,) N
() S 2 T () S 4 T () S
(/* Show all the queues. */) c n
() p 2 T () S 4 T (QU_ALL) N
() S 2 T (};) N
() S 2 T () S
(/* Process ID options. */) c n
(pcbcmds.c) (Page 12/16) (Oct 25, 17 18:33) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S
(enum) k
( pidopt {) p n
() S 2 T () S 4 T () S
(/* Locate a PCB by name. */) c n
() p 2 T () S 4 T (PID_NAME,) N
() S 2 T () S 4 T () S
(/* Locate a PCB by number. */) c n
() p 2 T () S 4 T (PID_NUM) N
() S 2 T (};) N
() N
() S 2 T () S
(/* Chosen mode. */) c n
() p 2 T () S
(enum) k
( showopt  mode   = SHOW_QUEUE;) p n
() S 2 T () S
(/* Chosen queue. */) c n
() p 2 T () S
(enum) k
( queueopt queue  = QU_ALL;) p n
() S 2 T () S
(/* Chosen ID method. */) c n
() p 2 T () S
(enum) k
( pidopt   idtype = PID_NAME;) p n
() N
() S 2 T () S
(/* Reinit getopt. */) c n
() p 2 T (optind = 1;) N
() N
() S 2 T () S
(/* Parse CLI args. */) c n
() p 2 T () S
(while) K
(\(1\) {) p n
() S 2 T () S 4 T () S
(/* Enum declaration for long options. */) c n
() p 2 T () S 4 T () S
(enum) k
( shpcbopt {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Help option. */) c n
() p 2 T () S 4 T () S 6 T (SH_HELP = 0,) N
() N
() S 2 T () S 4 T () S 6 T () S
(/* Mode options. */) c n
() p 2 T () S 4 T () S 6 T (SH_MODE,       ) S
(/* Specify the command mode. */) c n
() p 2 T () S 4 T () S 6 T (SH_QUEUE,      ) S
(/* Specify the queue to show. */) c n
() p 2 T () S 4 T () S 6 T (SH_PROC,       ) S
(/* Specify the way to locate a process. */) c n
() p n
() S 2 T () S 4 T (};) N
() N
() S 2 T () S 4 T () S
(/* The current option, and the current long option. */) c n
() p 2 T () S 4 T () S
(int) k
( opt, optidx;) p n
() N
() S 2 T () S 4 T () S
(/* Our usage message. */) c n
() p 2 T () S 4 T () S
(static) K
( ) p
(const) K
( ) p
(char) k
( *usage = ") p
(Usage: shpcb [-h] [--help] [--mode pcb|queue] [--queue ready|block) str n
(ed|all] [--proc name|num] <proc-name>|<proc-id>\\n) S
(";) p n
() N
() N
() S 2 T () S 4 T () S
(/* The long options we take. */) c n
() p 2 T () S 4 T () S
(/* ) c n
() S 2 T () S 4 T ( * :OptHandling) N
() S 2 T () S 4 T ( */) N
() p 2 T () S 4 T () S
(static) K
( ) p
(struct) k
( option opts[] = {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Misc. options. */) c n
() p 2 T () S 4 T () S 6 T ({") S
(help) str
(", no_argument, 0, 0},) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Mode options. */) c n
() p 2 T () S 4 T () S 6 T ({") S
(mode) str
(",  required_argument, 0, 0},) p n
() S 2 T () S 4 T () S 6 T ({") S
(queue) str
(", required_argument, 0, 0},) p n
() S 2 T () S 4 T () S 6 T ({") S
(proc) str
(",  required_argument, 0, 0},) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Terminating argument. */) c n
() p 2 T () S 4 T () S 6 T ({0, 0, 0, 0}) N
() S 2 T () S 4 T (};) N
() N
() S 2 T () S 4 T () S
(/* Get an option. */) c n
() p 2 T () S 4 T (opt = getopt_long\(argc, argv, ") S
(h) str
(", opts, &optidx\);) p n
() S 2 T () S 4 T () S
(/* Break if there are no more options. */) c n
() p 2 T () S 4 T () S
(if) K
(\(opt ) p
(\272) sy
( -1\) ) p
(break) K
(;) p n
() N
() S 2 T () S 4 T () S
(/* Handle options. */) c n
(pcbcmds.c) (Page 13/16) (Oct 25, 17 18:33) title
border
grestore
(TechOS Sources) rhead
(pcbcmds.c) (33/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (14-15) 34
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S
(/* :OptHandling */) c n
() p 2 T () S 4 T () S
(switch) K
(\(opt\) {) p n
() S 2 T () S 4 T () S
(case) K
( 0:) p n
() S 2 T () S 4 T () S 6 T () S
(/* Handle long options. */) c n
() p 2 T () S 4 T () S 6 T () S
(switch) K
(\(optidx\) {) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( SH_HELP:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 0;) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( SH_MODE:) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(if) K
(\(strcmp\(optarg, ") p
(pcb) str
("\) ) p
(\272) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (mode = SHOW_PCB;) N
() S 2 T () S 4 T () S 6 T () S 8 T (} ) S
(else) K
( ) p
(if) K
(\(strcmp\(optarg, ") p
(queue) str
("\) ) p
(\272) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (mode = SHOW_QUEUE;) N
() S 2 T () S 4 T () S 6 T () S 8 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: Invalid mode '%s'. Valid modes are 'pcb' and 'queue'\\n) str
(") p n
(, optarg\);) N
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T () S 8 T (}) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( SH_QUEUE:) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(if) K
(\(strcmp\(optarg, ") p
(ready) str
("\) ) p
(\272) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (queue = QU_READY;) N
() S 2 T () S 4 T () S 6 T () S 8 T (} ) S
(else) K
( ) p
(if) K
(\(strcmp\(optarg, ") p
(blocked) str
("\) ) p
(\272) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (queue = QU_BLOCKED;) N
() S 2 T () S 4 T () S 6 T () S 8 T (} ) S
(else) K
( ) p
(if) K
(\(strcmp\(optarg, ") p
(all) str
("\) ) p
(\272) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (queue = QU_ALL;) N
() S 2 T () S 4 T () S 6 T () S 8 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: Invalid queue '%s'. Valid queues are 'ready', 'blocked' a) str n
(nd 'all'\\n) S
(", optarg\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T () S 8 T (}) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( SH_PROC:) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(if) K
(\(strcmp\(optarg, ") p
(name) str
("\) ) p
(\272) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (idtype = PID_NAME;) N
() S 2 T () S 4 T () S 6 T () S 8 T (} ) S
(else) K
( ) p
(if) K
(\(strcmp\(optarg, ") p
(num) str
("\) ) p
(\272) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (idtype = PID_NUM;) N
() S 2 T () S 4 T () S 6 T () S 8 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: Invalid process ID type '%s'. Valid ID types are 'name' a) str n
(nd 'num'\\n) S
(", optarg\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T () S 8 T (}) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(h) str
(':) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 0;) p n
() S 2 T () S 4 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T (}) N
() S 2 T (}) N
() N
() S 2 T () S
(switch) K
(\(mode\) {) p n
() S 2 T () S
(case) K
( SHOW_PCB:) p n
() S 2 T () S 4 T ({) N
() S 2 T () S 4 T () S 6 T () S
(/* The PCB to show. */) c n
(pcbcmds.c) (Page 14/16) (Oct 25, 17 18:33) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S 6 T () S
(struct) k
( pcb *pPCB;) p n
() N
() S 2 T () S 4 T () S 6 T () S
(switch) K
(\(idtype\) {) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( PID_NAME:) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(if) K
(\(optind < argc\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T () S
(char) k
( *pszPCBName = argv[optind];) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (pPCB = findpcbname\(ostate) S
(\256) sy
(pPCBstat, pszPCBName\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T () S
(if) K
(\(pPCB ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T () S 12 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: No PCB with name '%s'\\n) str
(", pszPCBName\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T () S 12 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (}) N
() S 2 T () S 4 T () S 6 T () S 8 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: Must specify PCB name as argument.\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T () S 8 T (}) N
() N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( PID_NUM:) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(if) K
(\(optind < argc\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T () S
(int) k
( pcbid = atoi\(argv[optind]\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (pPCB = findpcbnum\(ostate) S
(\256) sy
(pPCBstat, pcbid\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T () S
(if) K
(\(pPCB ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T () S 12 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: No PCB with ID '%d'\\n) str
(", pcbid\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T () S 12 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (}) N
() S 2 T () S 4 T () S 6 T () S 8 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: Must specify PCB name as argument.\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T () S 8 T (}) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* Shouldn't happen. */) c n
() p 2 T () S 4 T () S 6 T () S 8 T (assert\(0\);) N
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T (printpcb\(pPCB, ostate\);) N
() S 2 T () S 4 T (}) N
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(case) K
( SHOW_QUEUE:) p n
() S 2 T () S 4 T () S
(switch) K
(\(queue\) {) p n
() S 2 T () S 4 T () S
(case) K
( QU_READY:) p n
() S 2 T () S 4 T () S 6 T ({) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* No. of processes. */) c n
() p 2 T () S 4 T () S 6 T () S 8 T () S
(int) k
( nprocs;) p n
() N
() S 2 T () S 4 T () S 6 T () S 8 T (nprocs = 0                                +) N
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (ostate) S
(\256) sy
(pPCBstat) p
(\256) sy
(pqReady) p
(\256) sy
(nprocs +) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (ostate) S
(\256) sy
(pPCBstat) p
(\256) sy
(pqsReady) p
(\256) sy
(nprocs;) p n
() N
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(No. of Ready Processes: %d\\n) str
(", nprocs\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (foreachpcb\(ostate) S
(\256) sy
(pPCBstat) p
(\256) sy
(pqReady,) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T () S 12 T (&printpcb, ostate\);) N
() S 2 T () S 4 T () S 6 T () S 8 T (foreachpcb\(ostate) S
(\256) sy
(pPCBstat) p
(\256) sy
(pqsReady,) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T () S 12 T (&printpcb, ostate\);) N
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( QU_BLOCKED:) p n
() S 2 T () S 4 T () S 6 T ({) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* No. of processes. */) c n
() p 2 T () S 4 T () S 6 T () S 8 T () S
(int) k
( nprocs;) p n
() N
() S 2 T () S 4 T () S 6 T () S 8 T (nprocs = 0                                  +) N
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (ostate) S
(\256) sy
(pPCBstat) p
(\256) sy
(pqBlocked) p
(\256) sy
(nprocs +) p n
(pcbcmds.c) (Page 15/16) (Oct 25, 17 18:33) title
border
grestore
(TechOS Sources) rhead
(pcbcmds.c) (34/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (16,1) 35
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S 6 T () S 8 T () S 10 T (ostate) S
(\256) sy
(pPCBstat) p
(\256) sy
(pqsBlocked) p
(\256) sy
(nprocs;) p n
() N
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(No. of Blocked Processes: %d\\n) str
(", nprocs\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (foreachpcb\(ostate) S
(\256) sy
(pPCBstat) p
(\256) sy
(pqBlocked,) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T () S 12 T (&printpcb, ostate\);) N
() S 2 T () S 4 T () S 6 T () S 8 T (foreachpcb\(ostate) S
(\256) sy
(pPCBstat) p
(\256) sy
(pqsBlocked,) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T () S 12 T (&printpcb, ostate\);) N
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( QU_ALL:) p n
() S 2 T () S 4 T () S 6 T ({) N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* No. of processes. */) c n
() p 2 T () S 4 T () S 6 T () S 8 T () S
(int) k
( nprocs;) p n
() S 2 T () S 4 T () S 6 T () S 8 T (nprocs = 0                                   + ) N
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (ostate) S
(\256) sy
(pPCBstat) p
(\256) sy
(pqReady) p
(\256) sy
(nprocs    +) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (ostate) S
(\256) sy
(pPCBstat) p
(\256) sy
(pqBlocked) p
(\256) sy
(nprocs  +) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (ostate) S
(\256) sy
(pPCBstat) p
(\256) sy
(pqsReady) p
(\256) sy
(nprocs   + ) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T (ostate) S
(\256) sy
(pPCBstat) p
(\256) sy
(pqsBlocked) p
(\256) sy
(nprocs;) p n
() N
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(No. of Processes: %d\\n) str
(", nprocs\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\nReady Processes:\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (foreachpcb\(ostate) S
(\256) sy
(pPCBstat) p
(\256) sy
(pqReady,) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T () S 12 T (&printpcb, ostate\);) N
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\nBlocked Processes:\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (foreachpcb\(ostate) S
(\256) sy
(pPCBstat) p
(\256) sy
(pqBlocked,) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T () S 12 T (&printpcb, ostate\);) N
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\nSuspended Ready Processes:\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (foreachpcb\(ostate) S
(\256) sy
(pPCBstat) p
(\256) sy
(pqsReady,) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T () S 12 T (&printpcb, ostate\);) N
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\nSuspended Suspended Processes:\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (foreachpcb\(ostate) S
(\256) sy
(pPCBstat) p
(\256) sy
(pqsBlocked,) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S 10 T () S 12 T (&printpcb, ostate\);) N
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T () S
(/* Shouldn't happen. */) c n
() p 2 T () S 4 T () S 6 T (assert\(0\);) N
() S 2 T () S 4 T (}) N
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S
(/* Shouldn't happen. */) c n
() p 2 T () S 4 T (assert\(0\);) N
() S 2 T (}) N
() S 2 T () S
(return) K
( 0;) p n
(}) N
(pcbcmds.c) (Page 16/16) (Oct 25, 17 18:33) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#include) K
( <assert.h>) p n
(#include) K
( <stdlib.h>) p n
() N
(#include) K
( ") p
(pcb.h) str
(") p n
(#include) K
( ") p
(pcbinternals.h) str
(") p n
() N
(/* Allocate/initialize normal \(QT_NORMAL\) PCB queue. */) c n
(struct) k
( pcbqueue *makepcbqueue\(\) {) p n
() S 2 T () S
(return) K
( maketypedpcbqueue\(QT_NORMAL\);) p n
(}) N
() N
(/* Allocate/initialize PCB queue of a specific type. */) c n
(struct) k
( pcbqueue *maketypedpcbqueue\() p
(enum) k
( queuetype type\) {) p n
() S 2 T () S
(switch) K
(\(type\) {) p n
() S 2 T () S
(case) K
( QT_NORMAL:) p n
() S 2 T () S 4 T ({) N
() S 2 T () S 4 T () S 6 T () S
(/* Allocate for the queue, and fail if that does. */) c n
() p 2 T () S 4 T () S 6 T () S
(struct) k
( pcbqueue *pqQueue = malloc\() p
(sizeof) K
(\() p
(struct) k
( pcbqueue\)\);) p n
() S 2 T () S 4 T () S 6 T (assert\(pqQueue ) S
(\271) sy
( ) p
(NULL) K
(\);) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Initialize the queue. */) c n
() p 2 T () S 4 T () S 6 T (pqQueue) S
(\256) sy
(type   = type;) p n
() S 2 T () S 4 T () S 6 T (pqQueue) S
(\256) sy
(nprocs = 0;) p n
() S 2 T () S 4 T () S 6 T (pqQueue) S
(\256) sy
(pHead  = ) p
(NULL) K
(;) p n
() N
() S 2 T () S 4 T () S 6 T () S
(return) K
( pqQueue;) p n
() S 2 T () S 4 T (}) N
() S 2 T () S
(case) K
( QT_PRIORITY:) p n
() S 2 T () S 4 T ({) N
() S 2 T () S 4 T () S 6 T () S
(/* Loop idx for queue init. */) c n
() p 2 T () S 4 T () S 6 T () S
(int) k
( i;) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Allocate for the queue, and fail if that does. */) c n
() p 2 T () S 4 T () S 6 T () S
(struct) k
( pcbqueueprior *pqrQueue = malloc\() p
(sizeof) K
(\() p
(struct) k
( pcbqueueprior\)\);) p n
() S 2 T () S 4 T () S 6 T (assert\(pqrQueue ) S
(\271) sy
( ) p
(NULL) K
(\);) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Initialize the queue. */) c n
() p 2 T () S 4 T () S 6 T (pqrQueue) S
(\256) sy
(type   = type;) p n
() S 2 T () S 4 T () S 6 T (pqrQueue) S
(\256) sy
(nprocs = 0;) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Set up the the list of queues. */) c n
() p 2 T () S 4 T () S 6 T (pqrQueue) S
(\256) sy
(apqQueues = calloc\(PCB_MAXPRIOR + 1, ) p
(sizeof) K
(\() p
(struct) k
( pcbqueue\)\);) p n
() S 2 T () S 4 T () S 6 T (assert\(pqrQueue) S
(\256) sy
(apqQueues ) p
(\271) sy
( ) p
(NULL) K
(\);) p n
() S 2 T () S 4 T () S 6 T () S
(for) K
(\(i = 0; i ) p
(\243) sy
( PCB_MAXPRIOR; i++\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* Initialize each queue. */) c n
() p 2 T () S 4 T () S 6 T () S 8 T (pqrQueue) S
(\256) sy
(apqQueues[i] = makepcbqueue\(\);) p n
() S 2 T () S 4 T () S 6 T (}) N
() N
() S 2 T () S 4 T () S 6 T () S
(return) K
( \() p
(struct) k
( pcbqueue *\)pqrQueue;) p n
() S 2 T () S 4 T (}) N
() S 2 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S
(/* Shouldn't happen. */) c n
() p 2 T () S 4 T (assert\(0\);) N
() S 2 T (}) N
(}) N
() N
(/* Deinitialize/deallocate PCB queue. */) c n
(void) k
( killpcbqueue\() p
(struct) k
( pcbqueue *pqQueue\) {) p n
() S 2 T () S
(switch) K
(\(pqQueue) p
(\256) sy
(type\) {) p n
() S 2 T () S
(case) K
( QT_NORMAL:) p n
() S 2 T () S 4 T () S
(/* PCBs in queue. Kill them. */) c n
() p 2 T () S 4 T () S
(if) K
(\(pqQueue) p
(\256) sy
(pHead ) p
(\271) sy
( ) p
(NULL) K
(\) {) p n
(pcbinternals.c) (Page 1/4) (Nov 03, 17 15:42) title
border
grestore
(TechOS Sources) rhead
(pcbcmds.c, pcbinternals.c) (35/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2-3) 36
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S 6 T () S
(/* The current PCB to deal with. */) c n
() p 2 T () S 4 T () S 6 T () S
(struct) k
( pcb *pPCB;) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Initialize it. */) c n
() p 2 T () S 4 T () S 6 T (pPCB = pqQueue) S
(\256) sy
(pHead;) p n
() S 2 T () S 4 T () S 6 T () S
(/* Break queue linkage. */) c n
() p 2 T () S 4 T () S 6 T (pPCB) S
(\256) sy
(pPrev) p
(\256) sy
(pNext = ) p
(NULL) K
(;) p n
() N
() S 2 T () S 4 T () S 6 T () S
(do) K
( {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* Previous PCB. */) c n
() p 2 T () S 4 T () S 6 T () S 8 T () S
(struct) k
( pcb *tmp;) p n
() N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* Advance queue. */) c n
() p 2 T () S 4 T () S 6 T () S 8 T (tmp  = pPCB;) N
() S 2 T () S 4 T () S 6 T () S 8 T (pPCB = pPCB) S
(\256) sy
(pNext;) p n
() N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* Free PCB. */) c n
() p 2 T () S 4 T () S 6 T () S 8 T (free\(tmp\);) N
() S 2 T () S 4 T () S 6 T (} ) S
(while) K
(\(pPCB ) p
(\271) sy
( ) p
(NULL) K
(\);) p n
() S 2 T () S 4 T (}) N
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(case) K
( QT_PRIORITY:) p n
() S 2 T () S 4 T ({) N
() S 2 T () S 4 T () S 6 T () S
(/* Queue loop idx. */) c n
() p 2 T () S 4 T () S 6 T () S
(int) k
( i;) p n
() S 2 T () S 4 T () S 6 T () S
(/* Cast queue. */) c n
() p 2 T () S 4 T () S 6 T () S
(struct) k
( pcbqueueprior *pqrQueue;) p n
() N
() S 2 T () S 4 T () S 6 T (pqrQueue = \() S
(struct) k
( pcbqueueprior *\)pqQueue;) p n
() S 2 T () S 4 T () S 6 T () S
(/* Free each queue. */) c n
() p 2 T () S 4 T () S 6 T () S
(for) K
(\(i = 0; i ) p
(\243) sy
( PCB_MAXPRIOR; i++\)) p n
() S 2 T () S 4 T () S 6 T () S 8 T (killpcbqueue\(pqrQueue) S
(\256) sy
(apqQueues[i]\);) p n
() S 2 T () S 4 T () S 6 T () S
(/* Free array. */) c n
() p 2 T () S 4 T () S 6 T (free\(pqrQueue) S
(\256) sy
(apqQueues\);) p n
() S 2 T () S 4 T (}) N
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S
(/* Shouldn't happen. */) c n
() p 2 T () S 4 T (assert\(0\);) N
() S 2 T (}) N
() N
() S 2 T () S
(/* Free the queue. */) c n
() p 2 T (free\(pqQueue\);) N
(}) N
() N
(/* Do something for every PCB in a queue. */) c n
(void) k
( foreachpcb\() p
(struct) k
( pcbqueue *pqQueue, ) p
(void) k
(\(*pcbitr\)\() p
(struct) k
( pcb *, ) p
(void) k
( *\), ) p
(v) k n
(oid) S
( *arg\) {) p n
() S 2 T () S
(switch) K
(\(pqQueue) p
(\256) sy
(type\) {) p n
() S 2 T () S
(case) K
( QT_NORMAL:) p n
() S 2 T () S 4 T ({) N
() S 2 T () S 4 T () S 6 T () S
(/* ID of the initial PCB. */) c n
() p 2 T () S 4 T () S 6 T () S
(int) k
( fid;) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Current PCB. */) c n
() p 2 T () S 4 T () S 6 T () S
(struct) k
( pcb *pPCB;) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Skip empty queues. */) c n
() p 2 T () S 4 T () S 6 T () S
(if) K
(\(pqQueue) p
(\256) sy
(pHead ) p
(\272) sy
( ) p
(NULL) K
(\) ) p
(return) K
(;) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Initialize iteration. */) c n
() p 2 T () S 4 T () S 6 T (pPCB = pqQueue) S
(\256) sy
(pHead;) p n
(pcbinternals.c) (Page 2/4) (Nov 03, 17 15:42) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S 6 T (fid  = pPCB) S
(\256) sy
(id;) p n
() N
() S 2 T () S 4 T () S 6 T () S
(do) K
( {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (pcbitr\(pPCB, arg\);) N
() N
() S 2 T () S 4 T () S 6 T () S 8 T (pPCB = pPCB) S
(\256) sy
(pNext;) p n
() S 2 T () S 4 T () S 6 T (} ) S
(while) K
(\(pPCB) p
(\256) sy
(id ) p
(\271) sy
( fid\);) p n
() S 2 T () S 4 T (}) N
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(case) K
( QT_PRIORITY:) p n
() S 2 T () S 4 T ({) N
() S 2 T () S 4 T () S 6 T () S
(/* Loop idx for queues. */) c n
() p 2 T () S 4 T () S 6 T () S
(int) k
( i;) p n
() S 2 T () S 4 T () S 6 T () S
(/* Cast queue. */) c n
() p 2 T () S 4 T () S 6 T () S
(struct) k
( pcbqueueprior *pqrQueue;) p n
() N
() S 2 T () S 4 T () S 6 T (pqrQueue = \() S
(struct) k
( pcbqueueprior *\)pqQueue;) p n
() S 2 T () S 4 T () S 6 T () S
(for) K
(\(i = PCB_MAXPRIOR; i ) p
(\263) sy
( 0; i--\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (foreachpcb\(pqrQueue) S
(\256) sy
(apqQueues[i], pcbitr, arg\);) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T (}) N
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S
(/* Shouldn't happen. */) c n
() p 2 T () S 4 T (assert\(0\);) N
() S 2 T (}) N
(}) N
() N
(/* Remove the first PCB in a queue. */) c n
(struct) k
( pcb *poppcb\() p
(struct) k
( pcbstate *pState, ) p
(struct) k
( pcbqueue *pqQueue\) {) p n
() S 2 T () S
(switch) K
(\(pqQueue) p
(\256) sy
(type\) {) p n
() S 2 T () S
(case) K
( QT_NORMAL:) p n
() S 2 T () S 4 T ({) N
() S 2 T () S 4 T () S 6 T () S
(/* The removed PCB. */) c n
() p 2 T () S 4 T () S 6 T () S
(struct) k
( pcb *pPCB;) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Don't remove NULL PCBs. */) c n
() p 2 T () S 4 T () S 6 T () S
(if) K
(\(pqQueue) p
(\256) sy
(pHead ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( ) p
(NULL) K
(;) p n
() S 2 T () S 4 T () S 6 T (}) N
() N
() S 2 T () S 4 T () S 6 T () S
(/* Remove the head PCB. */) c n
() p 2 T () S 4 T () S 6 T (pPCB = pqQueue) S
(\256) sy
(pHead;) p n
() S 2 T () S 4 T () S 6 T (removepcb\(pState, pPCB\);) N
() N
() S 2 T () S 4 T () S 6 T () S
(return) K
( pPCB;) p n
() S 2 T () S 4 T (}) N
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(case) K
( QT_PRIORITY:) p n
() S 2 T () S 4 T ({) N
() S 2 T () S 4 T () S 6 T () S
(/* The cast queue. */) c n
() p 2 T () S 4 T () S 6 T () S
(struct) k
( pcbqueueprior *pqrQueue;) p n
() S 2 T () S 4 T () S 6 T () S
(/* The loop index. */) c n
() p 2 T () S 4 T () S 6 T () S
(int) k
( i;) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Cast the queue. */) c n
() p 2 T () S 4 T () S 6 T (pqrQueue = \() S
(struct) k
( pcbqueueprior *\)pqQueue;) p n
() S 2 T () S 4 T () S 6 T () S
(/*) c n
() S 2 T () S 4 T () S 6 T ( * @NOTE) N
() S 2 T () S 4 T () S 6 T ( * ) S 10 T (Which way did PCB priorities go again?) N
() S 2 T () S 4 T () S 6 T ( */) N
() p 2 T () S 4 T () S 6 T () S
(for) K
(\(i = PCB_MAXPRIOR; i ) p
(\263) sy
( 0; i--\) {) p n
(pcbinternals.c) (Page 3/4) (Nov 03, 17 15:42) title
border
grestore
(TechOS Sources) rhead
(pcbinternals.c) (36/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (4,1) 37
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S 6 T () S 8 T () S
(/* The PCB to hand back. */) c n
() p 2 T () S 4 T () S 6 T () S 8 T () S
(struct) k
( pcb *pPCB;) p n
() N
() S 2 T () S 4 T () S 6 T () S 8 T (pPCB = poppcb\(pState, pqrQueue) S
(\256) sy
(apqQueues[i]\);) p n
() N
() S 2 T () S 4 T () S 6 T () S 8 T () S
(if) K
(\(pPCB ) p
(\271) sy
( ) p
(NULL) K
(\) ) p
(return) K
( pPCB;) p n
() S 2 T () S 4 T () S 6 T (}) N
() N
() S 2 T () S 4 T () S 6 T () S
(/* We didn't find a PCB. */) c n
() p 2 T () S 4 T () S 6 T () S
(return) K
( ) p
(NULL) K
(;) p n
() S 2 T () S 4 T (}) N
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S
(/* Shouldn't happen. */) c n
() p 2 T () S 4 T (assert\(0\);) N
() S 2 T (}) N
(}) N
() N
(/* Allocate/initialize PCB state. */) c n
(struct) k
( pcbstate *makepcbstate\(\) {) p n
() S 2 T () S
(/* Allocate the state, and fail if allocation fails. */) c n
() p 2 T () S
(struct) k
( pcbstate *pState = malloc\() p
(sizeof) K
(\() p
(struct) k
( pcbstate\)\);) p n
() S 2 T (assert\(pState ) S
(\271) sy
( ) p
(NULL) K
(\);) p n
() N
() S 2 T () S
(/* Setup name table. */) c n
() p 2 T (pState) S
(\256) sy
(ptPCBNames = makeinterntab\(\);) p n
() S 2 T () S
(/* Setup image table. */) c n
() p 2 T (pState) S
(\256) sy
(ptPCBImages = makeinterntab\(\);) p n
() S 2 T () S
(/* Initialize proc. ids. */) c n
() p 2 T (pState) S
(\256) sy
(nProcid    = 1;) p n
() N
() S 2 T () S
(/* Setup queues. */) c n
() p 2 T (pState) S
(\256) sy
(pqReady    = maketypedpcbqueue\(QT_PRIORITY\);) p n
() S 2 T (pState) S
(\256) sy
(pqBlocked  = makepcbqueue\(\);) p n
() S 2 T (pState) S
(\256) sy
(pqsReady   = maketypedpcbqueue\(QT_PRIORITY\);) p n
() S 2 T (pState) S
(\256) sy
(pqsBlocked = makepcbqueue\(\);) p n
() N
() S 2 T () S
(return) K
( pState;) p n
(}) N
() N
(/* Deinitialize/deallocate PCB state. */) c n
(void) k
( killpcbstate\() p
(struct) k
( pcbstate *pState\) {) p n
() S 2 T () S
(/* Free associated queues. */) c n
() p 2 T (killpcbqueue\(pState) S
(\256) sy
(pqReady\);) p n
() S 2 T (killpcbqueue\(pState) S
(\256) sy
(pqBlocked\);) p n
() S 2 T (killpcbqueue\(pState) S
(\256) sy
(pqsReady\);) p n
() S 2 T (killpcbqueue\(pState) S
(\256) sy
(pqsBlocked\);) p n
() N
() S 2 T () S
(/* Free interned names. */) c n
() p 2 T (killinterntab\(pState) S
(\256) sy
(ptPCBNames\);) p n
() N
() S 2 T () S
(/* Free state. */) c n
() p 2 T (free\(pState\);) N
(}) N
() N
(pcbinternals.c) (Page 4/4) (Nov 03, 17 15:42) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#include) K
( <stdio.h>) p n
() N
(#include) K
( ") p
(procexecute.h) str
(") p n
() N
(/* Execute an image. */) c n
(int) k
( executeimage\() p
(FILE) k
( *fImage, ) p
(int) k
( offset\) {) p n
() S 2 T () S
(/* The current character. */) c n
() p 2 T () S
(int) k
( c;) p n
() S 2 T () S
(/* The counter for positions. */) c n
() p 2 T () S
(int) k
( counter = offset;) p n
() N
() S 2 T () S
(/* The interrupt character. */) c n
() p 2 T () S
(char) k
( ch = ') p
(!) str
(';) p n
() N
() S 2 T () S
(/* Go to the right offset. */) c n
() p 2 T (fseek\(fImage, offset, SEEK_SET\);) N
() S 2 T () S
(/* Get the character. */) c n
() p 2 T (c = fgetc\(fImage\);) N
() S 2 T () S
(/* Execute until an interrupt happens. */) c n
() p 2 T () S
(while) K
( \(c ) p
(\271) sy
( EOF ) p
(\331) sy
( c - 5 ) p
(\271) sy
( \() p
(int) k
(\)ch\) {) p n
() S 2 T () S 4 T () S
(/* Increase position. */) c n
() p 2 T () S 4 T (counter++;) N
() N
() S 2 T () S 4 T () S
(/* Get a new character. */) c n
() p 2 T () S 4 T (c = fgetc\(fImage\);) N
() S 2 T (}) N
() N
() S 2 T () S
(if) K
( \(c ) p
(\272) sy
( EOF\) {) p n
() S 2 T () S 4 T () S
(return) K
( 0;) p n
() S 2 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S
(/* Give back the offset so that we can continue it later. */) c n
() p 2 T () S 4 T () S
(return) K
( counter;) p n
() S 2 T (}) N
(}) N
(procexecute.c) (Page 1/1) (Oct 25, 17 15:24) title
border
grestore
(TechOS Sources) rhead
(pcbinternals.c, procexecute.c) (37/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 38
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#include) K
( <errno.h>) p n
(#include) K
( <stdlib.h>) p n
(#include) K
( <stdio.h>) p n
(#include) K
( <string.h>) p n
() N
(#include) K
( <getopt.h>) p n
() N
(#include) K
( ") p
(osstate.h) str
(") p n
(#include) K
( ") p
(command.h) str
(") p n
(#include) K
( ") p
(scriptcmds.h) str
(") p n
() N
(HANDLECOM\(script\) {) N
() S 2 T () S
(/* Reinit getopt. */) c n
() p 2 T (optind = 1;) N
() N
() S 2 T () S
(while) K
(\(1\) {) p n
() S 2 T () S 4 T () S
(/* Enum declaration for long options. */) c n
() p 2 T () S 4 T () S
(enum) k
( scriptopt {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Help option. */) c n
() p 2 T () S 4 T () S 6 T (SO_HELP = 0,) N
() S 2 T () S 4 T (};) N
() N
() S 2 T () S 4 T () S
(/* The current option, and the current long option. */) c n
() p 2 T () S 4 T () S
(int) k
( opt, optidx;) p n
() N
() S 2 T () S 4 T () S
(/* Our usage message. */) c n
() p 2 T () S 4 T () S
(char) k
( *usage = ") p
(Usage: script [-h] [--help] <file-name>) str
(";) p n
() N
() S 2 T () S 4 T () S
(/* The long options we take. */) c n
() p 2 T () S 4 T () S
(static) K
( ) p
(struct) k
( option opts[] = {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Misc. options. */) c n
() p 2 T () S 4 T () S 6 T ({") S
(help) str
(", no_argument, 0, ') p
(h) str
('},) p n
() S 2 T () S 4 T () S 6 T () N
() S 2 T () S 4 T () S 6 T () S
(/* Terminating option. */) c n
() p 2 T () S 4 T () S 6 T ({0, 0, 0, 0}) N
() S 2 T () S 4 T (};) N
() N
() S 2 T () S 4 T () S
(/* Get an option. */) c n
() p 2 T () S 4 T (opt = getopt_long\(argc, argv, ") S
(h) str
(", opts, &optidx\);) p n
() S 2 T () S 4 T () S
(/* Break if we've processed everything. */) c n
() p 2 T () S 4 T () S
(if) K
(\(opt ) p
(\272) sy
( -1\) ) p
(break) K
(;) p n
() N
() S 2 T () S 4 T () S
(/* Handle options. */) c n
() p 2 T () S 4 T () S
(switch) K
(\(opt\) {) p n
() S 2 T () S 4 T () S
(case) K
( 0:) p n
() S 2 T () S 4 T () S 6 T () S
(/* ) c n
() S 2 T () S 4 T () S 6 T ( * We picked a long option, but they are handled by) N
() S 2 T () S 4 T () S 6 T ( * their short options.) N
() S 2 T () S 4 T () S 6 T ( */) N
() p 2 T () S 4 T () S 6 T () S
(switch) K
(\(optidx\) {) p n
() S 2 T () S 4 T () S 6 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(h) str
(':) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
(scriptcmds.c) (Page 1/2) (Nov 07, 17 15:58) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() N
() S 2 T () S 4 T (}) N
() S 2 T (}) N
() N
() S 2 T () S
(/* The name of the file. */) c n
() p 2 T () S
(char) k
( *fname;) p n
() S 2 T () S
(/* The file descriptor of the file. */) c n
() p 2 T () S
(FILE) k
( *script;) p n
() N
() S 2 T (fname = argv[optind];) N
() S 2 T () N
() S 2 T (script = fopen\(fname, ") S
(r) str
("\);) p n
() S 2 T () S
(if) K
(\(script ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S
(/* Some error with opening the file. */) c n
() p 2 T () S 4 T () S
(char) k
( *errmsg = strerror\(errno\);) p n
() N
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Couldn't open file '%s' because '%s'\\n) str
(", fname, errmsg\)) p n
(;) N
() S 2 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S
(/* Enclose I/O variables in their own scope. */) c n
() p 2 T () S 4 T () S
(/* Variables for line input. */) c n
() p 2 T () S 4 T (size_t  lread = 0;) N
() S 2 T () S 4 T (size_t  lsize = 0;) N
() S 2 T () S 4 T () S
(char) k
(   *line  = ) p
(NULL) K
(;) p n
() S 2 T () S 4 T () S
(/* Loop until we don't read anything. */) c n
() p 2 T () S 4 T () S
(while) K
(\(\(lread = getline\(&line, &lsize, script\)\) > 0\) {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Exit the command loop if we've read EOF. */) c n
() p 2 T () S 4 T () S 6 T () S
(if) K
(\(feof\(script\) ) p
(\271) sy
( 0\) ) p
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(/* Handle the line, and exit if a command failed */) c n
() p 2 T () S 4 T () S 6 T () S
(if) K
(\(handleline\(ostate, line\) < 0\) ) p
(break) K
(;) p n
() S 2 T () S 4 T (}) N
() S 2 T () S 4 T () S
(/* Cleanup ourselves. */) c n
() p 2 T () S 4 T () S
(if) K
(\(line ) p
(\271) sy
( ) p
(NULL) K
(\) free\(line\);) p n
() S 2 T (}) N
() N
() S 2 T () S
(return) K
( 1;) p n
(}) N
() N
(HANDLECOM\(scriptctl\) {) N
() S 2 T () S
(return) K
( 1;) p n
(}) N
(scriptcmds.c) (Page 2/2) (Nov 07, 17 15:58) title
border
grestore
(TechOS Sources) rhead
(scriptcmds.c) (38/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 39
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#include) K
( <assert.h>) p n
(#include) K
( <stddef.h>) p n
(#include) K
( <stdlib.h>) p n
(#include) K
( <stdio.h>) p n
(#include) K
( <string.h>) p n
() N
(#include) K
( ") p
(libs/argparser.h) str
(") p n
() N
(#include) K
( ") p
(osstate.h) str
(") p n
() N
(#include) K
( ") p
(commands.h) str
(") p n
(#include) K
( ") p
(comlist.h) str
(") p n
(#include) K
( ") p
(commandstate.h) str
(") p n
() N
(#include) K
( ") p
(techos.h) str
(") p n
() N
(/* The major/minor version of TechOS. */) c n
(const) K
( ) p
(int) k
( major_ver = 5;) p n
(const) K
( ) p
(int) k
( minor_ver = 0;) p n
() N
(/*) c n
( * Main function. ) N
( *) N
( * Print out a greeting, then enter the command loop.) N
( *) N
( * After that's done, say goodbye.) N
( */) N
(int) k
( main\(\) {) p n
() S 2 T () S
(/* OS state. */) c n
() p 2 T () S
(struct) k
( osstate *ostate;) p n
() N
() S 2 T () S
(/* Initialize commands. */) c n
() p 2 T (initcoms\(\);) N
() S 2 T () S
(/* Init. OS state. */) c n
() p 2 T (ostate         = makeosstate\(\);) N
() S 2 T (ostate) S
(\256) sy
(strem  = stdin;) p n
() S 2 T (ostate) S
(\256) sy
(output = stdout;) p n
() S 2 T () S
(/* Add all the commands to the command list. */) c n
() p 2 T (addcommands\(ostate) S
(\256) sy
(pComstate) p
(\256) sy
(plCommands\);) p n
() N
() S 2 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Welcome to TechOS v%d.%d\\n) str
(", major_ver, minor_ver\);) p n
() N
() S 2 T () S
(/* user login */) c n
() p 2 T (loginuser\(ostate\);) N
() N
() S 2 T () S
(/* Handle commands. */) c n
() p 2 T (comhan\(ostate\);) N
() N
() S 2 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Goodbye\\n) str
("\);) p n
() N
() S 2 T () S
(/* Cleanup after ourselves. */) c n
() p 2 T (killosstate\(ostate\);) N
() S 2 T (disposecoms\(\);) N
(}) N
() N
(/* Command loop. Read & execute commands from the user. */) c n
(void) k
( comhan\() p
(struct) k
( osstate *ostate\) {) p n
() S 2 T () S
(/* The number of commands executed so far. */) c n
() p 2 T () S
(int) k
( lno = 0;) p n
() N
() S 2 T () S
(/* Variables for line input. */) c n
() p 2 T (size_t  lread = 0;) N
(techos.c) (Page 1/5) (Dec 05, 17 23:00) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T (size_t  lsize = 0;) N
() S 2 T () S
(char) k
(   *line  = ) p
(NULL) K
(;) p n
() N
() S 2 T () S
(/* Initial prompt. */) c n
() p 2 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(TechOS\(%d\)>) str
(", lno\);) p n
() N
() S 2 T () S
(/* Loop until we don't read anything. */) c n
() p 2 T () S
(while) K
(\(\(lread = getline\(&line, &lsize, ostate) p
(\256) sy
(strem\)\) > 0\) {) p n
() S 2 T () S 4 T () S
(/* Exit the command loop if we've read EOF. */) c n
() p 2 T () S 4 T () S
(if) K
(\(feof\(ostate) p
(\256) sy
(strem\) ) p
(\271) sy
( 0\) ) p
(goto) K
( cleanup;) p n
() S 2 T () S 4 T (lno += 1;) N
() N
() S 2 T () S 4 T () S
(/* Handle the line, and exit if a command failed */) c n
() p 2 T () S 4 T () S
(if) K
(\(handleline\(ostate, line\) < 0\) ) p
(break) K
(;) p n
() N
() S 2 T () S 4 T () S
(/* Reprompt. */) c n
() p 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(TechOS\(%d\)>) str
(", lno\);) p n
() S 2 T (}) N
() N
() S 2 T () S
(/* Cleanup after ourselves. */) c n
(cleanup: ) p
(if) K
(\(line ) p
(\271) sy
( ) p
(NULL) K
(\)) p n
() S 2 T () S 4 T ( free\(line\);) N
(}) N
() N
(/* Handle executing a line of input. */) c n
(int) k
( handleline\() p
(struct) k
( osstate *ostate, ) p
(char) k
( *line\) {) p n
() S 2 T () S
(/* Actual length of read string. */) c n
() p 2 T (size_t llen;) N
() N
() S 2 T () S
(/* The command line arguments. */) c n
() p 2 T () S
(struct) k
( cliargs args;) p n
() N
() S 2 T () S
(/* A copy of the line. */) c n
() p 2 T () S
(char) k
( *newline;) p n
() S 2 T (newline = \() S
(char) k
( *\)strdup\(line\);) p n
() N
() S 2 T () S
(/* Remove the trailing newline from the command. */) c n
() p 2 T (llen = strlen\(line\);) N
() S 2 T () S
(if) K
(\(line[llen-1] ) p
(\272) sy
( ') p
(\\n) str
('\)) p n
() S 2 T () S 4 T (line[llen-1] = ') S
(\\0) str
(';) p n
() N
() S 2 T () S
(/* Parse CLI args. */) c n
() p 2 T (args = parseargs\(line\);) N
() S 2 T () S
(if) K
(\(args.argv[0] ) p
(\271) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S
(/* The command to execute. */) c n
() p 2 T () S 4 T () S
(struct) k
( command *com;) p n
() N
() S 2 T () S 4 T () S
(/* Determine the command to execute from the name. */) c n
() p 2 T () S 4 T () S
(/*) c n
() S 2 T () S 4 T ( * @TODO 10/0/7/17 Ben Culkin :GetCommand) N
() S 2 T () S 4 T ( * ) S 8 T (May want to change this from using the general) N
() S 2 T () S 4 T ( * ) S 8 T ('getcommand' function \(and that should probably be named) N
() S 2 T () S 4 T ( * ) S 8 T (something like getcommandfromlist to make what it takes) N
() S 2 T () S 4 T ( * ) S 8 T (clear\), to using a local version so that it can handle) N
() S 2 T () S 4 T ( * ) S 8 T (things like aliases and other varying types of commands) N
() S 2 T () S 4 T ( * ) S 8 T (that aren't normal ones stored in the single list.) N
() S 2 T () S 4 T ( */) N
() p 2 T () S 4 T (com = getcommand\(ostate) S
(\256) sy
(pComstate) p
(\256) sy
(plCommands, args.argv[0]\);) p n
() N
() S 2 T () S 4 T () S
(/* Execute the command if we have one. */) c n
() p 2 T () S 4 T () S
(if) K
(\(com) p
(\256) sy
(comfun ) p
(\271) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S 6 T () S
(/* The return status of the command. */) c n
(techos.c) (Page 2/5) (Dec 05, 17 23:00) title
border
grestore
(TechOS Sources) rhead
(techos.c) (39/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 40
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S 6 T () S
(int) k
( comres;) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/*) c n
() S 2 T () S 4 T () S 6 T ( * Execute the command.) N
() S 2 T () S 4 T () S 6 T ( *) N
() S 2 T () S 4 T () S 6 T ( * The status should be one of: ) N
() S 2 T () S 4 T () S 6 T ( * - zero for executing succesfully) N
() S 2 T () S 4 T () S 6 T ( * - positive for non-fatal errors) N
() S 2 T () S 4 T () S 6 T ( * - negative for fatal errors.) N
() S 2 T () S 4 T () S 6 T ( */) N
() p 2 T () S 4 T () S 6 T (comres = execcom\(com, args, newline, ostate\);) N
() N
() S 2 T () S 4 T () S 6 T (free\(newline\);) N
() N
() S 2 T () S 4 T () S 6 T () S
(return) K
( comres;) p n
() S 2 T () S 4 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T () S
(/* No such command exists. */) c n
() p 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: No such command named '%s'\\n) str
(", args.argv[0]\);) p n
() S 2 T () S 4 T () S 6 T (free\(newline\);) N
() N
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() S 2 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Couldn't find command name in line '%s'\\n) str
(", line\);) p n
() S 2 T () S 4 T (free\(newline\);) N
() N
() S 2 T () S 4 T () S
(return) K
( 1;) p n
() S 2 T (}) N
(}) N
() N
(/* Execute a command, plus any arguments it has. */) c n
(int) k
( execcom\() p
(struct) k
( command *com, ) p
(struct) k
( cliargs args, ) p
(char) k
( *argline, ) p
(struct) k
( osst) p n
(ate *ostate\) {) N
() S 2 T () S
(/* Return status of commands. */) c n
() p 2 T () S
(int) k
( comret;) p n
() S 2 T () S
(/* Execute the command. */) c n
() p 2 T () S
(switch) K
(\(com) p
(\256) sy
(type\) {) p n
() S 2 T () S
(case) K
( CT_NORMAL:) p n
() S 2 T () S 4 T (comret = com) S
(\256) sy
(comfun\(args.argc, args.argv, argline, ostate\);) p n
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S
(/* Shouldn't happen. */) c n
() p 2 T () S 4 T (assert\(0\);) N
() S 2 T (}) N
() N
() S 2 T () S
(return) K
( comret;) p n
(}) N
() N
(void) k
( loginuser\() p
(struct) k
( osstate *ostate\) {) p n
() S 2 T () S
(char) k
( *pszUsername, *pszPassword;) p n
() S 2 T (size_t llen, lread, lsize;) N
() N
() S 2 T (pszUsername = ) S
(NULL) K
(;) p n
() S 2 T (pszPassword = ) S
(NULL) K
(;) p n
() N
() S 2 T (lsize = 0;) N
() N
() S 2 T () S
(while) K
(\(1\) {) p n
() S 2 T () S 4 T () S
(struct) k
( user *puUser;) p n
() N
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Username: ) str
("\);) p n
() S 2 T () S 4 T (lread = getline\(&pszUsername, &lsize, ostate) S
(\256) sy
(strem\);) p n
(techos.c) (Page 3/5) (Dec 05, 17 23:00) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
() S 2 T () S 4 T () S
(while) K
(\(lread ) p
(\243) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: Must specify a username.\\n) str
("\);) p n
() N
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Username: ) str
("\);) p n
() S 2 T () S 4 T () S 6 T (lread = getline\(&pszUsername, &lsize, ostate) S
(\256) sy
(strem\);) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T () S
(/* Trim trailing newline. */) c n
() p 2 T () S 4 T (llen = strlen\(pszUsername\);) N
() S 2 T () S 4 T () S
(if) K
(\(pszUsername[llen-1] ) p
(\272) sy
( ') p
(\\n) str
('\) {) p n
() S 2 T () S 4 T () S 6 T (pszUsername[llen-1] = ') S
(\\0) str
(';) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T (puUser = udblookup\(ostate) S
(\256) sy
(pdUsers, pszUsername\);) p n
() S 2 T () S 4 T () S
(if) K
(\(puUser ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: No user named '%s' exists\\n) str
(", pszUsername\);) p n
() S 2 T () S 4 T () S 6 T () S
(continue) K
(;) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Password: ) str
("\);) p n
() S 2 T () S 4 T (lread = getline\(&pszPassword, &lsize, ostate) S
(\256) sy
(strem\);) p n
() N
() S 2 T () S 4 T () S
(while) K
(\(lread ) p
(\243) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(ERROR: Must specify a password.\\n) str
("\);) p n
() N
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Password: ) str
("\);) p n
() S 2 T () S 4 T () S 6 T (lread = getline\(&pszPassword, &lsize, ostate) S
(\256) sy
(strem\);) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T () S
(/* Trim trailing newline. */) c n
() p 2 T () S 4 T (llen = strlen\(pszPassword\);) N
() S 2 T () S 4 T () S
(if) K
(\(pszPassword[llen-1] ) p
(\272) sy
( ') p
(\\n) str
('\) {) p n
() S 2 T () S 4 T () S 6 T (pszPassword[llen-1] = ') S
(\\0) str
(';) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T () S
(if) K
(\(strcmp\(puUser) p
(\256) sy
(pszPass, pszPassword\) ) p
(\272) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T () S
(char) k
( *pszKind;) p n
() N
() S 2 T () S 4 T () S 6 T () S
(switch) K
(\(puUser) p
(\256) sy
(type\) {) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( UTY_BASIC:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (pszKind = ") S
(rim) str
(";) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( UTY_ADMIN:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (pszKind = ") S
(spoke) str
(";) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(case) K
( UTY_ROOT:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (pszKind = ") S
(hub) str
(";) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S 6 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(/* Shouldn't happen. */) c n
() p 2 T () S 4 T () S 6 T () S 8 T (assert\(0\);) N
() S 2 T () S 4 T () S 6 T (}) N
() N
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Welcome '%s'! You are a member of the '%s' group\\n) str
(", pszUserna) p n
(me, pszKind\);) N
() N
() S 2 T () S 4 T () S 6 T (ostate) S
(\256) sy
(puCurrent = puUser;) p n
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Incorrect password\\n) str
("\);) p n
(techos.c) (Page 4/5) (Dec 05, 17 23:00) title
border
grestore
(TechOS Sources) rhead
(techos.c) (40/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5,1) 41
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T (}) N
() N
() S 2 T () S
(if) K
(\(pszUsername ) p
(\271) sy
( ) p
(NULL) K
(\)) p n
() S 2 T () S 4 T (free\(pszUsername\);) N
() N
() S 2 T () S
(if) K
(\(pszPassword ) p
(\271) sy
( ) p
(NULL) K
(\)) p n
() S 2 T () S 4 T (free\(pszPassword\);) N
(}) N
(techos.c) (Page 5/5) (Dec 05, 17 23:00) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#define) K
( _ATFILE_SOURCE) p n
() N
(#include) K
( <assert.h>) p n
(#include) K
( <dirent.h>) p n
(#include) K
( <errno.h>) p n
(#include) K
( <fcntl.h>) p n
(#include) K
( <getopt.h>) p n
(#include) K
( <stdio.h>) p n
(#include) K
( <stdlib.h>) p n
(#include) K
( <string.h>) p n
(#include) K
( <unistd.h>) p n
() N
(#include) K
( <sys/types.h>) p n
(#include) K
( <sys/stat.h>) p n
() N
(#include) K
( ") p
(osstate.h) str
(") p n
(#include) K
( ") p
(command.h) str
(") p n
() N
(#include) K
( ") p
(users.h) str
(") p n
(#include) K
( ") p
(usercmds.h) str
(") p n
() N
(/* Handle creating a user. */) c n
(HANDLECOM\(mkusr\) {) p n
() S 2 T () S
(/* Reinit getopt. */) c n
() p 2 T (optind = 1;) N
() S 2 T () S
(int) k
( showSize = 0;) p n
() N
() S 2 T () S
(while) K
(\(1\) {) p n
() S 2 T () S 4 T () S
(/* Enum declaration for long options. */) c n
() p 2 T () S 4 T () S
(enum) k
( scriptopt {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Help option. */) c n
() p 2 T () S 4 T () S 6 T (SO_HELP = 0,) N
() S 2 T () S 4 T (};) N
() N
() S 2 T () S 4 T () S
(/* The current option, and the current long option. */) c n
() p 2 T () S 4 T () S
(int) k
( opt, optidx;) p n
() N
() S 2 T () S 4 T () S
(/* Our usage message. */) c n
() p 2 T () S 4 T () S
(char) k
( *usage = ") p
(Usage mkusr [-h] [--help] [-l] <username>) str
(";) p n
() N
() S 2 T () S 4 T () S
(static) K
( ) p
(struct) k
( option opts[] = {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Misc. options. */) c n
() p 2 T () S 4 T () S 6 T ({") S
(help) str
(", no_argument, 0, ') p
(h) str
('},) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Terminating option. */) c n
() p 2 T () S 4 T () S 6 T ({0, 0, 0, 0}) N
() S 2 T () S 4 T (};) N
() N
() S 2 T () S 4 T () S
(/* Get an option. */) c n
() p 2 T () S 4 T (opt = getopt_long\(argc, argv, ") S
(h) str
(", opts, &optidx\);) p n
() S 2 T () S 4 T () S
(/* Break if we've processed everything. */) c n
() p 2 T () S 4 T () S
(if) K
(\(opt ) p
(\272) sy
( -1\) ) p
(break) K
(;) p n
() N
() S 2 T () S 4 T () S
(/* Handle options. */) c n
() p 2 T () S 4 T () S
(switch) K
(\(opt\) {) p n
() S 2 T () S 4 T () S
(case) K
( 0:) p n
() S 2 T () S 4 T () S 6 T () S
(/* ) c n
() S 2 T () S 4 T () S 6 T ( * We picked a long option, but they are handled by) N
() S 2 T () S 4 T () S 6 T ( * their short options.) N
() S 2 T () S 4 T () S 6 T ( */) N
() p 2 T () S 4 T () S 6 T () S
(switch) K
(\(optidx\) {) p n
() S 2 T () S 4 T () S 6 T () S
(default) K
(:) p n
(usercmds.c) (Page 1/8) (Dec 05, 17 23:00) title
border
grestore
(TechOS Sources) rhead
(techos.c, usercmds.c) (41/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2-3) 42
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(h) str
(':) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 0;) p n
() S 2 T () S 4 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() N
() S 2 T () S 4 T (}) N
() S 2 T (}) N
() N
(       ) S 8 T () S
(if) K
(\(argc ) p
(\243) sy
( \(optind\)\) {) p n
(       ) S 8 T () S 10 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Must provide the name of the user to create as an argum) str n
(ent\\n) S
("\);) p n
(       ) S 8 T () S 10 T () S
(return) K
( 1;) p n
(       ) S 8 T (}) N
() N
() S 2 T ({) N
() S 2 T () S 4 T () S
(char) k
( *pszUsername;) p n
() N
() S 2 T () S 4 T (pszUsername = argv[optind];) N
() N
() S 2 T () S 4 T () S
(if) K
(\(ostate) p
(\256) sy
(puCurrent) p
(\256) sy
(type ) p
(\272) sy
( UTY_BASIC\) {) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: You don't have permission to do that\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T (pszUsername = argv[optind];) N
() N
() S 2 T () S 4 T () S
(/* check if the user already exists */) c n
() p 2 T () S 4 T () S
(if) K
(\(udblookup\(ostate) p
(\256) sy
(pdUsers, pszUsername\) ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S 6 T () S
(char) k
( *pszPassword;) p n
() S 2 T () S 4 T () S 6 T (size_t llen, lread;) N
() N
() S 2 T () S 4 T () S 6 T (pszPassword = ) S
(NULL) K
(;) p n
() S 2 T () S 4 T () S 6 T (llen        = 0;) N
() N
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Enter password for user '%s': ) str
(", pszUsername\);) p n
() S 2 T () S 4 T () S 6 T (lread = getline\(&pszPassword, &llen, stdin\);) N
() N
() S 2 T () S 4 T () S 6 T () S
(/* Make sure a password is entered. */) c n
() p 2 T () S 4 T () S 6 T () S
(while) K
(\(lread ) p
(\243) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tPassword cannot be empty, try again\\n) str
("\);) p 76 T () S 78 T () S 80 T () N
() N
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Enter password for user '%s': ) str
(", pszUsername\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (lread = getline\(&pszPassword, &llen, stdin\);) N
() S 2 T () S 4 T () S 6 T (}) N
() N
() S 2 T () S 4 T () S 6 T () S
(/* Trim trailing newline. */) c n
() p 2 T () S 4 T () S 6 T (llen = strlen\(pszPassword\);) N
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(pszPassword[llen-1] ) p
(\272) sy
( ') p
(\\n) str
('\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (pszPassword[llen-1] = ') S
(\\0) str
(';) p n
() S 2 T () S 4 T () S 6 T (}) N
() N
() S 2 T () S 4 T () S 6 T (udbinsert\(ostate) S
(\256) sy
(pdUsers, UTY_BASIC, pszUsername, pszPassword\);) p n
() N
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Sucessfully created user '%s'\\n) str
(", pszUsername\);) p n
(usercmds.c) (Page 2/8) (Dec 05, 17 23:00) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
() S 2 T () S 4 T () S 6 T (free\(pszPassword\);) N
() S 2 T () S 4 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: A user who goes by '%s' already exists\\n) str
(", pszUsername) p n
(\);) N
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() S 2 T (}) N
() N
() S 2 T () S
(return) K
( 0;) p n
(}) N
() N
(/* Handle deleting a user. */) c n
(HANDLECOM\(rmusr\) {) p n
() S 2 T () S
(/* Reinit getopt. */) c n
() p 2 T (optind = 1;) N
() N
() S 2 T () S
(while) K
(\(1\) {) p n
() S 2 T () S 4 T () S
(/* Enum declaration for long options. */) c n
() p 2 T () S 4 T () S
(enum) k
( scriptopt {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Help option. */) c n
() p 2 T () S 4 T () S 6 T (SO_HELP = 0,) N
() S 2 T () S 4 T (};) N
() N
() S 2 T () S 4 T () S
(/* The current option, and the current long option. */) c n
() p 2 T () S 4 T () S
(int) k
( opt, optidx;) p n
() N
() S 2 T () S 4 T () S
(/* Our usage message. */) c n
() p 2 T () S 4 T () S
(char) k
( *usage = ") p
(Usage rmusr [-h] [--help] <username>) str
(";) p n
() N
() S 2 T () S 4 T () S
(static) K
( ) p
(struct) k
( option opts[] = {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Misc. options. */) c n
() p 2 T () S 4 T () S 6 T ({") S
(help) str
(", no_argument, 0, ') p
(h) str
('},) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Terminating option. */) c n
() p 2 T () S 4 T () S 6 T ({0, 0, 0, 0}) N
() S 2 T () S 4 T (};) N
() N
() S 2 T () S 4 T () S
(/* Get an option. */) c n
() p 2 T () S 4 T (opt = getopt_long\(argc, argv, ") S
(h) str
(", opts, &optidx\);) p n
() S 2 T () S 4 T () S
(/* Break if we've processed everything. */) c n
() p 2 T () S 4 T () S
(if) K
(\(opt ) p
(\272) sy
( -1\) ) p
(break) K
(;) p n
() N
() S 2 T () S 4 T () S
(/* Handle options. */) c n
() p 2 T () S 4 T () S
(switch) K
(\(opt\) {) p n
() S 2 T () S 4 T () S
(case) K
( 0:) p n
() S 2 T () S 4 T () S 6 T () S
(/* ) c n
() S 2 T () S 4 T () S 6 T ( * We picked a long option, but they are handled by) N
() S 2 T () S 4 T () S 6 T ( * their short options.) N
() S 2 T () S 4 T () S 6 T ( */) N
() p 2 T () S 4 T () S 6 T () S
(switch) K
(\(optidx\) {) p n
() S 2 T () S 4 T () S 6 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(h) str
(':) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 0;) p n
() S 2 T () S 4 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
(usercmds.c) (Page 3/8) (Dec 05, 17 23:00) title
border
grestore
(TechOS Sources) rhead
(usercmds.c) (42/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (4-5) 43
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() N
() S 2 T () S 4 T (}) N
() S 2 T (}) N
() N
() S 2 T () S
(if) K
(\(argc ) p
(\243) sy
( \(optind\)\) {) p n
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Must provide the name of the user to delete as an argument\\n) str
("\);) p n
() S 2 T () S 4 T () S
(return) K
( 1;) p n
() S 2 T (}) N
() N
() S 2 T ({) N
() S 2 T () S 4 T () S
(char) k
( *pszUsername;) p n
() N
() S 2 T () S 4 T () S
(struct) k
( user *puUser;) p n
() N
() S 2 T () S 4 T (pszUsername = argv[optind];) N
() N
() S 2 T () S 4 T (puUser = udblookup\(ostate) S
(\256) sy
(pdUsers, pszUsername\);) p n
() N
() S 2 T () S 4 T () S
(if) K
(\(puUser ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: No user named '%s' exists\\n) str
(", pszUsername\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T () S
(if) K
(\(strcmp\(ostate) p
(\256) sy
(puCurrent) p
(\256) sy
(pszName, pszUsername\) ) p
(\272) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: How do you propose to delete yourself?\\n) str
("\);) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T () S
(if) K
(\(ostate) p
(\256) sy
(puCurrent) p
(\256) sy
(type ) p
(\272) sy
( UTY_BASIC\) {) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: You don't have permission to do that\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T () S
(switch) K
(\(puUser) p
(\256) sy
(type\) {) p n
() S 2 T () S 4 T () S
(case) K
( UTY_BASIC:) p n
() S 2 T () S 4 T () S 6 T (udbremove\(ostate) S
(\256) sy
(pdUsers, pszUsername\);) p n
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( UTY_ADMIN:) p n
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(ostate) p
(\256) sy
(puCurrent) p
(\256) sy
(type ) p
(\272) sy
( UTY_ADMIN\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: You don't have permission to do that\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T (udbremove\(ostate) S
(\256) sy
(pdUsers, pszUsername\);) p n
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( UTY_ROOT:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Doing that would cause the user tree to collapse\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tSuccessfully consigned user '%s' to oblivion\\n) str
(", pszUsername\);) p n
() S 2 T (}) N
() N
() S 2 T () S
(return) K
( 0;) p n
(}) N
() N
(HANDLECOM\(pwd\) {) N
() S 2 T () S
(/* Reinit getopt. */) c n
() p 2 T (optind = 1;) N
() N
() S 2 T () S
(while) K
(\(1\) {) p n
() S 2 T () S 4 T () S
(/* Enum declaration for long options. */) c n
(usercmds.c) (Page 4/8) (Dec 05, 17 23:00) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S
(enum) k
( scriptopt {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Help option. */) c n
() p 2 T () S 4 T () S 6 T (SO_HELP = 0,) N
() S 2 T () S 4 T (};) N
() N
() S 2 T () S 4 T () S
(/* The current option, and the current long option. */) c n
() p 2 T () S 4 T () S
(int) k
( opt, optidx;) p n
() N
() S 2 T () S 4 T () S
(/* Our usage message. */) c n
() p 2 T () S 4 T () S
(char) k
( *usage = ") p
(Usage pwd [-h] [--help] <username>) str
(";) p n
() N
() S 2 T () S 4 T () S
(static) K
( ) p
(struct) k
( option opts[] = {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Misc. options. */) c n
() p 2 T () S 4 T () S 6 T ({") S
(help) str
(", no_argument, 0, ') p
(h) str
('},) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Terminating option. */) c n
() p 2 T () S 4 T () S 6 T ({0, 0, 0, 0}) N
() S 2 T () S 4 T (};) N
() N
() S 2 T () S 4 T () S
(/* Get an option. */) c n
() p 2 T () S 4 T (opt = getopt_long\(argc, argv, ") S
(h) str
(", opts, &optidx\);) p n
() S 2 T () S 4 T () S
(/* Break if we've processed everything. */) c n
() p 2 T () S 4 T () S
(if) K
(\(opt ) p
(\272) sy
( -1\) ) p
(break) K
(;) p n
() N
() S 2 T () S 4 T () S
(/* Handle options. */) c n
() p 2 T () S 4 T () S
(switch) K
(\(opt\) {) p n
() S 2 T () S 4 T () S
(case) K
( 0:) p n
() S 2 T () S 4 T () S 6 T () S
(/* ) c n
() S 2 T () S 4 T () S 6 T ( * We picked a long option, but they are handled by) N
() S 2 T () S 4 T () S 6 T ( * their short options.) N
() S 2 T () S 4 T () S 6 T ( */) N
() p 2 T () S 4 T () S 6 T () S
(switch) K
(\(optidx\) {) p n
() S 2 T () S 4 T () S 6 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(h) str
(':) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 0;) p n
() S 2 T () S 4 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", usage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() N
() S 2 T () S 4 T (}) N
() S 2 T (}) N
() N
() S 2 T () S
(if) K
(\(argc ) p
(\243) sy
( \(optind\)\) {) p n
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Must provide the name of the user to change the password off as ) str n
(an argument\\n) S
("\);) p n
() S 2 T () S 4 T () S
(return) K
( 1;) p n
() S 2 T (}) N
() N
() S 2 T ({) N
() S 2 T () S 4 T () S
(char) k
( *pszUsername;) p n
() S 2 T () S 4 T () S
(struct) k
( user *puUser;) p n
() N
() S 2 T () S 4 T (pszUsername = argv[optind];) N
() N
() S 2 T () S 4 T () S
(if) K
(\(strcmp\(ostate) p
(\256) sy
(puCurrent) p
(\256) sy
(pszName, pszUsername\) ) p
(\272) sy
( 0\) {) p n
(usercmds.c) (Page 5/8) (Dec 05, 17 23:00) title
border
grestore
(TechOS Sources) rhead
(usercmds.c) (43/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (6-7) 44
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S 6 T (puUser = ostate) S
(\256) sy
(puCurrent;) p n
() S 2 T () S 4 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T () S
(struct) k
( user *puLookup;) p n
() N
() S 2 T () S 4 T () S 6 T (puLookup = udblookup\(ostate) S
(\256) sy
(pdUsers, pszUsername\);) p n
() N
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(puLookup ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: No user named '%s'\\n) str
(", pszUsername\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() N
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(ostate) p
(\256) sy
(puCurrent) p
(\256) sy
(type ) p
(\271) sy
( UTY_ROOT ) p
(\331) sy
( puLookup) p
(\256) sy
(type ) p
(\272) sy
( UTY_ADMIN\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: You don't have permission to do that\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() N
() S 2 T () S 4 T () S 6 T (puUser = puLookup;) N
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T ({) N
() S 2 T () S 4 T () S 6 T () S
(char) k
( *pszPassword;) p n
() S 2 T () S 4 T () S 6 T (size_t llen, lread;) N
() N
() S 2 T () S 4 T () S 6 T (pszPassword = ) S
(NULL) K
(;) p n
() S 2 T () S 4 T () S 6 T (llen        = 0;) N
() N
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Enter password for user '%s': ) str
(", pszUsername\);) p n
() S 2 T () S 4 T () S 6 T (lread = getline\(&pszPassword, &llen, stdin\);) N
() N
() S 2 T () S 4 T () S 6 T () S
(/* Make sure a password is entered. */) c n
() p 2 T () S 4 T () S 6 T () S
(while) K
(\(lread ) p
(\243) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tPassword cannot be empty, try again\\n) str
("\);) p 76 T () S 78 T () S 80 T () N
() N
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(Enter password for user '%s': ) str
(", pszUsername\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (lread = getline\(&pszPassword, &llen, stdin\);) N
() S 2 T () S 4 T () S 6 T (}) N
() N
() S 2 T () S 4 T () S 6 T () S
(/* Trim trailing newline. */) c n
() p 2 T () S 4 T () S 6 T (llen = strlen\(pszPassword\);) N
() S 2 T () S 4 T () S 6 T () S
(if) K
(\(pszPassword[llen-1] ) p
(\272) sy
( ') p
(\\n) str
('\) {) p n
() S 2 T () S 4 T () S 6 T () S 8 T (pszPassword[llen-1] = ') S
(\\0) str
(';) p n
() S 2 T () S 4 T () S 6 T (}) N
() N
() S 2 T () S 4 T () S 6 T (free\(puUser) S
(\256) sy
(pszPass\);) p n
() N
() S 2 T () S 4 T () S 6 T (puUser) S
(\256) sy
(pszPass = pszPassword;) p n
() S 2 T () S 4 T (}) N
() S 2 T (}) N
() N
() S 2 T () S
(return) K
( 0;) p n
(}) N
() N
(/* Handle adding or removing administrator privileges for a user. */) c n
(HANDLECOM\(toggleadm\) {) p n
() S 2 T () S
(/* Reinit getopt. */) c n
() p 2 T (optind = 1;) N
() S 2 T () S
(/* Handle options. */) c n
() p 2 T () S
(while) K
( \(1\) {) p n
() N
() S 2 T () S 4 T () S
(/* The current option & long option. */) c n
() p 2 T () S 4 T () S
(int) k
( opt, optidx;) p n
() N
(usercmds.c) (Page 6/8) (Dec 05, 17 23:00) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S
(/* Our usage message. */) c n
() p 2 T () S 4 T () S
(char) k
( *pszUsage = ") p
(Usage: toggleadm [-h] [--help] <username>) str
(";) p n
() N
() S 2 T () S 4 T () S
(static) K
( ) p
(struct) k
( option opts[] = {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Misc. options. */) c n
() p 2 T () S 4 T () S 6 T ({") S
(help) str
(", no_argument, 0, ') p
(h) str
('},) p n
() N
() S 2 T () S 4 T () S 6 T () S
(/* Terminating option. */) c n
() p 2 T () S 4 T () S 6 T ({0, 0, 0, 0}) N
() S 2 T () S 4 T (};) N
() N
() S 2 T () S 4 T () S
(/* Get an option. */) c n
() p 2 T () S 4 T (opt = getopt_long\(argc, argv, ") S
(h) str
(", opts, &optidx\);) p n
() S 2 T () S 4 T () S
(/* Break if we've processed everything. */) c n
() p 2 T () S 4 T () S
(if) K
(\(opt ) p
(\272) sy
( -1\) ) p
(break) K
(;) p n
() N
() S 2 T () S 4 T () S
(/* Handle options. */) c n
() p 2 T () S 4 T () S
(switch) K
(\(opt\) {) p n
() S 2 T () S 4 T () S
(case) K
( 0:) p n
() S 2 T () S 4 T () S 6 T () S
(/* ) c n
() S 2 T () S 4 T () S 6 T ( * We picked a long option, but they are handled by) N
() S 2 T () S 4 T () S 6 T ( * their short options.) N
() S 2 T () S 4 T () S 6 T ( */) N
() p 2 T () S 4 T () S 6 T () S
(switch) K
(\(optidx\) {) p n
() S 2 T () S 4 T () S 6 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", pszUsage\);) p n
() S 2 T () S 4 T () S 6 T () S 8 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T () S 6 T (}) N
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( ') p
(h) str
(':) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", pszUsage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 0;) p n
() S 2 T () S 4 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Invalid command-line argument\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(%s\\n) str
(", pszUsage\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() N
() S 2 T () S 4 T (}) N
() S 2 T (}) N
() N
() S 2 T () S
(if) K
(\(argc ) p
(\243) sy
( \(optind\)\) {) p n
() S 2 T () S 4 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Must provide the name of the user to toggle admin status of as an ) str n
(argument\\n) S
("\);) p n
() S 2 T () S 4 T () S
(return) K
( 1;) p n
() S 2 T (}) N
() N
() S 2 T ({) N
() S 2 T () S 4 T () S
(char) k
( *pszUsername;) p n
() N
() S 2 T () S 4 T () S
(struct) k
( user *puUser;) p n
() N
() S 2 T () S 4 T (pszUsername = argv[optind];) N
() N
() S 2 T () S 4 T (puUser = udblookup\(ostate) S
(\256) sy
(pdUsers, pszUsername\);) p n
() N
() S 2 T () S 4 T () S
(if) K
(\(puUser ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: No user named '%s' exists\\n) str
(", pszUsername\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T () S
(if) K
(\(ostate) p
(\256) sy
(puCurrent) p
(\256) sy
(type ) p
(\271) sy
( UTY_ROOT\) {) p n
(usercmds.c) (Page 7/8) (Dec 05, 17 23:00) title
border
grestore
(TechOS Sources) rhead
(usercmds.c) (44/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (8,1) 45
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: You don't have permission to do that\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T () S
(switch) K
(\(puUser) p
(\256) sy
(type\) {) p n
() S 2 T () S 4 T () S
(case) K
( UTY_BASIC:) p n
() S 2 T () S 4 T () S 6 T (puUser) S
(\256) sy
(type = UTY_ADMIN;) p n
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( UTY_ADMIN:) p n
() S 2 T () S 4 T () S 6 T (puUser) S
(\256) sy
(type = UTY_BASIC;) p n
() S 2 T () S 4 T () S 6 T () S
(break) K
(;) p n
() S 2 T () S 4 T () S
(case) K
( UTY_ROOT:) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tERROR: Root is already all-powerful\\n) str
("\);) p n
() S 2 T () S 4 T () S 6 T () S
(return) K
( 1;) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T () S
(if) K
(\(puUser) p
(\256) sy
(type ) p
(\272) sy
( UTY_ADMIN\)) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tSuccessfully toggled administration status for user '%s': ON\\n) str
(", psz) p n
(Username\);) N
() S 2 T () S 4 T () S
(else) K
( ) p
(if) K
(\(puUser) p
(\256) sy
(type ) p
(\272) sy
( UTY_BASIC\)) p n
() S 2 T () S 4 T () S 6 T (fprintf\(ostate) S
(\256) sy
(output, ") p
(\\tSuccessfully toggled administration status for user '%s': OFF\\n) str
(", ps) p n
(zUsername\);) N
() S 2 T (}) N
() N
() S 2 T () S
(return) K
( 0;) p n
(}) N
(usercmds.c) (Page 8/8) (Dec 05, 17 23:00) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#include) K
( <assert.h>) p n
(#include) K
( <stdlib.h>) p n
(#include) K
( <stdio.h>) p n
() N
(#include) K
( ") p
(libs/intern.h) str
(") p n
() N
(#include) K
( ") p
(users.h) str
(") p n
() N
(static) K
( ) p
(void) k
( killuser\() p
(void) k
( *pvUser\) {) p n
() S 2 T () S
(struct) k
( user *puUser = \() p
(struct) k
( user *\)pvUser;) p n
() N
() S 2 T () S
(if) K
(\(pvUser ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S
(return) K
(;) p n
() S 2 T (}) N
() N
() S 2 T (free\(puUser) S
(\256) sy
(pszName\);) p n
() S 2 T (free\(puUser) S
(\256) sy
(pszPass\);) p n
() N
() S 2 T (free\(puUser\);) N
(}) N
() N
(struct) k
( userdb {) p n
() S 2 T () S
(struct) k
( internlist *plUsers;) p n
(};) N
() N
(struct) k
( userdb *makeudb\(\) {) p n
() S 2 T () S
(/* Allocate memory for the DB. */) c n
() p 2 T () S
(struct) k
( userdb  *pdDB = malloc\() p
(sizeof) K
(\() p
(struct) k
( userdb\)\);) p n
() S 2 T () S
(/* Fail if allocation did. */) c n
() p 2 T (assert\(pdDB ) S
(\271) sy
( ) p
(NULL) K
(\);) p n
() N
() S 2 T () S
(/* Allocate memory for the user list. */) c n
() p 2 T (pdDB) S
(\256) sy
(plUsers = makeinternlist\(5, &killuser\);) p n
() S 2 T () S
(/* Fail if allocation did. */) c n
() p 2 T (assert\(pdDB) S
(\256) sy
(plUsers ) p
(\271) sy
( ) p
(NULL) K
(\);) p n
() N
() S 2 T () S
(return) K
( pdDB;) p n
(}) N
() N
(void) k
( killudb\() p
(struct) k
( userdb *pdDB\) {) p n
() S 2 T () S
(int) k
( i;) p n
() N
() S 2 T (killinternlist\(pdDB) S
(\256) sy
(plUsers\);) p n
() N
() S 2 T (free\(pdDB\);) N
(}) N
() N
(struct) k
( user *udblookup\() p
(struct) k
( userdb *pdDB, ) p
(char) k
( *pszUsername\) {) p n
() S 2 T () S
(return) K
( \() p
(struct) k
( user *\)getinternlist\(pdDB) p
(\256) sy
(plUsers, pszUsername\);) p n
(}) N
() N
(void) k
( udbinsert\() p
(struct) k
( userdb *pdDB, ) p
(enum) k
( utype type, ) p
(char) k
( *pszUsername, ) p
(char) k
( *ps) p n
(zPassword\) {) N
() S 2 T () S
(struct) k
( user *puUser = malloc\() p
(sizeof) K
(\() p
(struct) k
( user\)\);) p n
() S 2 T (assert\(puUser ) S
(\271) sy
( ) p
(NULL) K
(\);) p n
() N
() S 2 T (puUser) S
(\256) sy
(type = type;) p n
() N
() S 2 T (puUser) S
(\256) sy
(pszName = \() p
(char) k
( *\)strdup\(pszUsername\);) p n
() S 2 T (puUser) S
(\256) sy
(pszPass = \() p
(char) k
( *\)strdup\(pszPassword\);) p n
() N
() S 2 T (putinternlist\(pdDB) S
(\256) sy
(plUsers, pszUsername, puUser\);) p n
(users.c) (Page 1/3) (Dec 05, 17 23:00) title
border
grestore
(TechOS Sources) rhead
(usercmds.c, users.c) (45/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2-3) 46
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(}) p n
() N
(void) k
( udbremove\() p
(struct) k
( userdb *pdDB, ) p
(char) k
( *pszUsername\) {) p n
() S 2 T (deleteinternlist\(pdDB) S
(\256) sy
(plUsers, pszUsername\);) p n
(}) N
() N
(/* Load user database from a file. */) c n
(void) k
( ramfileintodb\() p
(struct) k
( userdb *pdDB, ) p
(char) k
( *pszFilename\) {) p n
() S 2 T () S
(FILE) k
( *pfFile;) p n
() N
() S 2 T () S
(char) k
( *pszLine;) p n
() S 2 T (size_t  llen;) N
() S 2 T (size_t lread;) N
() N
() S 2 T (llen = 0;) N
() N
() S 2 T (pfFile = fopen\(pszFilename, ") S
(r) str
("\);) p n
() S 2 T () S
(if) K
(\(pfFile ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S
(return) K
(;) p n
() S 2 T (}) N
() N
() S 2 T () S
(while) K
(\(\(lread = getline\(&pszLine, &llen, pfFile\)\) ) p
(\271) sy
( -1\) {) p n
() S 2 T () S 4 T () S
(if) K
(\(feof\(pfFile\)\) ) p
(break) K
(;) p n
() S 2 T () S 4 T () N
() S 2 T () S 4 T () S
(char) k
( *pszName, *pszPass, *pszType, *pSave;) p n
() S 2 T () S 4 T () S
(enum) k
( utype type;) p n
() N
() S 2 T () S 4 T (pSave = ) S
(NULL) K
(;) p n
() N
() S 2 T () S 4 T () S
(/* Read username. */) c n
() p 2 T () S 4 T (pszName = \() S
(char) k
( *\)strtok_r\(pszLine, ") p
(:) str
(", &pSave\);) p n
() S 2 T () S 4 T () S
(/* Skip improperly formatted records. */) c n
() p 2 T () S 4 T () S
(if) K
(\(pszName ) p
(\272) sy
( ) p
(NULL) K
(\) ) p
(continue) K
(;) p n
() N
() S 2 T () S 4 T () S
(/* Read password. */) c n
() p 2 T () S 4 T (pszPass = \() S
(char) k
( *\)strtok_r\() p
(NULL) K
(, ") p
(:) str
(", &pSave\);) p n
() S 2 T () S 4 T () S
(/* Skip improperly formatted records. */) c n
() p 2 T () S 4 T () S
(if) K
(\(pszPass ) p
(\272) sy
( ) p
(NULL) K
(\) ) p
(continue) K
(;) p n
() N
() S 2 T () S 4 T () S
(/* Read user type. */) c n
() p 2 T () S 4 T (pszType = \() S
(char) k
( *\)strtok_r\() p
(NULL) K
(, ") p
(:) str
(", &pSave\);) p n
() S 2 T () S 4 T () S
(/* Skip improperly formatted records. */) c n
() p 2 T () S 4 T () S
(if) K
(\(pszType ) p
(\272) sy
( ) p
(NULL) K
(\) ) p
(continue) K
(;) p n
() N
() S 2 T () S 4 T () S
(/* Parse user type. */) c n
() p 2 T () S 4 T () S
(if) K
(\(strncmp\(") p
(rim) str
(", pszType, 3\) ) p
(\272) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T (type = UTY_BASIC;) N
() S 2 T () S 4 T (} ) S
(else) K
( ) p
(if) K
(\(strncmp\(") p
(spoke) str
(", pszType, 5\) ) p
(\272) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T (type = UTY_ADMIN;) N
() S 2 T () S 4 T (} ) S
(else) K
( ) p
(if) K
(\(strncmp\(") p
(hub) str
(", pszType, 3\) ) p
(\272) sy
( 0\) {) p n
() S 2 T () S 4 T () S 6 T (type = UTY_ROOT;) N
() S 2 T () S 4 T (} ) S
(else) K
( {) p n
() S 2 T () S 4 T () S 6 T () S
(/* Invalid user type. */) c n
() p 2 T () S 4 T () S 6 T () S
(continue) K
(;) p n
() S 2 T () S 4 T (}) N
() N
() S 2 T () S 4 T (udbinsert\(pdDB, type, pszName, pszPass\);) N
() S 2 T (}) N
() N
() S 2 T (fclose\(pfFile\);) N
(}) N
() N
(users.c) (Page 2/3) (Dec 05, 17 23:00) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(void) k
( offloaduser\() p
(char) k
( *pszUsername, ) p
(void) k
( *pvUser, ) p
(void) k
( *pvData\) {) p n
() S 2 T () S
(struct) k
( user *puUser;) p n
() N
() S 2 T () S
(FILE) k
( *pfOutput;) p n
() N
() S 2 T () S
(char) k
( *pszKind;) p n
() N
() S 2 T (puUser   = \() S
(struct) k
( user *\)pvUser;) p n
() S 2 T (pfOutput = \() S
(FILE) k
( *\)pvData;) p n
() N
() S 2 T () S
(if) K
(\(puUser ) p
(\272) sy
( ) p
(NULL) K
(\) {) p n
() S 2 T () S 4 T () S
(return) K
(;) p n
() S 2 T (}) N
() N
() S 2 T () S
(switch) K
(\(puUser) p
(\256) sy
(type\) {) p n
() S 2 T () S
(case) K
( UTY_BASIC:) p n
() S 2 T () S 4 T (pszKind = ") S
(rim) str
(";) p n
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(case) K
( UTY_ADMIN:) p n
() S 2 T () S 4 T (pszKind = ") S
(spoke) str
(";) p n
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(case) K
( UTY_ROOT:) p n
() S 2 T () S 4 T (pszKind = ") S
(hub) str
(";) p n
() S 2 T () S 4 T () S
(break) K
(;) p n
() S 2 T () S
(default) K
(:) p n
() S 2 T () S 4 T () S
(/* Shouldn't happen. */) c n
() p 2 T () S 4 T (assert\(0\);) N
() S 2 T (}) N
() N
() S 2 T (fprintf\(pfOutput, ") S
(%s:%s:%s\\n) str
(", puUser) p
(\256) sy
(pszName, puUser) p
(\256) sy
(pszPass, pszKind\);) p n
(}) N
() N
(/* Save user database to a file. */) c n
(void) k
( ramdbintofile\() p
(struct) k
( userdb *pdDB, ) p
(char) k
( *pszFilename\) {) p n
() S 2 T () S
(FILE) k
( *pfFile = fopen\(pszFilename, ") p
(w) str
("\);) p n
() S 2 T () S
(if) K
(\(pfFile ) p
(\272) sy
( ) p
(NULL) K
(\) ) p
(return) K
(;) p n
() N
() S 2 T (foreachinternlist\(pdDB) S
(\256) sy
(plUsers, &offloaduser, pfFile\);) p n
() N
() S 2 T (fclose\(pfFile\);) N
(}) N
(users.c) (Page 3/3) (Dec 05, 17 23:00) title
border
grestore
(TechOS Sources) rhead
(users.c) (46/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1,1) 47
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#ifndef) K
( TECHOS_COMLISTH) p n
(#define) K
( TECHOS_COMLISTH) p n
() N
(#include) K
( ") p
(command.h) str
(") p n
() N
(/*) c n
( * Represents a list of commands.) N
( */) N
(struct) k
( comlist;) p n
() N
(/* Create/initialize a comlist. */) c n
(struct) k
( comlist *makecomlist\(\);) p n
(/* Deinitialize/destroy a comlist. */) c n
(void) k
(            killcomlist\() p
(struct) k
( comlist *\);) p n
() N
(/*) c n
( * Add a command to a command list.) N
( *) N
( * Takes ) N
( * - The name of the command) N
( * - The brief help for the command) N
( * - The handler for the command) N
( *) N
( * and inserts it into the list.) N
( */) N
(void) k
( addcommand\() p
(struct) k
( comlist *, ) p
(char) k
( *, ) p
(char) k
( *, comfun_t\);) p n
() N
(/* ) c n
( * Get a command based off of its name.) N
( *) N
( * Returns the INVALID_COMMAND if none by that name exist.) N
( */) N
(struct) k
( command *getcommand\() p
(struct) k
( comlist *, ) p
(char) k
( *\);) p n
() N
(/* Execute a function for every command in a list. */) c n
(void) k
( foreachcommand\() p
(struct) k
( comlist *, ) p
(void) k
( \(*comitr\)\() p
(struct) k
( command *\)\);) p n
() N
(/* Print a command list. */) c n
(void) k
( printcommands\() p
(struct) k
( comlist *, ) p
(FILE) k
( *\);) p n
(#endif) K n
(comlist.h) (Page 1/1) (Oct 01, 17 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#ifndef) K
( TECHOS_COMMANDH) p n
(#define) K
( TECHOS_COMMANDH) p n
() N
(#include) K
( ") p
(osstate.h) str
(") p n
() N
(/* Type of a command handler. */) c n
(typedef) K
( ) p
(int) k
( \(*comfun_t\)\() p
(int) k
(, ) p
(char) k
( **, ) p
(char) k
( *, ) p
(struct) k
( osstate *\);) p n
() N
(/* ) c n
( * The various types of commands that are possible.) N
( */) N
(enum) k
( commandtype {) p n
() S 2 T () S
(/* Represents a normal command, represented by a 'struct command'. */) c n
() p 2 T (CT_NORMAL,) N
(};) N
() N
(/* Represents a command. */) c n
(struct) k
( command {) p n
() S 2 T () S
(/*) c n
() S 2 T ( * The type of the command. Should be CT_NORMAL if this is an actual) N
() S 2 T ( * command.) N
() S 2 T ( */) N
() p 2 T () S
(enum) k
( commandtype type;) p n
() N
() S 2 T () S
(/* The name of the command. */) c n
() p 2 T () S
(char) k
( *name;) p n
() N
() S 2 T () S
(/* A brief description of the command. */) c n
() p 2 T () S
(char) k
( *brief;) p n
() N
() S 2 T () S
(/* The function that implements the command. */) c n
() p 2 T (comfun_t comfun;) N
(};) N
() N
(/* An invalid command. */) c n
(static) K
( ) p
(struct) k
( command INVALID_COMMAND = {CT_NORMAL, ") p
(invalid) str
(", "", ) p
(NULL) K
(};) p n
() N
(/* Declare a command. */) c n
(#define) K
( DECLCOM\(name\) ) p
(int) k
( handle_##name\() p
(int) k
(, ) p
(char) k
( **, ) p
(char) k
( *, ) p
(struct) k
( osstate *\)) p n
() N
(/* Define a command handler. */) c n
(#define) K
( HANDLECOM\(nam\) ) p
(int) k
( handle_##nam\() p
(int) k
( argc, ) p
(char) k
( **argv, ) p
(char) k
( *argl, ) p
(struc) k n
(t) S
( osstate *ostate\)) p n
() N
(/* Check if a command that only takes the 'help' argument recieved it. */) c n
(int) k
( checkhelpargs\() p
(int) k
(, ) p
(char) k
( **, ) p
(char) k
( *, ) p
(struct) k
( osstate *\);) p n
() N
(/* Allocate/initialize a normal \(CT_NORMAL\) command. */) c n
(struct) k
( command *makecommand\() p
(char) k
( *, ) p
(char) k
( *, comfun_t\);) p n
(/* Deinitialize/deallocate a command. */) c n
(void) k
(            killcommand\() p
(struct) k
( command *\);) p n
() N
(#endif) K n
(command.h) (Page 1/1) (Oct 07, 17 0:14) title
border
grestore
(TechOS Sources) rhead
(comlist.h, command.h) (47/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1,1) 48
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#ifndef) K
( TECHOS_COMMANDSH) p n
(#define) K
( TECHOS_COMMANDSH) p n
() N
(#include) K
( ") p
(osstate.h) str
(") p n
(#include) K
( ") p
(command.h) str
(") p n
(#include) K
( ") p
(comlist.h) str
(") p n
() N
(/* Header for commands. */) c n
() p n
(/* Initialize data for commands. */) c n
(void) k
( initcoms\(\);) p n
() N
(/* Add all registered commands to a comlist. */) c n
(void) k
( addcommands\() p
(struct) k
( comlist *\);) p n
() N
(/* Cleanup after commands. */) c n
(void) k
( disposecoms\(\);) p n
() N
(/* Declare all of the command handlers. */) c n
(DECLCOM\(exit\);) p n
(DECLCOM\(version\);) N
(DECLCOM\(help\);) N
(DECLCOM\(moo\);) N
() N
(#endif) K n
(commands.h) (Page 1/1) (Nov 09, 17 20:09) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#ifndef) K
( TECHOS_COMMANDSTATEH) p n
(#define) K
( TECHOS_COMMANDSTATEH) p n
() N
(struct) k
( commandstate {) p n
() S 2 T () S
(struct) k
( comlist *plCommands;) p n
(};) N
() N
(/* Allocate/initialize command state. */) c n
(struct) k
( commandstate *makecommandstate\(\);) p n
(/* Deinitialize/deallocate command state. */) c n
(void) k
(                killcommandstate\() p
(struct) k
( commandstate *\);) p n
(#endif) K n
(commandstate.h) (Page 1/1) (Oct 07, 17 19:25) title
border
grestore
(TechOS Sources) rhead
(commands.h, commandstate.h) (48/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1,1) 49
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#ifndef) K
( TECHOS_DATEH) p n
(#define) K
( TECHOS_DATEH) p n
() N
(#include) K
( ") p
(osstate.h) str
(") p n
(#include) K
( ") p
(command.h) str
(") p n
() N
(/* Header for date related commands. */) c n
(DECLCOM\(date\);) p n
(DECLCOM\(datefmt\);) N
(DECLCOM\(setdate\);) N
(DECLCOM\(time\);) N
() N
(#endif) K n
(datecmds.h) (Page 1/1) (Sep 18, 17 20:53) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#ifndef) K
( TECHOS_DISPATCHCMDS_H) p n
(#define) K
( TECHOS_DISPATCHCMDS_H) p n
() N
(#include) K
( ") p
(command.h) str
(") p n
() N
(/* Dispatch pending PCBs. */) c n
(DECLCOM\(dispatch\);) p n
() N
(#endif) K n
(dispatchcmds.h) (Page 1/1) (Oct 25, 17 15:59) title
border
grestore
(TechOS Sources) rhead
(datecmds.h, dispatchcmds.h) (49/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1,1) 50
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#ifndef) K
( TECHOS_FILECMDS) p n
(#define) K
( TECHOS_FILECMDS) p n
() N
(#include) K
( ") p
(osstate.h) str
(") p n
(#include) K
( ") p
(command.h) str
(") p n
() N
(/* Header for file related commands. */) c n
(DECLCOM\(ls\);) p n
(DECLCOM\(cd\);) N
(DECLCOM\(mkdir\);) N
(DECLCOM\(rmdir\);) N
(DECLCOM\(touch\);) N
(DECLCOM\(rm\);) N
() N
(#endif) K n
(filecmds.h) (Page 1/1) (Nov 07, 17 16:45) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#ifndef) K
( ARGPARSER_HEADER) p n
(#define) K
( ARGPARSER_HEADER) p n
() N
(/* ) c n
( * Library for simple parsing of CLI arguments from user input.) N
( */) N
() p n
(/*) c n
( * The maximum number of CLI arguments parsed from a string.) N
( */) N
(#define) K
( MAX_CLI_ARGS 256) p n
() N
(struct) k
( cliargs {) p n
() S 2 T () S
(int) k
(    argc;) p n
() S 2 T () S
(char) k
( **argv;) p n
(};) N
() N
(/*) c n
( * Parse a set of CLI args from a given string.) N
( *) N
( * The main thing this does that strtok doesn't, is that this properly handles) N
( * double/single quoted strings as grouping.) N
( *) N
( * NOTE 1: The lifetime of the array of arguments is disjoint from the provided) N
( * string.) N
( *) N
( * NOTE 2: The provided string is mutated.) N
( */) N
(struct) k
( cliargs parseargs\() p
(char) k
( *\);) p n
(#endif) K n
(argparser.h) (Page 1/1) (Oct 07, 17 19:20) title
border
grestore
(TechOS Sources) rhead
(filecmds.h, libs/argparser.h) (50/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 51
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#ifndef) K
( INTERN_HEADER) p n
(#define) K
( INTERN_HEADER) p n
() N
(/*) c n
( * Handle interning of string constants for quick equality checking.) N
( */) N
() p n
(/* An intern key is a reference to a string in an intern table. */) c n
(typedef) K
( ) p
(int) k
( internkey;) p n
() N
(/* The invalid intern key. */) c n
(static) K
( internkey SIINVALID = -1;) p n
(/* The code that indicates the intern table is full. */) c n
(static) K
( internkey SITABFULL = -2;) p n
() N
(/*) c n
( * A interntab is a hash table that contains interned strings.) N
( *) N
( * Used to be called boss, because someone has to manage a bunch of interns.) N
( * However, this is a serious program, and we should have meaningful, not funny) N
( * names.) N
( */) N
(struct) k
( interntab;) p n
() N
(/* Create/destroy a intern table. */) c n
(struct) k
( interntab *makeinterntab\(\);) p n
(void) k
(              killinterntab\() p
(struct) k
( interntab *\);) p n
() N
(/*) c n
( * Intern a string into a intern table.) N
( *) N
( * Returns the 'intern key' for the string, or a negative error code if) N
( * something failed.) N
( *) N
( * Anything 0 or less is never a valid intern key.) N
( */) N
(internkey internstring\() p
(struct) k
( interntab *, ) p
(const) K
( ) p
(char) k
( *\);) p n
() N
(/*) c n
( * Lookup the intern key for a given string.) N
( *) N
( * Returns the key if the string was found, or SIINVALID if the given string isn) N
('t) N
( * interned.) N
( */) N
(internkey lookupstring\() p
(struct) k
( interntab *, ) p
(const) K
( ) p
(char) k
( *\);) p n
() N
(/*) c n
( * Lookup the string for a given intern key.) N
( *) N
( * Returns the string if the key was found, or NULL if the given key is invalid.) N
( */) N
(const) K
( ) p
(char) k
( *lookupkey\() p
(struct) k
( interntab *, internkey\);) p n
() N
(/* Type of an iterator over an intern table. */) c n
(typedef) K
( ) p
(void) k
( \(*tableitr\)\() p
(const) K
( ) p
(char) k
( *, internkey, ) p
(void) k
( *\);) p n
() N
(/* Execute an action for every key in a table. */) c n
(void) k
( foreachintern\() p
(struct) k
( interntab *, tableitr, ) p
(void) k
( *\);) p n
(/*) c n
( * Handle easy, if space-inefficent storage of things keyed by interned strings.) N
( */) N
(intern.h) (Page 1/2) (Nov 29, 17 18:44) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(/* An intern list is a mapping from strings to data. */) c n
(struct) k
( internlist;) p n
() N
(/*) c n
( * Create an intern list.) N
( *) N
( * Takes the initial capacity for the intern list, and the function to use to) N
( * destroy items in the intern list.) N
( */) N
(struct) k
( internlist *makeinternlist\() p
(int) k
(, ) p
(void) k
( \(*pfDestroy\)\() p
(void) k
( *\)\);) p n
(/* Destroy an intern list. */) c n
(void) k
(               killinternlist\() p
(struct) k
( internlist *\);) p n
() N
(/* Insert an item into the list. */) c n
(void) k
(  putinternlist\() p
(struct) k
( internlist *, ) p
(char) k
( *, ) p
(void) k
( *\);) p n
(/* ) c n
( * Get an item from an intern list. ) N
( *) N
( * Returns NULL if there is no item for that key. ) N
( */) N
(void) k
( *getinternlist\() p
(struct) k
( internlist *, ) p
(char) k
( *\);) p n
(/* Delete an item from an intern list. */) c n
(void) k
(  deleteinternlist\() p
(struct) k
( internlist *, ) p
(char) k
( *\);) p n
(/* ) c n
( * Check if an item is in an intern list. ) N
( *) N
( * Returns 0 if the item is not cotinained, 1 oterhwise.) N
( */) N
(int) k
(  containsinternlist\() p
(struct) k
( internlist *, ) p
(char) k
( *\);) p n
() N
(typedef) K
( ) p
(void) k
( \(*internlistitr\)\() p
(char) k
( *, ) p
(void) k
( *, ) p
(void) k
( *\);) p n
(/* Execute something for every key-value pair in the list. */) c n
(void) k
( foreachinternlist\() p
(struct) k
( internlist *, internlistitr, ) p
(void) k
( *\);) p n
(#endif) K n
(intern.h) (Page 2/2) (Nov 29, 17 18:44) title
border
grestore
(TechOS Sources) rhead
(libs/intern.h) (51/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 52
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#ifndef) K
( TECHOS_OSSTATEH) p n
(#define) K
( TECHOS_OSSTATEH) p n
() N
(#include) K
( <stdio.h>) p n
() N
(#include) K
( <time.h>) p n
() N
(#include) K
( ") p
(users.h) str
(") p n
() N
(#define) K
( MAX_FMT_SIZE 256) p n
() N
(/* Default date formats. */) c n
(extern) K
( ) p
(char) k
( *defin_datefmt;) p n
(extern) K
( ) p
(char) k
( *deftime_datefmt;) p n
(extern) K
( ) p
(char) k
( *defout_datefmt;) p n
() N
(/* Forward-declare of command state declared elsewhere. */) c n
(struct) k
( commandstate;) p n
() N
(/* General structure for OS-level state. */) c n
(/* @TODO 10/07/17 Ben Culkin :OSStateRestructure) N
( * ) S 4 T (Split the seperate system states into seperate structs. This is so that) N
( * ) S 4 T (various systems can be made aware of only the state parts they need to,) N
( * ) S 4 T (as well as allowing various instances to be swapped around using) N
( * ) S 4 T (commands so as to handle 'user profiles' or something along those lines.) N
( */) N
(struct) k
( osstate {) p n
() S 2 T () S
(/* :OSStateRestructure) c n
() S 2 T ( * ) S 6 T (This will go into a 'struct datestate' or something along those) N
() S 2 T ( * ) S 6 T (lines.) N
() S 2 T ( */) N
() p 2 T () S
(/* Time/date variables. */) c n
() p 2 T () S
(/* Input/output/time date formats. */) c n
() p 2 T () S
(char) k
( *in_datefmt;) p n
() S 2 T () S
(char) k
( *out_datefmt;) p n
() S 2 T () S
(char) k
( *time_datefmt;) p n
() S 2 T () S
(/* Current time/date. */) c n
() p 2 T () S
(struct) k
( tm *datetime;) p n
() S 2 T () N
() S 2 T () S
(/* :OSStateRestructure) c n
() S 2 T ( * ) S 6 T (This will go into a 'struct iostate' or something like that.) N
() S 2 T ( */) N
() p 2 T () S
(/* Input/output streams. */) c n
() p 2 T () S
(/*) c n
() S 2 T ( * @TODO 10/07/17 Ben Culkin :IORefactor) N
() S 2 T ( * ) S 6 T (Do the following things to cleanup the way I/O is handled:) N
() S 2 T ( * ) S 6 T () S 8 T (- Rename strem to something else) N
() S 2 T ( * ) S 6 T () S 8 T (- Split command/user input in someway. Not sure of the) N
() S 2 T ( * ) S 6 T () S 8 T () S 10 T (best way to go about this; having two seperate) N
() S 2 T ( * ) S 6 T () S 8 T () S 10 T (file handles that may refer to the same thing) N
() S 2 T ( * ) S 6 T () S 8 T () S 10 T (might be the best solution.) N
() S 2 T ( * ) S 6 T () S 8 T (- Split error/normal output the same way command/user) N
() S 2 T ( * ) S 6 T () S 8 T () S 10 T (input is split.) N
() S 2 T ( * ) S 6 T () S 8 T (- Put I/O into functions. Create various functions to do) N
() S 2 T ( * ) S 6 T () S 8 T () S 10 T (things like print 'ERROR' and 'INTERNAL ERROR') N
() S 2 T ( * ) S 6 T () S 8 T () S 10 T (messages with a consistent format. Also,) N
() S 2 T ( * ) S 6 T () S 8 T () S 10 T (consider doing something similiar with input,) N
() S 2 T ( * ) S 6 T () S 8 T () S 10 T (but none come to mind for it.) N
() S 2 T ( */) N
() p 2 T () S
(/* The stream we read input from. */) c n
() p 2 T () S
(FILE) k
( *strem;) p n
() S 2 T () S
(/* The stream we output to. */) c n
(osstate.h) (Page 1/2) (Nov 29, 17 19:11) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S
(FILE) k
( *output;) p n
() N
() S 2 T () S
(/* Process control state. */) c n
() p 2 T () S
(struct) k
( pcbstate *pPCBstat;) p n
() S 2 T () N
() S 2 T () S
(/* Command state. */) c n
() p 2 T () S
(struct) k
( commandstate *pComstate;) p n
() N
() S 2 T () S
(/* Base working directory for the OS. */) c n
() p 2 T () S
(int) k
( fWorkingDir;) p n
() N
() S 2 T () S
(/* Currently logged in user. */) c n
() p 2 T () S
(struct) k
( user *puCurrent;) p n
() S 2 T () S
(/* Database of users. */) c n
() p 2 T () S
(struct) k
( userdb *pdUsers;) p n
(};) N
() N
(/* Create/delete an osstate. */) c n
(struct) k
( osstate *makeosstate\(\);) p n
(void) k
(             killosstate\() p
(struct) k
( osstate *\);) p n
(#endif) K n
(osstate.h) (Page 2/2) (Nov 29, 17 19:11) title
border
grestore
(TechOS Sources) rhead
(osstate.h) (52/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1,1) 53
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#ifndef) K
( TECHOS_PCBCMDS) p n
(#define) K
( TECHOS_PCBCMDS) p n
() N
(#include) K
( ") p
(osstate.h) str
(") p n
(#include) K
( ") p
(command.h) str
(") p n
() N
(/* Header for pcb related commands. */) c n
(DECLCOM\(mkpcb\);) p n
(DECLCOM\(rmpcb\);) N
(DECLCOM\(sspcb\);) N
(DECLCOM\(rspcb\);) N
(DECLCOM\(sppcb\);) N
(DECLCOM\(shpcb\);) N
() N
(#endif) K n
(pcbcmds.h) (Page 1/1) (Oct 11, 17 17:00) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#ifndef) K
( TECHOS_PCBH) p n
(#define) K
( TECHOS_PCBH) p n
() N
(#include) K
( ") p
(libs/intern.h) str
(") p n
() N
(#define) K
( PCB_MINPRIOR 0) p n
(#define) K
( PCB_MAXPRIOR 9) p n
() N
(/* Represents the classification of a PCB. */) c n
(enum) k
( pcbclass {) p n
() S 2 T () S
(/* A system process. */) c n
() p 2 T (PCB_SYSTEM      = 0,) N
() S 2 T () S
(/* An application process. */) c n
() p 2 T (PCB_APPLICATION = 1,) N
(};) N
() N
(/* PCB run status. */) c n
(enum) k
( pcbstatus {) p n
() S 2 T () S
(/* The process is blocked. */) c n
() p 2 T (PCB_BLOCKED = 0,) N
() S 2 T () S
(/* The process is ready to run. */) c n
() p 2 T (PCB_READY   = 1,) N
() S 2 T () S
(/* The process is running. */) c n
() p 2 T (PCB_RUNNING = 2,) N
(};) N
() N
(/* PCB Suspension status. */) c n
(enum) k
( pcbsusp {) p n
() S 2 T () S
(/* The process is suspended. */) c n
() p 2 T (PCB_SUSPENDED = 0,) N
() S 2 T () S
(/* The process is not suspended. */) c n
() p 2 T (PCB_FREE      = 1,) N
(};) N
() N
(/* Represents a running process. */) c n
(struct) k
( pcb {) p n
() S 2 T () S
(/* ) c n
() S 2 T ( * Process ID.) N
() S 2 T ( *) N
() S 2 T ( * Unique identifier for the processes.) N
() S 2 T ( */) N
() p 2 T () S
(int) k
( id;) p n
() S 2 T () S
(/* ) c n
() S 2 T ( * Process name.) N
() S 2 T ( *) N
() S 2 T ( * Stored as a interned string, for fast comparisons.) N
() S 2 T ( */) N
() p 2 T (internkey     kName;) N
() N
() S 2 T () S
(/* Process class. */) c n
() p 2 T () S
(enum) k
( pcbclass clas;) p n
() S 2 T () S
(/* Process priority. */) c n
() p 2 T () S
(int) k
(           priority;) p n
() N
() S 2 T () S
(/* PCB status indicators. */) c n
() p 2 T () S
(/* Whether the PCB is ready, running or blocked. */) c n
() p 2 T () S
(enum) k
( pcbstatus status;) p n
() S 2 T () S
(/* Whether the PCB is suspended or not. */) c n
() p 2 T () S
(enum) k
( pcbsusp   susp;) p n
() N
() S 2 T () S
(/* Process state indicators. */) c n
() p 2 T () S
(/* The image for this process. */) c n
(pcb.h) (Page 1/3) (Oct 25, 17 17:25) title
border
grestore
(TechOS Sources) rhead
(pcbcmds.h, pcb.h) (53/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2-3) 54
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T (internkey kImage;) N
() S 2 T () S
(/* The current offset into the process. */) c n
() p 2 T () S
(int) k
( offset;) p n
() N
() S 2 T () S
(/* The next process in whatever queue this PCB is in. */) c n
() p 2 T () S
(struct) k
( pcb *pNext;) p n
() S 2 T () S
(/* The previous process in whatever queue this PCB is in. */) c n
() p 2 T () S
(struct) k
( pcb *pPrev;) p n
(};) N
() N
(/* Represents a circular queue of PCBs. */) c n
(struct) k
( pcbqueue;) p n
() N
(/* Contains all of the PCB queues. */) c n
(struct) k
( pcbstate;) p n
() N
(/* Allocate a new PCB. */) c n
(struct) k
( pcb *makepcb\() p
(struct) k
( pcbstate *, ) p
(char) k
( *, ) p
(char) k
( *, ) p
(enum) k
( pcbclass, ) p
(int) k
(\);) p n
(/* Deallocate a PCB. */) c n
(void) k
(        killpcb\() p
(struct) k
( pcb *\);) p n
() N
(/*) c n
( * Find a PCB by its process number in a set of queues. ) N
( *) N
( * Returns NULL if the PCB wasn't found.) N
( */) N
(struct) k
( pcb *findpcbnum\() p
(struct) k
( pcbstate *, ) p
(int) k
(\);) p n
(/*) c n
( * Find a PCB by its process name in a set of queues.) N
( *) N
( * Returns NULL if the PCB wasn't found.) N
( *) N
( * WARNING: Will only return the first PCB by a given name, searching the) N
( * queues in a defined but unspecified way.) N
( */) N
(struct) k
( pcb *findpcbname\() p
(struct) k
( pcbstate *, ) p
(char) k
( *\);) p n
() N
(/* insertpcb\(\) errors */) c n
(enum) k
( pcberror {) p n
() S 2 T (PCBSUCCESS =  0,) N
() S 2 T (PCBINVSUSP = -1,) N
() S 2 T (PCBINVSTAT = -2,) N
() S 2 T (PCBRUNNING = -3,) N
() S 2 T (PCBINQUEUE = -4,) N
(};) N
(/*) c n
( * Insert a PCB into the proper queue.) N
( *) N
( * Returns PCBSUCCESS on success or an error code on failure.) N
( * Can have one of the following errors:) N
( * - PCBINVSUSP: Invalid PCB suspension status) N
( * - PCBINVSTAT: Invalid PCB run status) N
( * - PCBRUNNING: Attempted to add a running PCB to a queue.) N
( * - PCBINQUEUE: Attempted to add a PCB that is already in a queue.) N
( */) N
(enum) k
( pcberror insertpcb\() p
(struct) k
( pcbstate *, ) p
(struct) k
( pcb *\);) p n
(/*) c n
( * Remove a PCB from the queue it is in.) N
( *) N
( * WARNING: Attempting to remove a PCB that is not in a queue from a queue may) N
( * cause weirdness to happen.) N
( */) N
(pcb.h) (Page 2/3) (Oct 25, 17 17:25) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(void) k
( removepcb\() p
(struct) k
( pcbstate *, ) p
(struct) k
( pcb *\);) p n
(/*) c n
( * Print a PCB.) N
( *) N
( * The void pointer should be a pointer to an OS state, but is a void* to comply) N
( * with foreachpcb\(\)) N
( */) N
(void) k
( printpcb\() p
(struct) k
( pcb *, ) p
(void) k
( *\);) p n
() N
(/*) c n
( * Dispatching related commands.) N
( */) N
() p n
(/*) c n
( * Check if there are any processes to dispatch.) N
( *) N
( * Returns the number of dispatchable processes.) N
( */) N
(int) k
( candispatch\() p
(struct) k
( pcbstate *\);) p n
(/* ) c n
( * Get a process to dispatch. ) N
( *) N
( * A dispatchable process is one that is not suspended.) N
( *) N
( * Returns the dispatchable process, or NULL if none were available.) N
( */) N
(struct) k
( pcb *getdispppcb\() p
(struct) k
( pcbstate *\);) p n
(#endif) K n
(pcb.h) (Page 3/3) (Oct 25, 17 17:25) title
border
grestore
(TechOS Sources) rhead
(pcb.h) (54/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 55
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#ifndef) K
( TECHOS_PCBINTERNH) p n
(#define) K
( TECHOS_PCBINTERNH) p n
() N
(/* Internal PCB structures. */) c n
() p n
(/*) c n
( * Represents the types of PCB queue that exist.) N
( */) N
(enum) k
( queuetype {) p n
() S 2 T () S
(/* ) c n
() S 2 T ( * A normal, FIFO PCB queue.) N
() S 2 T ( *) N
() S 2 T ( * Represented by a struct pcbqueue.) N
() S 2 T ( */) N
() p 2 T (QT_NORMAL,) N
() S 2 T () S
(/*) c n
() S 2 T ( * A priority PCB queue.) N
() S 2 T ( *) N
() S 2 T ( * Represented by a struct pcbqueueprior.) N
() S 2 T ( */) N
() p 2 T (QT_PRIORITY) N
(};) N
() N
(/* Represents a circular queue of PCBs. */) c n
(struct) k
( pcbqueue {) p n
() S 2 T () S
(/*) c n
() S 2 T ( * Represents the type of queue this is.) N
() S 2 T ( *) N
() S 2 T ( * For this struct, it should be QT_NORMAL.) N
() S 2 T ( */) N
() p 2 T () S
(enum) k
( queuetype type;) p n
() N
() S 2 T () S
(/* # of processes in this queue. */) c n
() p 2 T () S
(int) k
( nprocs;) p n
() N
() S 2 T () S
(/* The first process in this queue. */) c n
() p 2 T () S
(struct) k
( pcb *pHead;) p n
(};) N
() N
(/* A priority queue of PCBs. */) c n
(struct) k
( pcbqueueprior {) p n
() S 2 T () S
(/*) c n
() S 2 T ( * Represents the type of queue this is.) N
() S 2 T ( */) N
() p 2 T () S
(enum) k
( queuetype type;) p n
() N
() S 2 T () S
(/* # of processes in this queue. */) c n
() p 2 T () S
(int) k
( nprocs;) p n
() N
() S 2 T () S
(/* ) c n
() S 2 T ( * The list of queues for each priority.) N
() S 2 T ( */) N
() p 2 T () S
(struct) k
( pcbqueue **apqQueues; ) p 32 T () N
(};) N
() N
(/* Contains all of the PCB queues. */) c n
(struct) k
( pcbstate {) p n
() S 2 T () S
(/* PCB name table. */) c n
() p 2 T () S
(struct) k
( interntab *ptPCBNames;) p n
() S 2 T () S
(/* PCB image table. */) c n
() p 2 T () S
(struct) k
( interntab *ptPCBImages;) p n
() N
(pcbinternals.h) (Page 1/2) (Nov 03, 17 15:42) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 2 T () S
(/* Next process ID. */) c n
() p 2 T () S
(int) k
( nProcid;) p n
() N
() S 2 T () S
(/* Ready PCBs. */) c n
() p 2 T () S
(struct) k
( pcbqueue *pqReady;) p n
() S 2 T () S
(/* Blocked PCBs. */) c n
() p 2 T () S
(struct) k
( pcbqueue *pqBlocked;) p n
() N
() S 2 T () S
(/* Suspended Ready PCBs. */) c n
() p 2 T () S
(struct) k
( pcbqueue *pqsReady;) p n
() S 2 T () S
(/* Suspended Blocked PCBs. */) c n
() p 2 T () S
(struct) k
( pcbqueue *pqsBlocked;) p n
(};) N
() N
(/* Execute an action for all of the PCBs in a queue. */) c n
(void) k
( foreachpcb\() p
(struct) k
( pcbqueue *, ) p
(void) k
( \(*pcbitr\)\() p
(struct) k
( pcb *, ) p
(void) k
( *\), ) p
(void) k
( *\)) p n
(;) N
() N
(/* Allocate/initialize normal \(QT_NORMAL\) PCB queue. */) c n
(struct) k
( pcbqueue *makepcbqueue\(\);) p n
(/* Allocate/initialize PCB queue of a specific type. */) c n
(struct) k
( pcbqueue *maketypedpcbqueue\() p
(enum) k
( queuetype\);) p n
() N
(/* ) c n
( * Deinitialize/deallocate PCB queue.) N
( *) N
( * NOTE: Killing a PCB queue kills all PCBs currently enqueued.) N
( */) N
(void) k
( killpcbqueue\() p
(struct) k
( pcbqueue *\);) p n
() N
(/* ) c n
( * Remove the first PCB from a queue.) N
( *) N
( * Returns the PCB removed, or null if the queue was empty.) N
( */) N
(struct) k
( pcb *poppcb\() p
(struct) k
( pcbstate *, ) p
(struct) k
( pcbqueue *\);) p n
() N
(/* Allocate/initialize a PCB state. */) c n
(struct) k
( pcbstate *makepcbstate\(\);) p n
(/* Deinitialize/deallocate a PCB state. */) c n
(void) k
(             killpcbstate\() p
(struct) k
( pcbstate *\);) p n
(#endif) K n
(pcbinternals.h) (Page 2/2) (Nov 03, 17 15:42) title
border
grestore
(TechOS Sources) rhead
(pcbinternals.h) (55/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1,1) 56
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#ifndef) K
( TECHOS_PROCEXECUTE_H) p n
(#define) K
( TECHOS_PROCEXECUTE_H) p n
() N
(/* ) c n
( * Execute an image loaded from a file.) N
( *) N
( * Takes an offset into the image and returns:) N
( * - 0 if the process has finished executing) N
( * - The new offset into the image if it hasn't) N
( */) N
(int) k
( executeimage\() p
(FILE) k
( *, ) p
(int) k
(\);) p n
(#endif) K n
(procexecute.h) (Page 1/1) (Oct 25, 17 15:13) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#ifndef) K
( TECHOS_SCRIPTH) p n
(#define) K
( TECHOS_SCRIPTH) p n
() N
(#include) K
( ") p
(osstate.h) str
(") p n
(#include) K
( ") p
(command.h) str
(") p n
() N
(/* Load/execute a script file. */) c n
(DECLCOM\(script\);) p n
(/* Do various other things with scripts. */) c n
(DECLCOM\(scriptctl\);) p n
() N
(#endif) K n
(scriptcmds.h) (Page 1/1) (Sep 19, 17 10:37) title
border
grestore
(TechOS Sources) rhead
(procexecute.h, scriptcmds.h) (56/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1,1) 57
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#ifndef) K
( TECHOS_HEADER) p n
(#define) K
( TECHOS_HEADER) p n
() N
(#include) K
( ") p
(libs/argparser.h) str
(") p n
() N
(#include) K
( ") p
(osstate.h) str
(") p n
(#include) K
( ") p
(command.h) str
(") p n
() N
(/*) c n
( * Main TechOS header.) N
( */) N
() p n
(/* List of all commands. */) c n
(extern) K
( ) p
(struct) k
( comlist *all_commands;) p n
() N
(/* The major/minor version of TechOS. */) c n
(extern) K
( ) p
(const) K
( ) p
(int) k
( major_ver;) p n
(extern) K
( ) p
(const) K
( ) p
(int) k
( minor_ver;) p n
() N
(/*) c n
( * Main command handler.) N
( *) N
( * Loops reading commands and handling them until EOF or an exit command is) N
( * handled.) N
( */) N
(void) k
( comhan\() p
(struct) k
( osstate *\);) p n
() N
(/*) c n
( * Executes a command from a line of input.) N
( *) N
( * The reason this is seperated is so that things like file input and aliases) N
( * \(if we want them\) can be more easily implemented.) N
( */) N
(int) k
( handleline\() p
(struct) k
( osstate *, ) p
(char) k
( *\);) p n
() N
(/*) c n
( * Command executor.) N
( *) N
( * Gathers the CLI args for a command, and then executes it.) N
( */) N
(int) k
( execcom\() p
(struct) k
( command *, ) p
(struct) k
( cliargs, ) p
(char) k
( *, ) p
(struct) k
( osstate *\);) p n
() N
(/* Log a user in. */) c n
(void) k
( loginuser\() p
(struct) k
( osstate *\);) p n
(#endif) K n
(techos.h) (Page 1/1) (Dec 04, 17 2:40) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#ifndef) K
( TECHOS_USERCMDS) p n
(#define) K
( TECHOS_USERCMDS) p n
() N
(#include) K
( ") p
(osstate.h) str
(") p n
(#include) K
( ") p
(command.h) str
(") p n
() N
(/* Header for file related commands. */) c n
(DECLCOM\(mkusr\);) p n
(DECLCOM\(rmusr\);) N
(DECLCOM\(pwd\);) N
(DECLCOM\(toggleadm\);) N
() N
(#endif) K n
(usercmds.h) (Page 1/1) (Dec 04, 17 2:34) title
border
grestore
(TechOS Sources) rhead
(techos.h, usercmds.h) (57/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1,1) 58
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#ifndef) K
( TECHOS_USERS_H) p n
(#define) K
( TECHOS_USERS_H) p n
() N
(/* The types of users available. */) c n
(enum) k
( utype {) p n
() S 2 T () S
(/* Basic User) c n
() S 2 T ( *) N
() S 2 T ( * Have access to all normal commands.) N
() S 2 T ( */) N
() p 2 T (UTY_BASIC,) N
() S 2 T () S
(/*) c n
() S 2 T ( * Administrator) N
() S 2 T ( *) N
() S 2 T ( * All the permissions of basic users, plus the ability to) N
() S 2 T ( * create/delete/modify basic users.) N
() S 2 T ( */) N
() p 2 T (UTY_ADMIN,) N
() S 2 T () S
(/*) c n
() S 2 T ( * Root Administrator) N
() S 2 T ( *) N
() S 2 T ( * All the permissions of administrators, plus the ability to) N
() S 2 T ( * create/delete/modify administrators.) N
() S 2 T ( */) N
() p 2 T (UTY_ROOT,) N
(};) N
() N
(/* Represents a TechOS user. */) c n
(struct) k
( user {) p n
() S 2 T () S
(/* The type of the user. */) c n
() p 2 T () S
(enum) k
( utype type;) p n
() N
() S 2 T () S
(/* The name of the user. */) c n
() p 2 T () S
(char) k
( *pszName;) p n
() S 2 T () S
(/* The password of the user. */) c n
() p 2 T () S
(char) k
( *pszPass;) p n
(};) N
() N
(/* Represents all of the available users. */) c n
(struct) k
( userdb;) p n
() N
(/* Create a user DB. */) c n
(struct) k
( userdb *makeudb\(\);) p n
(/* Destroy a user DB. */) c n
(void) k
(           killudb\() p
(struct) k
( userdb *\);) p n
(/* Insert a user into the database. */) c n
(void) k
(          udbinsert\() p
(struct) k
( userdb *, ) p
(enum) k
( utype, ) p
(char) k
( *, ) p
(char) k
( *\);) p n
(/* ) c n
( * Lookup a user in the user database.) N
( *) N
( * Returns NULL if there  is no user by that name.) N
( */) N
(struct) k
( user *udblookup\() p
(struct) k
( userdb *, ) p
(char) k
( *\);) p n
(/* Remove a user by name from the user database. */) c n
(void) k
(         udbremove\() p
(struct) k
( userdb *, ) p
(char) k
( *\);) p n
() N
(/* Load user database from a file. */) c n
(void) k
( ramfileintodb\() p
(struct) k
( userdb *, ) p
(char) k
( *\);) p n
(/* Save user database to a file. */) c n
(void) k
( ramdbintofile\() p
(struct) k
( userdb *, ) p
(char) k
( *\);) p n
(#endif) K n
(users.h) (Page 1/1) (Nov 29, 17 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(crux:fountainhead:hub) p n
(user2:pass2:rim) N
(user3:pass3:spoke) N
(users.txt) (Page 1/1) (Dec 05, 17 23:00) title
border
grestore
(TechOS Sources) rhead
(users.h, users.txt) (58/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage
BeginInclude
%%BeginDocument: help/blpcb.1
%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Mon Oct 22 22:57:26 2018
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 1 0
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 131.78(BLPCB\(1\) General)72 48 R
(Commands Manual)2.5 E(BLPCB\(1\))134.28 E/F1 10.95/Times-Bold@0 SF
-.219(NA)72 84 S(ME).219 E F0
(blpcb \255 block a PCB and place it back into a queue)108 96 Q F1
(SYNOPSIS)72 112.8 Q/F2 10/Times-Bold@0 SF(blpcb)108 124.8 Q F0([)2.5 E
/F3 10/Times-Italic@0 SF<ad68>2.14 E F0 2.5(][)2.78 G F3(\255\255help)
-.36 E F0 2.5(][)2.69 G F3<adad7072>-.36 E(oc name|num)-.45 E F0(])2.82
E F3(<pr)2.16 E(ocess-name>|<pr)-.45 E(ocess_id>)-.45 E F1(DESCRIPTION)
72 141.6 Q F0(Ex)108 153.6 Q
(ecutes commands read from a script line by line)-.15 E F1(OPTIONS)72
170.4 Q F2(\255h, \255\255help)108 182.4 Q F0(Sho)144 194.4 Q 3.287(was)
-.25 G .787(hort usage message.)-3.287 F F2(--pr)5.787 E .787
(oc name|num)-.18 F F0 .787(Designate whether gi)3.287 F -.15(ve)-.25 G
3.287(nv).15 G .787(alue is process name)-3.537 F(or ID)144 206.4 Q F1
(NO)72 223.2 Q(TES)-.438 E F0(--proc def)108 235.2 Q
(aults to name if not speci\214ed)-.1 E F1 -.548(AU)72 252 S(THOR).548 E
F0(Lucas Darnell, Benjamin Culkin, and Jared Miller)108 264 Q(1)535 768
Q 0 Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
end
%%EOF
%%EndDocument
EndInclude
BeginInclude
%%BeginDocument: help/cd.1
%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Mon Oct 22 22:57:27 2018
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 1 0
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 149.57(CD\(1\) General)72 48 R(Commands Manual)
2.5 E(CD\(1\))152.07 E/F1 10.95/Times-Bold@0 SF(CD)72 84 Q F0
(chdir \255 change the current w)108 96 Q(orking directory)-.1 E F1
(SYNOPSIS)72 112.8 Q/F2 10/Times-Bold@0 SF(cd)108 124.8 Q F0([)2.5 E/F3
10/Times-Italic@0 SF<ad68>2.14 E F0 2.5(][)2.78 G F3(\255\255help)-.36 E
F0(])2.69 E F1(DESCRIPTION)72 141.6 Q F0(Changes the current w)108 153.6
Q(orking directory to the one speci\214ed)-.1 E F1(OPTIONS)72 170.4 Q F2
(\255h, \255\255help)108 182.4 Q F0(Sho)144 194.4 Q 2.5(was)-.25 G
(hort usage message)-2.5 E F1(NO)72 211.2 Q(TES)-.438 E F0
(Nothing in particular at the moment)108 223.2 Q F1 -.548(AU)72 240 S
(THOR).548 E F0(Jared Miller)108 252 Q 2.5(,L)-.4 G
(ucas Darnell and Benjamin Culkin)-2.5 E(1)535 768 Q 0 Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
end
%%EOF
%%EndDocument
EndInclude
BeginInclude
%%BeginDocument: help/date.1
%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Mon Oct 22 22:57:27 2018
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 1 0
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF -.4(DA)72 48 S 138.31(TE\(1\) General)-.71 F
(Commands Manual)2.5 E -.4(DA)140.81 G(TE\(1\))-.71 E/F1 10.95
/Times-Bold@0 SF -.219(NA)72 84 S(ME).219 E F0
(date \255 display the current date)108 96 Q F1(SYNOPSIS)72 112.8 Q/F2
10/Times-Bold@0 SF(date)108 124.8 Q F0([)2.5 E/F3 10/Times-Italic@0 SF
(-h)2.51 E F0 2.5(][)2.78 G F3(--help).01 E F0(])2.69 E F1(DESCRIPTION)
72 141.6 Q F0(Displays the date in the format speci\214ed by datefmt)108
153.6 Q F1(OPTIONS)72 170.4 Q F2(\255h, \255\255help)108 182.4 Q F0(Sho)
144 194.4 Q 2.5(was)-.25 G(hort usage message.)-2.5 E F1(NO)72 211.2 Q
(TES)-.438 E F0(Nothing in particular at the moment)108 223.2 Q F1 -.548
(AU)72 240 S(THOR).548 E F0(Jared Miller)108 252 Q 2.5(,L)-.4 G
(ucas Darnell and Benjamin Culkin)-2.5 E(1)535 768 Q 0 Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
end
%%EOF
%%EndDocument
EndInclude
BeginInclude
%%BeginDocument: help/datefmt.1
%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Mon Oct 22 22:57:27 2018
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 2 0
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF -.4(DA)72 48 S 117.75(TEFMT\(1\) General)-.71 F
(Commands Manual)2.5 E -.4(DA)120.25 G(TEFMT\(1\))-.71 E/F1 10.95
/Times-Bold@0 SF -.219(NA)72 84 S(ME).219 E F0(datefmt \255 sho)108 96 Q
2.5(wd)-.25 G(ate in a speci\214c format)-2.5 E F1(SYNOPSIS)72 112.8 Q
/F2 10/Times-Bold@0 SF(datefmt)108 124.8 Q F0([)2.5 E/F3 10
/Times-Italic@0 SF(-stdioh)2.51 E F0 2.5(][)2.78 G F3(--help).01 E F0
2.5(][)2.69 G F3(--set | --display).01 E F0 2.5(][)2.82 G F3
(--time | --in --out).01 E F0(])3.18 E F1(DESCRIPTION)72 153.6 Q F0(Sho)
108 165.6 Q 2.5(wd)-.25 G
(ate in a speci\214c format, and it can be changed using the -s ar)-2.5
E(gument.)-.18 E F1(SPECIAL CHARA)72 194.4 Q(CTERS)-.602 E F2(%a)108
206.4 Q F0 2.5(The abbre)144 206.4 R 2.5(viated name)-.25 F 2.5(of the)
14.39 F(day of the week according to the current locale.)2.5 E F2(%A)108
223.2 Q F0(The full name of the day of the week according)144 223.2 Q
2.5(to the current)5 F(locale.)2.5 E F2(%b)108 240 Q F0(The abbre)144
240 Q(viated month name according to the current locale.)-.25 E F2(%B)
108 256.8 Q F0(The full month name according to the current locale.)144
256.8 Q F2(%c)108 273.6 Q F0 2.5
(The preferred date and time representation for)144 273.6 R
(the current locale.)2.5 E F2(%C)108 290.4 Q F0
(The century number \(year/100\) as a 2-digit inte)144 290.4 Q(ger)-.15
E 2.5(.\()-.55 G(SU\))-2.5 E F2(%d)108 307.2 Q F0
(The day of the month as a decimal number \(range 01 to 31\).)144 307.2
Q F2(%D)108 324 Q F0(Equi)144 324 Q -.25(va)-.25 G 1.943
(lent to %m/%d/%y).25 F 4.443(.\()-.65 G -1(Ye)-4.443 G 1.942
(cch \342 for Americans only)1 F 4.442(.A)-.65 G 1.942
(mericans should note that in other)-4.442 F 1.33(countries %d/%m/%y is\
 rather common. This means that in international conte)144 336 R 1.33
(xt this format is)-.15 F(ambiguous and should not be used.\) \(SU\))144
348 Q F2(%e)108 364.8 Q F0(Lik)144 364.8 Q 3.618(e%)-.1 G 1.118
(d, the day of the month as a decimal number)-3.618 F 3.617(,b)-.4 G
1.117(ut a leading zero is replaced by a space.)-3.817 F(\(SU\))144
376.8 Q F2(%E)108 393.6 Q F0(Modi\214er: use alternati)144 393.6 Q .3
-.15(ve f)-.25 H(ormat, see belo).15 E 1.3 -.65(w. \()-.25 H(SU\)).65 E
F2(%F)108 410.4 Q F0(Equi)144 410.4 Q -.25(va)-.25 G(lent to).25 E F2
(%Y)2.5 E(-%m-%d)-.92 E F0(\(the ISO 8601 date format\). \(C99\))2.5 E
F2(%G)108 427.2 Q F0 .303(The ISO 8601 week-based year \(see NO)144
427.2 R .303(TES\) with century as a decimal number)-.4 F 5.304(.T)-.55
G .304(he 4-digit year)-5.304 F 1.223
(corresponding to the ISO week number \(see %V\).)144 439.2 R 1.223
(This has the same format and v)6.223 F 1.223(alue as %Y)-.25 F(,)-1.29
E -.15(ex)144 451.2 S .05(cept that if the).15 F 2.55(ISO week)5.05 F
.05(number belongs to the pre)2.55 F .051(vious or ne)-.25 F .051
(xt year)-.15 F 2.551(,t)-.4 G .051(hat year is used instead.)-2.551 F
(\(TZ\))144 463.2 Q F2(%g)108 480 Q F0(Lik)144 480 Q 2.5(e%)-.1 G(G, b)
-2.5 E(ut without century)-.2 E 2.5(,t)-.65 G
(hat is, with a 2-digit year \(00-99\). \(TZ\))-2.5 E F2(%h)108 496.8 Q
F0(Equi)144 496.8 Q -.25(va)-.25 G(lent to %b).25 E 2.5(.\()-.4 G(SU\))
-2.5 E F2(%H)108 513.6 Q F0
(The hour as a decimal number using a 24-hour clock \(range 00 to 23\).)
144 513.6 Q F2(%I)108 530.4 Q F0
(The hour as a decimal number using a 12-hour clock \(range 01)144 530.4
Q(to 12\).)5 E F2(%j)108 547.2 Q F0
(The day of the year as a decimal number \(range 001 to 366\).)144 547.2
Q F2(%k)108 564 Q F0 1.257(The hour \(24-hour clock\) as a decimal numb\
er \(range 0 to 23\); single digits are preceded by a)144 564 R
(blank. \(See also %H.\) \(TZ\))144 576 Q F2(%l)108 592.8 Q F0 1.257(Th\
e hour \(12-hour clock\) as a decimal number \(range 1 to 12\); single \
digits are preceded by a)144 592.8 R(blank. \(See also %I.\) \(TZ\))144
604.8 Q F2(%m)108 621.6 Q F0
(The month as a decimal number \(range 01 to 12\).)144 621.6 Q F2(%M)108
638.4 Q F0(The minute as a decimal number \(range 00 to 59\).)144 638.4
Q F2(%n)108 655.2 Q F0 2.5(An)144 655.2 S -.25(ew)-2.5 G(line character)
.25 E 2.5(.\()-.55 G(SU\))-2.5 E F2(%O)108 672 Q F0
(Modi\214er: use alternati)144 672 Q .3 -.15(ve f)-.25 H
(ormat, see belo).15 E 1.3 -.65(w. \()-.25 H(SU\)).65 E F2(%p)108 688.8
Q F0 .575(Either "AM" or "PM" according to the gi)144 688.8 R -.15(ve)
-.25 G 3.075(nt).15 G .575(ime v)-3.075 F .575
(alue, or the corresponding strings for the cur)-.25 F(-)-.2 E
(rent locale. Noon is treated as "PM" and midnight as "AM".)144 700.8 Q
F2(%P)108 717.6 Q F0(Lik)144 717.6 Q 2.5(e%)-.1 G 2.5(pb)-2.5 G
(ut in lo)-2.7 E(wercase: "am" or "pm" or a corresponding string for th\
e current locale. \(GNU\))-.25 E(1)535 768 Q 0 Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF -.4(DA)72 48 S 117.75(TEFMT\(1\) General)-.71 F
(Commands Manual)2.5 E -.4(DA)120.25 G(TEFMT\(1\))-.71 E/F1 10
/Times-Bold@0 SF(%r)108 84 Q F0
(The time in a.m. or p.m. notation. In the POSIX locale this is equi)144
84 Q -.25(va)-.25 G(lent to %I:%M:%S %p. \(SU\)).25 E F1(%R)108 100.8 Q
F0(The time in 24-hour notation \(%H:%M\). \(SU\) F)144 100.8 Q(or a v)
-.15 E(ersion including the seconds, see %T belo)-.15 E -.65(w.)-.25 G
F1(%s)108 117.6 Q F0(The number of seconds since the Epoch, 1970-01-01 \
00:00:00 +0000 \(UTC\). \(TZ\))144 117.6 Q F1(%S)108 134.4 Q F0 .626(Th\
e second as a decimal number \(range 00 to 60\). \(The range is up to 6\
0 to allo)144 134.4 R 3.126(wf)-.25 G .626(or occasional)-3.126 F
(leap seconds.\))144 146.4 Q F1(%t)108 163.2 Q F0 2.5(At)144 163.2 S
(ab character)-2.5 E 2.5(.\()-.55 G(SU\))-2.5 E F1(%T)108 180 Q F0
(The time in 24-hour notation \(%H:%M:%S\). \(SU\))144 180 Q F1(%u)108
196.8 Q F0(The day of the week as a decimal, range 1 to 7, Monday being\
 1. See also %w)144 196.8 Q 2.5(.\()-.65 G(SU\))-2.5 E F1(%U)108 213.6 Q
F0 .7(The week number of the current year as a decimal number)144 213.6
R 3.199(,r)-.4 G .699(ange 00 to 53, starting with the \214rst)-3.199 F
(Sunday as the \214rst day of week 01. See also %V and %W)144 225.6 Q(.)
-.92 E F1(%V)108 242.4 Q F0 .044(The ISO 8601 week number \(see NO)144
242.4 R .044(TES\) of the current year as a decimal number)-.4 F 2.544
(,r)-.4 G .044(ange 01 to 53,)-2.544 F
(where week 1 is the \214rst week that has at least 4 days in the ne)144
254.4 Q 2.5(wy)-.25 G(ear)-2.5 E 2.5(.S)-.55 G(ee also %U and %W)-2.5 E
2.5(.\()-.92 G(SU\))-2.5 E F1(%w)108 271.2 Q F0(The day of the week as \
a decimal, range 0 to 6, Sunday being 0. See also %u.)144 271.2 Q F1(%W)
108 288 Q F0 .7(The week number of the current year as a decimal number)
144 288 R 3.199(,r)-.4 G .699(ange 00 to 53, starting with the \214rst)
-3.199 F(Monday as the \214rst day of week 01.)144 300 Q F1(%x)108 316.8
Q F0(The preferred date representation for the current locale without t\
he time.)144 316.8 Q F1(%X)108 333.6 Q F0(The preferred time representa\
tion for the current locale without the date.)144 333.6 Q F1(%y)108
350.4 Q F0
(The year as a decimal number without a century \(range 00 to 99\).)144
350.4 Q F1(%Y)108 367.2 Q F0
(The year as a decimal number including the century)144 367.2 Q(.)-.65 E
F1(%z)108 384 Q F0
(The +hhmm or -hhmm numeric timezone \(that is, the hour and minute of)
144 384 Q(fset from UTC\). \(SU\))-.25 E F1(%Z)108 400.8 Q F0
(The timezone name or abbre)144 400.8 Q(viation.)-.25 E F1(%+)108 417.6
Q F0(The date and time in date\(1\) format. \(TZ\) \(Not supported in g\
libc2.\))144 417.6 Q F1(%%)108 434.4 Q F0 2.5(Al)144 434.4 S
(iteral '%' character)-2.5 E(.)-.55 E/F2 10.95/Times-Bold@0 SF(OPTIONS)
72 463.2 Q F1(\255h, \255\255help)108 475.2 Q F0(Sho)144 487.2 Q 2.5
(was)-.25 G(hort usage message.)-2.5 E F1(\255s, \255\255set)108 504 Q
F0(Set a format.)144 516 Q F1(\255d, \255\255display)108 532.8 Q F0
(Display a format.)144 544.8 Q F1(\255t, \255\255time)108 561.6 Q F0
(Operate on the time format.)144 573.6 Q F1<ad692c20adad696e>108 590.4 Q
F0(Operate on the input date format.)144 602.4 Q F1(\255o, \255\255out)
108 619.2 Q F0(Operate on the output date format.)144 631.2 Q F2
(EXAMPLES)72 660 Q F0(The e)108 672 Q(xample belo)-.15 E 2.5(ww)-.25 G
(ill return the current format:)-2.5 E F1 -.92(Te)144 696 S(chOS\(?\)>)
.92 E/F3 10/Times-Italic@0 SF(datefmt)2.85 E F0 1.218(The e)108 720 R
1.218(xample belo)-.15 F 3.718(ww)-.25 G 1.218
(ill set the date format to the RFC 2822-complient date: format \(e)
-3.718 F 1.219(x. "W)-.15 F 1.219(ed, 06 Sep)-.8 F(2)535 768 Q 0 Cg EP
PStoPSsaved restore
%%Page: (2,3) 2
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF -.4(DA)72 48 S 117.75(TEFMT\(1\) General)-.71 F
(Commands Manual)2.5 E -.4(DA)120.25 G(TEFMT\(1\))-.71 E
(2017 19:05:17 -0400"\))108 84 Q/F1 10/Times-Bold@0 SF -.92(Te)144 108 S
(chOS\(?\)>).92 E/F2 10/Times-Italic@0 SF(datefmt \255s)2.85 E F1
(Enter the new f)144 132 Q(ormat:)-.25 E F2(%a, %d %b %Y %T %z)2.21 E/F3
10.95/Times-Bold@0 SF(NO)72 160.8 Q(TES)-.438 E F0
(Nothing in particular at the moment)108 172.8 Q F3 -.548(AU)72 189.6 S
(THOR).548 E F0(Lucas Darnell, Jared Miller and Benjamin Culkin)108
201.6 Q(3)535 768 Q 0 Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
end
%%EOF
%%EndDocument
EndInclude
BeginInclude
%%BeginDocument: help/dispatch.1
%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Mon Oct 22 22:57:27 2018
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 1 0
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(DISP)72 48 Q -1.11(AT)-.92 G 116.6
(CH\(1\) General)1.11 F(Commands Manual)2.5 E(DISP)119.1 E -1.11(AT)-.92
G(CH\(1\))1.11 E/F1 10.95/Times-Bold@0 SF -.219(NA)72 84 S(ME).219 E F0
(dispatch \255 run all loaded processes)108 96 Q F1(SYNOPSIS)72 112.8 Q
/F2 10/Times-Bold@0 SF(mkpcb)108 124.8 Q F0([)2.5 E/F3 10/Times-Italic@0
SF(\255\255help)2.14 E F0(])2.69 E F1(DESCRIPTION)72 141.6 Q F0
(Runs all processes in the ready queue)108 153.6 Q F1(OPTIONS)72 170.4 Q
F2(\255h, \255\255help)108 182.4 Q F0(Sho)144 194.4 Q 2.5(was)-.25 G
(hort usage message.)-2.5 E F1(NO)72 211.2 Q(TES)-.438 E F0
(Nothing at the moment.)108 223.2 Q F1 -.548(AU)72 240 S(THOR).548 E F0
(Lucas Darnell, Benjamin Culkin, and Jared Miller)108 252 Q(1)535 768 Q
0 Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
end
%%EOF
%%EndDocument
EndInclude
BeginInclude
%%BeginDocument: help/exit.1
%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Mon Oct 22 22:57:28 2018
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 1 0
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 140.69(EXIT\(1\) General)72 48 R
(Commands Manual)2.5 E(EXIT\(1\))143.19 E/F1 10.95/Times-Bold@0 SF -.219
(NA)72 84 S(ME).219 E F0(help \255 list commands, or get indepth help)
108 96 Q F1(SYNOPSIS)72 112.8 Q/F2 10/Times-Bold@0 SF(exit)108 124.8 Q
F0([)2.5 E/F3 10/Times-Italic@0 SF(-h)2.51 E F0 2.5(][)2.78 G F3(--help)
.01 E F0(])2.69 E F1(DESCRIPTION)72 153.6 Q F0 -.35(Tr)108 165.6 S
(iggers cleanup and terminates techOS).35 E F1(OPTIONS)72 182.4 Q F2
(\255h, \255\255help)108 194.4 Q F0(Sho)144 206.4 Q 2.5(was)-.25 G
(hort usage message.)-2.5 E F1(NO)72 235.2 Q(TES)-.438 E F0
(Nothing in particular at the moment)108 247.2 Q F1 -.548(AU)72 264 S
(THOR).548 E F0(Lucas Darnell,Jared Miller and Benjamin Culkin)108 276 Q
(1)535 768 Q 0 Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
end
%%EOF
%%EndDocument
EndInclude
BeginInclude
%%BeginDocument: help/help.1
%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Mon Oct 22 22:57:28 2018
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 1 0
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 138.46(HELP\(1\) General)72 48 R
(Commands Manual)2.5 E(HELP\(1\))140.96 E/F1 10.95/Times-Bold@0 SF -.219
(NA)72 84 S(ME).219 E F0(help \255 list commands, or get indepth help)
108 96 Q F1(SYNOPSIS)72 112.8 Q/F2 10/Times-Bold@0 SF(help)108 124.8 Q
F0([)2.5 E/F3 10/Times-Italic@0 SF<ad68>2.14 E F0 2.5(][)2.78 G F3
(\255\255help)-.36 E F0(])2.69 E F3(<pr)2.16 E -.1(og)-.45 G -.15(ra).1
G(m-name>).15 E F1(DESCRIPTION)72 141.6 Q F0
(Either lists all of the commands a)108 153.6 Q -.25(va)-.2 G
(ilable to T).25 E(echOS, or gi)-.7 E -.15(ve)-.25 G 2.5(si).15 G
(n-depth help on a particular command.)-2.5 E F1(OPTIONS)72 170.4 Q F2
(\255h, \255\255help)108 182.4 Q F0(Sho)144 194.4 Q 2.5(was)-.25 G
(hort usage message.)-2.5 E F1(NO)72 223.2 Q(TES)-.438 E F0
(Nothing in particular at the moment)108 235.2 Q F1 -.548(AU)72 252 S
(THOR).548 E F0(Benjamin Culkin, Jared Miller)108 264 Q 2.5(,a)-.4 G
(nd Lucas Darnell)-2.5 E(1)535 768 Q 0 Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
end
%%EOF
%%EndDocument
EndInclude
BeginInclude
%%BeginDocument: help/ls.1
%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Mon Oct 22 22:57:28 2018
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 1 0
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 151.79(LS\(1\) General)72 48 R(Commands Manual)
2.5 E(LS\(1\))154.29 E/F1 10.95/Times-Bold@0 SF(LS)72 84 Q F0
(ls \255 sho)108 96 Q 2.5<778c>-.25 G
(les and folders in the current, or speci\214ed, directory)-2.5 E F1
(SYNOPSIS)72 112.8 Q/F2 10/Times-Bold@0 SF(ls)108 124.8 Q F0([)2.5 E/F3
10/Times-Italic@0 SF<ad68>2.14 E F0 2.5(][)2.78 G F3<ad6c>-.36 E F0(])
3.01 E F1(DESCRIPTION)72 141.6 Q F0(Sho)108 153.6 Q
(ws the \214les and folders that are in the current directory)-.25 E 2.5
(,o)-.65 G 2.5(ri)-2.5 G 2.5(nad)-2.5 G
(irectory that is speci\214ed by an option.)-2.5 E F1(OPTIONS)72 170.4 Q
F2<ad6c>108 182.4 Q F0(Also sho)144 182.4 Q 2.5(wt)-.25 G
(he \214le sizes of the directory)-2.5 E(.)-.65 E F2
(\255h, \255\255help)108 199.2 Q F0(Sho)144 211.2 Q 2.5(was)-.25 G
(hort usage message)-2.5 E F1(NO)72 228 Q(TES)-.438 E F0
(Nothing in particular at the moment)108 240 Q F1 -.548(AU)72 256.8 S
(THOR).548 E F0(Jared Miller)108 268.8 Q 2.5(,L)-.4 G
(ucas Darnell and Benjamin Culkin)-2.5 E(1)535 768 Q 0 Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
end
%%EOF
%%EndDocument
EndInclude
BeginInclude
%%BeginDocument: help/mkadm.1
%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Mon Oct 22 22:57:29 2018
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 1 0
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 128.45(MKPCB\(1\) General)72 48 R
(Commands Manual)2.5 E(MKPCB\(1\))130.95 E/F1 10.95/Times-Bold@0 SF
-.219(NA)72 84 S(ME).219 E F0(mkadm \255 create administrator account)
108 96 Q F1(SYNOPSIS)72 112.8 Q/F2 10/Times-Bold@0 SF(mkadm)108 124.8 Q
F0([)2.5 E/F3 10/Times-Italic@0 SF<ad68>2.14 E F0 2.5(][)2.78 G F3
(\255\255help)-.36 E F0(])2.69 E F1(DESCRIPTION)72 141.6 Q F0
(Create an administrator account)108 153.6 Q F1(OPTIONS)72 170.4 Q F2
(\255h, \255\255help)108 182.4 Q F0(Sho)144 194.4 Q 2.5(was)-.25 G
(hort usage message.)-2.5 E F1(NO)72 211.2 Q(TES)-.438 E F0
(None at the moment)108 223.2 Q F1 -.548(AU)72 240 S(THOR).548 E F0
(Lucas Darnell, Benjamin Culkin, and Jared Miller)108 252 Q(1)535 768 Q
0 Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
end
%%EOF
%%EndDocument
EndInclude
BeginInclude
%%BeginDocument: help/mkdir.1
%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Mon Oct 22 22:57:29 2018
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 1 0
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 130.13(MKDIR\(1\) General)72 48 R
(Commands Manual)2.5 E(MKDIR\(1\))132.63 E/F1 10.95/Times-Bold@0 SF
(MKDIR)72 84 Q F0(mkdir \255 creates a ne)108 96 Q 2.5(wf)-.25 G
(older in the current directory)-2.5 E F1(SYNOPSIS)72 112.8 Q/F2 10
/Times-Bold@0 SF(mkdir)108 124.8 Q F0([)2.5 E/F3 10/Times-Italic@0 SF
<ad68>2.14 E F0(])2.78 E F1(DESCRIPTION)72 141.6 Q F0(creates a ne)108
153.6 Q 2.5(wf)-.25 G(older in the current directory)-2.5 E F1(OPTIONS)
72 170.4 Q F2(\255a, \255\255author)108 182.4 Q F0(Print the v)144 194.4
Q(ersion information of T)-.15 E(echOS.)-.7 E F2(\255h, \255\255help)108
211.2 Q F0(Sho)144 223.2 Q 2.5(was)-.25 G(hort usage message)-2.5 E F1
(NO)72 240 Q(TES)-.438 E F0(Nothing in particular at the moment)108 252
Q F1 -.548(AU)72 268.8 S(THOR).548 E F0(Jared Miller)108 280.8 Q 2.5(,L)
-.4 G(ucas Darnell and Benjamin Culkin)-2.5 E(1)535 768 Q 0 Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
end
%%EOF
%%EndDocument
EndInclude
BeginInclude
%%BeginDocument: help/mkpcb.1
%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Mon Oct 22 22:57:29 2018
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-BoldItalic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 1 0
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
%%IncludeResource: font Times-BoldItalic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-BoldItalic@0 ENC0/Times-BoldItalic RE/Times-Italic@0 ENC0
/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE/Times-Roman@0 ENC0
/Times-Roman RE
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 128.45(MKPCB\(1\) General)72 48 R
(Commands Manual)2.5 E(MKPCB\(1\))130.95 E/F1 10.95/Times-Bold@0 SF
-.219(NA)72 84 S(ME).219 E F0(mkpcb \255 create PCB)108 96 Q F1
(SYNOPSIS)72 112.8 Q/F2 10/Times-Bold@0 SF(mkpcb)108 124.8 Q F0([)5.082
E/F3 10/Times-Italic@0 SF(\255cnh)4.722 E F0 5.082(][)5.362 G F3
(-c|--class).01 E/F4 10/Times-BoldItalic@0 SF
(\(app|application\)|\(system|sys\))5.082 E F0 5.081(][)5.081 G F3
(\255\255help)-.36 E F0 5.081(][)5.271 G F3(-n|--name).01 E F4
(<proc-name>)5.081 E F0(])5.271 E F3(<ima)107.66 136.8 Q -.1(ge)-.1 G
(-name> <priority>).1 E F1(DESCRIPTION)72 153.6 Q F0
(Create a process that can be e)108 165.6 Q -.15(xe)-.15 G(cuted.).15 E
F1(OPTIONS)72 182.4 Q F2(\255h, \255\255help)108 194.4 Q F0(Sho)144
206.4 Q 2.5(was)-.25 G(hort usage message.)-2.5 E F2
(\255c, \255\255class)108 223.2 Q F0(Set the process type. V)144 235.2 Q
(alid ones are 'app'/'application' and ')-1.11 E(sys/system')-.55 E F2
(\255n, \255\255name)108 252 Q F0(Set the process name.)144 264 Q F1(NO)
72 280.8 Q(TES)-.438 E F0(Process type is set to application by def)108
292.8 Q(ault, are gi)-.1 E -.15(ve)-.25 G 2.5(nt).15 G
(he same name as their image.)-2.5 E F1 -.548(AU)72 309.6 S(THOR).548 E
F0(Lucas Darnell, Benjamin Culkin, and Jared Miller)108 321.6 Q(1)535
768 Q 0 Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
end
%%EOF
%%EndDocument
EndInclude
BeginInclude
%%BeginDocument: help/mkusr.1
%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Mon Oct 22 22:57:29 2018
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 1 0
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 128.45(MKPCB\(1\) General)72 48 R
(Commands Manual)2.5 E(MKPCB\(1\))130.95 E/F1 10.95/Times-Bold@0 SF
-.219(NA)72 84 S(ME).219 E F0(mkusr \255 create a user account)108 96 Q
F1(SYNOPSIS)72 112.8 Q/F2 10/Times-Bold@0 SF(mkusr)108 124.8 Q F0([)2.5
E/F3 10/Times-Italic@0 SF<ad68>2.14 E F0(])2.78 E([)108 148.8 Q F3
(\255\255help)2.14 E F0(])2.69 E F1(DESCRIPTION)72 165.6 Q F0
(Create a user account)108 177.6 Q F1(OPTIONS)72 194.4 Q F2
(\255h, \255\255help)108 206.4 Q F0(Sho)144 218.4 Q 2.5(was)-.25 G
(hort usage message.)-2.5 E F1(NO)72 235.2 Q(TES)-.438 E F0
(None at the moment)108 247.2 Q F1 -.548(AU)72 264 S(THOR).548 E F0
(Lucas Darnell, Benjamin Culkin, and Jared Miller)108 276 Q(1)535 768 Q
0 Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
end
%%EOF
%%EndDocument
EndInclude
BeginInclude
%%BeginDocument: help/moo.1
%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Mon Oct 22 22:57:30 2018
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 1 0
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 140.13(MOO\(1\) General)72 48 R(Commands Manual)
2.5 E(MOO\(1\))142.63 E/F1 10.95/Times-Bold@0 SF(MOO)72 84 Q F0
(moo \255 queries user on rele)108 96 Q -.25(va)-.25 G(nt beha).25 E
(vioral information)-.2 E F1(SYNOPSIS)72 112.8 Q/F2 10/Times-Bold@0 SF
(moo)108 124.8 Q F0([)2.5 E/F3 10/Times-Italic@0 SF<ad68>2.14 E F0(])
2.78 E F1(DESCRIPTION)72 153.6 Q F0(displays an image of)108 165.6 Q F3
(Bos taurus)3.08 E F0(and queries rele)2.77 E -.25(va)-.25 G
(nt information from the user).25 E F1(OPTIONS)72 182.4 Q F2
(\255h, \255\255help)108 194.4 Q F0(Sho)144 206.4 Q 2.5(was)-.25 G
(hort usage message)-2.5 E F1(NO)72 223.2 Q(TES)-.438 E F0(MOO)108 235.2
Q F1 -.548(AU)72 252 S(THOR).548 E F0(Jared Mooller)108 264 Q 2.5(,L)-.4
G(ucas Darmool and Benjamoo Culkin)-2.5 E(1)535 768 Q 0 Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
end
%%EOF
%%EndDocument
EndInclude
BeginInclude
%%BeginDocument: help/pwd.1
%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Mon Oct 22 22:57:30 2018
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 1 0
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 128.45(MKPCB\(1\) General)72 48 R
(Commands Manual)2.5 E(MKPCB\(1\))130.95 E/F1 10.95/Times-Bold@0 SF
-.219(NA)72 84 S(ME).219 E F0(pwd \255 change or set passw)108 96 Q(ord)
-.1 E F1(SYNOPSIS)72 112.8 Q/F2 10/Times-Bold@0 SF(pwd)108 124.8 Q F0([)
2.5 E/F3 10/Times-Italic@0 SF<ad68>2.14 E F0 2.5(][)2.78 G F3
(\255\255help)-.36 E F0(])2.69 E F1(DESCRIPTION)72 141.6 Q F0
(Change or set a passsw)108 153.6 Q(ord for a user)-.1 E F1(OPTIONS)72
170.4 Q F2(\255h, \255\255help)108 182.4 Q F0(Sho)144 194.4 Q 2.5(was)
-.25 G(hort usage message.)-2.5 E F1(NO)72 211.2 Q(TES)-.438 E F0(N/A)
108 223.2 Q F1 -.548(AU)72 240 S(THOR).548 E F0
(Lucas Darnell, Benjamin Culkin, and Jared Miller)108 252 Q(1)535 768 Q
0 Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
end
%%EOF
%%EndDocument
EndInclude
BeginInclude
%%BeginDocument: help/rm.1
%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Mon Oct 22 22:57:30 2018
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 1 0
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 147.9(RM\(1\) General)72 48 R(Commands Manual)
2.5 E(RM\(1\))150.4 E/F1 10.95/Times-Bold@0 SF(RM)72 84 Q F0
(rm \255 remo)108 96 Q -.15(ve)-.15 G 2.5(sa\214).15 G(le)-2.5 E F1
(SYNOPSIS)72 112.8 Q/F2 10/Times-Bold@0 SF(rm)108 124.8 Q F0([)2.5 E/F3
10/Times-Italic@0 SF<ad68>2.14 E F0 2.5(][)2.78 G F3(\255\255help)-.36 E
F0(])2.69 E F1(DESCRIPTION)72 153.6 Q F0(Remo)108 165.6 Q -.15(ve)-.15 G
2.5(sa\214).15 G(le that is in the current directory)-2.5 E(.)-.65 E F1
(OPTIONS)72 182.4 Q F2(\255h, \255\255help)108 194.4 Q F0(Sho)144 206.4
Q 2.5(was)-.25 G(hort usage message)-2.5 E F1(NO)72 223.2 Q(TES)-.438 E
F0(Nothing in particular at the moment)108 235.2 Q F1 -.548(AU)72 252 S
(THOR).548 E F0(Jared Miller)108 264 Q 2.5(,L)-.4 G
(ucas Darnell and Benjamin Culkin)-2.5 E(1)535 768 Q 0 Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
end
%%EOF
%%EndDocument
EndInclude
BeginInclude
%%BeginDocument: help/rmadm.1
%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Mon Oct 22 22:57:30 2018
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 1 0
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 128.45(MKPCB\(1\) General)72 48 R
(Commands Manual)2.5 E(MKPCB\(1\))130.95 E/F1 10.95/Times-Bold@0 SF
-.219(NA)72 84 S(ME).219 E F0(rmadm \255 remo)108 96 Q .3 -.15(ve A)-.15
H(dministrator account).15 E F1(SYNOPSIS)72 112.8 Q/F2 10/Times-Bold@0
SF(rmadm)108 124.8 Q F0([)2.5 E/F3 10/Times-Italic@0 SF<ad68>2.14 E F0
2.5(][)2.78 G F3(\255\255help)-.36 E F0(])2.69 E F1(DESCRIPTION)72 141.6
Q F0(Remo)108 153.6 Q .3 -.15(ve a)-.15 H 2.5(na).15 G
(dministrator account)-2.5 E F1(OPTIONS)72 170.4 Q F2
(\255h, \255\255help)108 182.4 Q F0(Sho)144 194.4 Q 2.5(was)-.25 G
(hort usage message.)-2.5 E F1(NO)108 216 Q(TES)-.438 E F0
(Nothing at the moment)144 228 Q F1 -.548(AU)72 244.8 S(THOR).548 E F0
(Lucas Darnell, Benjamin Culkin, and Jared Miller)108 256.8 Q(1)535 768
Q 0 Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
end
%%EOF
%%EndDocument
EndInclude
BeginInclude
%%BeginDocument: help/rmdir.1
%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Mon Oct 22 22:57:30 2018
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 1 0
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 130.68(RMDIR\(1\) General)72 48 R
(Commands Manual)2.5 E(RMDIR\(1\))133.18 E/F1 10.95/Times-Bold@0 SF
(RMDIR)72 84 Q F0(rmdir \255 remo)108 96 Q .3 -.15(ve a d)-.15 H
(irectory).15 E F1(SYNOPSIS)72 112.8 Q/F2 10/Times-Bold@0 SF(rmdir)108
124.8 Q F0([)2.5 E/F3 10/Times-Italic@0 SF<ad68>2.14 E F0 2.5(][)2.78 G
F3(\255\255help)-.36 E F0(])2.69 E F1(DESCRIPTION)72 141.6 Q F0(Remo)108
153.6 Q -.15(ve)-.15 G 2.5(st).15 G(he directory speci\214ed)-2.5 E F1
(OPTIONS)72 170.4 Q F2(\255h, \255\255help)108 182.4 Q F0(Sho)144 194.4
Q 2.5(was)-.25 G(hort usage message)-2.5 E F1(NO)72 211.2 Q(TES)-.438 E
F0(Nothing in particular at the moment)108 223.2 Q F1 -.548(AU)72 240 S
(THOR).548 E F0(Jared Miller)108 252 Q 2.5(,L)-.4 G
(ucas Darnell and Benjamin Culkin)-2.5 E(1)535 768 Q 0 Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
end
%%EOF
%%EndDocument
EndInclude
BeginInclude
%%BeginDocument: help/rmpcb.1
%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Mon Oct 22 22:57:31 2018
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 1 0
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 129(RMPCB\(1\) General)72 48 R(Commands Manual)
2.5 E(RMPCB\(1\))131.5 E/F1 10.95/Times-Bold@0 SF -.219(NA)72 84 S(ME)
.219 E F0(rmpcb \255 remo)108 96 Q .3 -.15(ve a P)-.15 H(CB).15 E F1
(SYNOPSIS)72 112.8 Q/F2 10/Times-Bold@0 SF(rmpcb)108 124.8 Q F0([)2.5 E
/F3 10/Times-Italic@0 SF<ad68>2.14 E F0 2.5(][)2.78 G F3(\255\255help)
-.36 E F0(])2.69 E F3(<pr)2.16 E(ocess-name>|<pr)-.45 E(ocess-id>)-.45 E
F1(DESCRIPTION)72 141.6 Q F0(Ex)108 153.6 Q
(ecutes commands read from a script line by line)-.15 E F1(OPTIONS)72
170.4 Q F2(\255h, \255\255help)108 182.4 Q F0(Sho)144 194.4 Q 2.5(was)
-.25 G(hort usage message.)-2.5 E F1(NO)72 211.2 Q(TES)-.438 E F0
(Nothing at the moment)108 223.2 Q F1 -.548(AU)72 240 S(THOR).548 E F0
(Lucas Darnell, Benjamin Culkin, and Jared Miller)108 252 Q(1)535 768 Q
0 Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
end
%%EOF
%%EndDocument
EndInclude
BeginInclude
%%BeginDocument: help/rmusr.1
%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Mon Oct 22 22:57:31 2018
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 1 0
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 128.45(MKPCB\(1\) General)72 48 R
(Commands Manual)2.5 E(MKPCB\(1\))130.95 E/F1 10.95/Times-Bold@0 SF
-.219(NA)72 84 S(ME).219 E F0(rmusr \255 remo)108 96 Q .3 -.15(ve a u)
-.15 H(ser account).15 E F1(SYNOPSIS)72 112.8 Q/F2 10/Times-Bold@0 SF
(rmusr)108 124.8 Q F0([)2.5 E/F3 10/Times-Italic@0 SF<ad68>2.14 E F0 2.5
(][)2.78 G F3(\255\255help)-.36 E F0(])2.69 E F1(DESCRIPTION)72 141.6 Q
F0(remo)108 153.6 Q .3 -.15(ve a u)-.15 H(ser account).15 E F1(OPTIONS)
72 170.4 Q F2(\255h, \255\255help)108 182.4 Q F0(Sho)144 194.4 Q 2.5
(was)-.25 G(hort usage message.)-2.5 E F1(NO)72 211.2 Q(TES)-.438 E F0
(None at the moment)108 223.2 Q F1 -.548(AU)72 240 S(THOR).548 E F0
(Lucas Darnell, Benjamin Culkin, and Jared Miller)108 252 Q(1)535 768 Q
0 Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
end
%%EOF
%%EndDocument
EndInclude
BeginInclude
%%BeginDocument: help/rspcb.1
%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Mon Oct 22 22:57:31 2018
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 1 0
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 129.56(SCRIPT\(1\) General)72 48 R
(Commands Manual)2.5 E(SCRIPT\(1\))132.06 E/F1 10.95/Times-Bold@0 SF
-.219(NA)72 84 S(ME).219 E F0
(rspcb \255 unblock a PCB and place it back into a queue)108 96 Q F1
(SYNOPSIS)72 112.8 Q/F2 10/Times-Bold@0 SF(rspcb)108 124.8 Q F0([)2.5 E
/F3 10/Times-Italic@0 SF<ad68>2.14 E F0 2.5(][)2.78 G F3(\255\255help)
-.36 E F0(])2.69 E F3(<pr)2.16 E(ocess-name>|<pr)-.45 E(ocess_id>)-.45 E
F1(DESCRIPTION)72 141.6 Q F0(Ex)108 153.6 Q
(ecutes commands read from a script line by line)-.15 E F1(OPTIONS)72
170.4 Q F2(\255h, \255\255help)108 182.4 Q F0(Sho)144 194.4 Q 3.287(was)
-.25 G .787(hort usage message.)-3.287 F F2(--pr)5.787 E .787
(oc name|num)-.18 F F0 .787(Designate whether gi)3.287 F -.15(ve)-.25 G
3.287(nv).15 G .787(alue is process name)-3.537 F(or ID)144 206.4 Q F1
(NO)72 223.2 Q(TES)-.438 E F0(--proc def)108 235.2 Q
(aults to name if not speci\214ed)-.1 E F1 -.548(AU)72 252 S(THOR).548 E
F0(Lucas Darnell, Benjamin Culkin, and Jared Miller)108 264 Q(1)535 768
Q 0 Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
end
%%EOF
%%EndDocument
EndInclude
BeginInclude
%%BeginDocument: help/script.1
%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Mon Oct 22 22:57:31 2018
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 1 0
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 129.56(SCRIPT\(1\) General)72 48 R
(Commands Manual)2.5 E(SCRIPT\(1\))132.06 E/F1 10.95/Times-Bold@0 SF
-.219(NA)72 84 S(ME).219 E F0(script \255 Ex)108 96 Q
(ecute a script \214le)-.15 E F1(SYNOPSIS)72 112.8 Q/F2 10/Times-Bold@0
SF(script)108 124.8 Q F0([)2.5 E/F3 10/Times-Italic@0 SF<ad68>2.14 E F0
2.5(][)2.78 G F3(\255\255help)-.36 E F0(])2.69 E F3(<\214le-name>)2.16 E
F1(DESCRIPTION)72 141.6 Q F0(Ex)108 153.6 Q
(ecutes commands read from a script line by line)-.15 E F1(OPTIONS)72
170.4 Q F2(\255h, \255\255help)108 182.4 Q F0(Sho)144 194.4 Q 2.5(was)
-.25 G(hort usage message.)-2.5 E F1(NO)72 211.2 Q(TES)-.438 E F0
(User will still need to pro)108 223.2 Q
(vide input for commands that require it.)-.15 E F1 -.548(AU)72 240 S
(THOR).548 E F0(Lucas Darnell, Benjamin Culkin, and Jared Miller)108 252
Q(1)535 768 Q 0 Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
end
%%EOF
%%EndDocument
EndInclude
BeginInclude
%%BeginDocument: help/setdate.1
%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Mon Oct 22 22:57:32 2018
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 1 0
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(SETD)72 48 Q -1.11(AT)-.4 G 120.53
(E\(1\) General)1.11 F(Commands Manual)2.5 E(SETD)123.03 E -1.11(AT)-.4
G(E\(1\))1.11 E/F1 10.95/Times-Bold@0 SF -.219(NA)72 84 S(ME).219 E F0
(date \255 set current date)108 96 Q F1(SYNOPSIS)72 112.8 Q/F2 10
/Times-Bold@0 SF(setdate)108 124.8 Q F0([)2.5 E/F3 10/Times-Italic@0 SF
<ad68>2.14 E F0 2.5(][)2.78 G F3(\255\255help)-.36 E F0(])2.69 E F1
(DESCRIPTION)72 141.6 Q F0
(Update the system date according to the current date format.)108 153.6
Q F1(OPTIONS)72 170.4 Q F2(\255h, \255\255help)108 182.4 Q F0(Sho)144
194.4 Q 2.5(was)-.25 G(hort usage message.)-2.5 E F1(NO)72 211.2 Q(TES)
-.438 E F0(Nothing in particular at the moment)108 223.2 Q F1 -.548(AU)
72 240 S(THOR).548 E F0(Jared Miller)108 252 Q 2.5(,B)-.4 G
(enjamin Culkin and Lucas Darnell)-2.5 E(1)535 768 Q 0 Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
end
%%EOF
%%EndDocument
EndInclude
BeginInclude
%%BeginDocument: help/shpcb.1
%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Mon Oct 22 22:57:32 2018
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 1 0
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 131.78(SHPCB\(1\) General)72 48 R
(Commands Manual)2.5 E(SHPCB\(1\))134.28 E/F1 10.95/Times-Bold@0 SF
-.219(NA)72 84 S(ME).219 E F0(shpcb \255 display one or multiple PCBs)
108 96 Q F1(SYNOPSIS)72 112.8 Q/F2 10/Times-Bold@0 SF(shpcb)108 124.8 Q
F0([)2.5 E/F3 10/Times-Italic@0 SF<ad68>2.14 E F0 2.5(][)2.78 G F3
(\255\255help)-.36 E F0(])2.69 E F3(<pr)2.16 E(ocess-name>|<pr)-.45 E
(ocess_id>)-.45 E F0([)2.5 E F3<adad7072>2.14 E(oc)-.45 E F0 2.5(][)2.81
G F3(\255\255mode)-.36 E F0 2.5(][)2.68 G F3(\255\255queue)-.36 E F0(])
2.68 E F1(DESCRIPTION)72 141.6 Q F0(Ex)108 153.6 Q
(ecutes commands read from a script line by line)-.15 E F1(OPTIONS)72
170.4 Q F2(\255h, \255\255help)108 182.4 Q F0(Sho)144 194.4 Q 3.287(was)
-.25 G .787(hort usage message.)-3.287 F F2(--pr)5.787 E .787
(oc name|num)-.18 F F0 .787(Designate whether gi)3.287 F -.15(ve)-.25 G
3.287(nv).15 G .787(alue is process name)-3.537 F(or ID)144 206.4 Q F2
(--mode pcb|queue)2.5 E F0(Display a single PCB or an entire queue)2.5 E
F2(--queue r)2.5 E(eady|block)-.18 E(ed|all)-.1 E F1(NO)72 223.2 Q(TES)
-.438 E F0(--proc def)108 235.2 Q(aults to name if not speci\214ed)-.1 E
F1 -.548(AU)72 252 S(THOR).548 E F0
(Lucas Darnell, Benjamin Culkin, and Jared Miller)108 264 Q(1)535 768 Q
0 Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
end
%%EOF
%%EndDocument
EndInclude
BeginInclude
%%BeginDocument: help/sppcb.1
%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Mon Oct 22 22:57:32 2018
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 1 0
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 133.44(SPPCB\(1\) General)72 48 R
(Commands Manual)2.5 E(SPPCB\(1\))135.94 E/F1 10.95/Times-Bold@0 SF
-.219(NA)72 84 S(ME).219 E F0(sppcb \255 change process priority)108 96
Q F1(SYNOPSIS)72 112.8 Q/F2 10/Times-Bold@0 SF(sppcb)108 124.8 Q F0([)
2.5 E/F3 10/Times-Italic@0 SF<ad68>2.14 E F0 2.5(][)2.78 G F3
(\255\255help)-.36 E F0(])2.69 E F3(<pr)2.16 E(ocess-name>|<pr)-.45 E
(ocess_id> <priority>)-.45 E F1(DESCRIPTION)72 141.6 Q F0(Ex)108 153.6 Q
(ecutes commands read from a script line by line)-.15 E F1(OPTIONS)72
170.4 Q F2(\255h, \255\255help)108 182.4 Q F0(Sho)144 194.4 Q 3.287(was)
-.25 G .787(hort usage message.)-3.287 F F2(--pr)5.787 E .787
(oc name|num)-.18 F F0 .787(Designate whether gi)3.287 F -.15(ve)-.25 G
3.287(nv).15 G .787(alue is process name)-3.537 F(or ID)144 206.4 Q F1
(NO)72 223.2 Q(TES)-.438 E F0(--proc def)108 235.2 Q
(aults to name if not speci\214ed)-.1 E F1 -.548(AU)72 252 S(THOR).548 E
F0(Lucas Darnell, Benjamin Culkin, and Jared Miller)108 264 Q(1)535 768
Q 0 Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
end
%%EOF
%%EndDocument
EndInclude
BeginInclude
%%BeginDocument: help/sspcb.1
%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Mon Oct 22 22:57:32 2018
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 1 0
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 133.44(SSPCB\(1\) General)72 48 R
(Commands Manual)2.5 E(SSPCB\(1\))135.94 E/F1 10.95/Times-Bold@0 SF
-.219(NA)72 84 S(ME).219 E F0
(sspcb \255 suspend a PCB and place it back into a queue)108 96 Q F1
(SYNOPSIS)72 112.8 Q/F2 10/Times-Bold@0 SF(sspcb)108 124.8 Q F0([)2.5 E
/F3 10/Times-Italic@0 SF<ad68>2.14 E F0 2.5(][)2.78 G F3(\255\255help)
-.36 E F0(])2.69 E F3(<pr)2.16 E(ocess-name>|<pr)-.45 E(ocess_id>)-.45 E
F1(DESCRIPTION)72 141.6 Q F0(Ex)108 153.6 Q
(ecutes commands read from a script line by line)-.15 E F1(OPTIONS)72
170.4 Q F2(\255h, \255\255help)108 182.4 Q F0(Sho)144 194.4 Q 3.287(was)
-.25 G .787(hort usage message.)-3.287 F F2(--pr)5.787 E .787
(oc name|num)-.18 F F0 .787(Designate whether gi)3.287 F -.15(ve)-.25 G
3.287(nv).15 G .787(alue is process name)-3.537 F(or ID)144 206.4 Q F1
(NO)72 223.2 Q(TES)-.438 E F0(--proc def)108 235.2 Q
(aults to name if not speci\214ed)-.1 E F1 -.548(AU)72 252 S(THOR).548 E
F0(Lucas Darnell, Benjamin Culkin, and Jared Miller)108 264 Q(1)535 768
Q 0 Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
end
%%EOF
%%EndDocument
EndInclude
BeginInclude
%%BeginDocument: help/time.1
%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Mon Oct 22 22:57:33 2018
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 1 0
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 139.02(TIME\(1\) General)72 48 R
(Commands Manual)2.5 E(TIME\(1\))141.52 E/F1 10.95/Times-Bold@0 SF -.219
(NA)72 84 S(ME).219 E F0(time \255 display the current time)108 96 Q F1
(SYNOPSIS)72 112.8 Q/F2 10/Times-Bold@0 SF(time)108 124.8 Q F0([)2.5 E
/F3 10/Times-Italic@0 SF<ad68>2.14 E F0 2.5(][)2.78 G F3(\255\255help)
-.36 E F0(])2.69 E F1(DESCRIPTION)72 141.6 Q F0
(get and display the current time)108 153.6 Q F1(OPTIONS)72 170.4 Q F2
(\255h, \255\255help)108 182.4 Q F0(Sho)144 194.4 Q 2.5(was)-.25 G
(hort usage message.)-2.5 E F1(NO)72 211.2 Q(TES)-.438 E F0
(Nothing in particular at the moment)108 223.2 Q F1 -.548(AU)72 240 S
(THOR).548 E F0(Lucas D, Jared M, and Culkin B)108 252 Q(1)535 768 Q 0
Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
end
%%EOF
%%EndDocument
EndInclude
BeginInclude
%%BeginDocument: help/touch.1
%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Mon Oct 22 22:57:33 2018
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 1 0
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF -.18(TO)72 48 S 129.2(UCH\(1\) General).18 F
(Commands Manual)2.5 E -.18(TO)131.7 G(UCH\(1\)).18 E/F1 10.95
/Times-Bold@0 SF -.197(TO)72 84 S(UCH).197 E F0(touch \255 creates a ne)
108 96 Q 2.5<778c>-.25 G(le)-2.5 E F1(SYNOPSIS)72 112.8 Q/F2 10
/Times-Bold@0 SF(touch)108 124.8 Q F0([)2.5 E/F3 10/Times-Italic@0 SF
<ad68>2.14 E F0 2.5(][)2.78 G F3(\255\255help)-.36 E F0(])2.69 E F1
(DESCRIPTION)72 141.6 Q F0(Creates a ne)108 153.6 Q 2.5<778c>-.25 G
(le at the current directory)-2.5 E(.)-.65 E F1(OPTIONS)72 170.4 Q F2
(\255h, \255\255help)108 182.4 Q F0(Sho)144 194.4 Q 2.5(was)-.25 G
(hort usage message)-2.5 E F1(NO)72 211.2 Q(TES)-.438 E F0
(Nothing in particular at the moment)108 223.2 Q F1 -.548(AU)72 240 S
(THOR).548 E F0(Jared Miller)108 252 Q 2.5(,L)-.4 G
(ucas Darnell and Benjamin Culkin)-2.5 E(1)535 768 Q 0 Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
end
%%EOF
%%EndDocument
EndInclude
BeginInclude
%%BeginDocument: help/ubpcb.1
%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Mon Oct 22 22:57:33 2018
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 1 0
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 130.67(UBPCB\(1\) General)72 48 R
(Commands Manual)2.5 E(UBPCB\(1\))133.17 E/F1 10.95/Times-Bold@0 SF
-.219(NA)72 84 S(ME).219 E F0
(ubpcb \255 unblock a PCB and place it back into a queue)108 96 Q F1
(SYNOPSIS)72 112.8 Q/F2 10/Times-Bold@0 SF(ubpcb)108 124.8 Q F0([)2.5 E
/F3 10/Times-Italic@0 SF<ad68>2.14 E F0 2.5(][)2.78 G F3(\255\255help)
-.36 E F0(])2.69 E F3(<pr)2.16 E(ocess-name>|<pr)-.45 E(ocess_id>)-.45 E
F1(DESCRIPTION)72 141.6 Q F0(Ex)108 153.6 Q
(ecutes commands read from a script line by line)-.15 E F1(OPTIONS)72
170.4 Q F2(\255h, \255\255help)108 182.4 Q F0(Sho)144 194.4 Q 3.287(was)
-.25 G .787(hort usage message.)-3.287 F F2(--pr)5.787 E .787
(oc name|num)-.18 F F0 .787(Designate whether gi)3.287 F -.15(ve)-.25 G
3.287(nv).15 G .787(alue is process name)-3.537 F(or ID)144 206.4 Q F1
(NO)72 223.2 Q(TES)-.438 E F0(--proc def)108 235.2 Q
(aults to name if not speci\214ed)-.1 E F1 -.548(AU)72 252 S(THOR).548 E
F0(Lucas Darnell, Benjamin Culkin, and Jared Miller)108 264 Q(1)535 768
Q 0 Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
end
%%EOF
%%EndDocument
EndInclude
BeginInclude
%%BeginDocument: help/version.1
%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Mon Oct 22 22:57:33 2018
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 1 0
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 0.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 120.13(VERSION\(1\) General)72 48 R
(Commands Manual)2.5 E(VERSION\(1\))122.63 E/F1 10.95/Times-Bold@0 SF
(VERSION)72 84 Q F0 -.15(ve)108 96 S(rsion \255 sho).15 E 2.5(wc)-.25 G
(urrent v)-2.5 E(ersion, authors, and publish date)-.15 E F1(SYNOPSIS)72
112.8 Q/F2 10/Times-Bold@0 SF -.1(ve)108 124.8 S(rsion).1 E F0([)2.5 E
/F3 10/Times-Italic@0 SF(\255advh)2.14 E F0 2.5(][)2.78 G F3
(\255\255author)-.36 E F0 2.5(][)3.23 G F3(\255\255date)-.36 E F0 2.5
(][)2.68 G F3(\255\255help)-.36 E F0 2.5(][)2.69 G F3<adad766572>-.36 E
(sion)-.1 E F0(])2.74 E F1(DESCRIPTION)72 141.6 Q F0(Sho)108 153.6 Q
(ws the current v)-.25 E(ersion of T)-.15 E
(echOS and also displays the authors and the publishing date.)-.7 E F1
(OPTIONS)72 170.4 Q F2(\255a, \255\255author)108 182.4 Q F0(Print the v)
144 194.4 Q(ersion information of T)-.15 E(echOS.)-.7 E F2
(\255h, \255\255help)108 211.2 Q F0(Sho)144 223.2 Q 2.5(was)-.25 G
(hort usage message)-2.5 E F1(NO)72 240 Q(TES)-.438 E F0
(Nothing in particular at the moment)108 252 Q F1 -.548(AU)72 268.8 S
(THOR).548 E F0(Jared Miller)108 280.8 Q 2.5(,L)-.4 G
(ucas Darnell and Benjamin Culkin)-2.5 E(1)535 768 Q 0 Cg EP
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
595.000000 421.271378 translate
90 rotate
0.706651 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 595.000000 0 rlineto 0 842.000000 rlineto -595.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
end
%%EOF
%%EndDocument
EndInclude
%%Page: (1-2) 89
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(Table of Contents) K n
( 1 ) p
(comlist.c...........) k
( sheets   1 to   2 \( 2\) pages   1-  3  135 lines) p n
( 2 ) S
(command.c...........) k
( sheets   2 to   2 \( 1\) pages   4-  4   41 lines) p n
( 3 ) S
(commands.c..........) k
( sheets   3 to   5 \( 3\) pages   5-  9  289 lines) p n
( 4 ) S
(commandstate.c......) k
( sheets   5 to   5 \( 1\) pages  10- 10   21 lines) p n
( 5 ) S
(datecmds.c..........) k
( sheets   6 to   8 \( 3\) pages  11- 16  322 lines) p n
( 6 ) S
(dispatchcmds.c......) k
( sheets   9 to  10 \( 2\) pages  17- 19  167 lines) p n
( 7 ) S
(filecmds.c..........) k
( sheets  10 to  16 \( 7\) pages  20- 32  742 lines) p n
( 8 ) S
(argparser.c.........) k
( sheets  17 to  17 \( 1\) pages  33- 34   83 lines) p n
( 9 ) S
(argparser_test.c....) k
( sheets  18 to  18 \( 1\) pages  35- 35   33 lines) p n
(10 ) S
(intern.c............) k
( sheets  18 to  22 \( 5\) pages  36- 43  493 lines) p n
(11 ) S
(osstate.c...........) k
( sheets  22 to  23 \( 2\) pages  44- 45   95 lines) p n
(12 ) S
(pcb.c...............) k
( sheets  23 to  27 \( 5\) pages  46- 53  479 lines) p n
(13 ) S
(pcbcmds.c...........) k
( sheets  27 to  35 \( 9\) pages  54- 69  955 lines) p n
(14 ) S
(pcbinternals.c......) k
( sheets  35 to  37 \( 3\) pages  70- 73  241 lines) p n
(15 ) S
(procexecute.c.......) k
( sheets  37 to  37 \( 1\) pages  74- 74   35 lines) p n
(16 ) S
(scriptcmds.c........) k
( sheets  38 to  38 \( 1\) pages  75- 76  104 lines) p n
(17 ) S
(techos.c............) k
( sheets  39 to  41 \( 3\) pages  77- 81  255 lines) p n
(18 ) S
(usercmds.c..........) k
( sheets  41 to  45 \( 5\) pages  82- 89  455 lines) p n
(19 ) S
(users.c.............) k
( sheets  45 to  46 \( 2\) pages  90- 92  165 lines) p n
(20 ) S
(comlist.h...........) k
( sheets  47 to  47 \( 1\) pages  93- 93   41 lines) p n
(21 ) S
(command.h...........) k
( sheets  47 to  47 \( 1\) pages  94- 94   53 lines) p n
(22 ) S
(commands.h..........) k
( sheets  48 to  48 \( 1\) pages  95- 95   26 lines) p n
(23 ) S
(commandstate.h......) k
( sheets  48 to  48 \( 1\) pages  96- 96   13 lines) p n
(24 ) S
(datecmds.h..........) k
( sheets  49 to  49 \( 1\) pages  97- 97   14 lines) p n
(25 ) S
(dispatchcmds.h......) k
( sheets  49 to  49 \( 1\) pages  98- 98   10 lines) p n
(26 ) S
(filecmds.h..........) k
( sheets  50 to  50 \( 1\) pages  99- 99   16 lines) p n
(27 ) S
(argparser.h.........) k
( sheets  50 to  50 \( 1\) pages 100-100   31 lines) p n
(28 ) S
(intern.h............) k
( sheets  51 to  51 \( 1\) pages 101-102   97 lines) p n
(29 ) S
(osstate.h...........) k
( sheets  52 to  52 \( 1\) pages 103-104   84 lines) p n
(30 ) S
(pcbcmds.h...........) k
( sheets  53 to  53 \( 1\) pages 105-105   16 lines) p n
(31 ) S
(pcb.h...............) k
( sheets  53 to  54 \( 2\) pages 106-108  153 lines) p n
(32 ) S
(pcbinternals.h......) k
( sheets  55 to  55 \( 1\) pages 109-110  104 lines) p n
(33 ) S
(procexecute.h.......) k
( sheets  56 to  56 \( 1\) pages 111-111   13 lines) p n
(34 ) S
(scriptcmds.h........) k
( sheets  56 to  56 \( 1\) pages 112-112   13 lines) p n
(35 ) S
(techos.h............) k
( sheets  57 to  57 \( 1\) pages 113-113   46 lines) p n
(36 ) S
(usercmds.h..........) k
( sheets  57 to  57 \( 1\) pages 114-114   14 lines) p n
(37 ) S
(users.h.............) k
( sheets  58 to  58 \( 1\) pages 115-115   61 lines) p n
(38 ) S
(users.txt...........) k
( sheets  58 to  58 \( 1\) pages 116-116    4 lines) p n
(39 ) S
(blpcb.1.............) k
( sheets  58 to  59 \( 2\) pages 116-118    1 lines) p n
(40 ) S
(cd.1................) k
( sheets  59 to  60 \( 2\) pages 118-120    1 lines) p n
(41 ) S
(date.1..............) k
( sheets  60 to  61 \( 2\) pages 120-122    1 lines) p n
(42 ) S
(datefmt.1...........) k
( sheets  61 to  63 \( 3\) pages 122-126    1 lines) p n
(43 ) S
(dispatch.1..........) k
( sheets  63 to  64 \( 2\) pages 126-128    1 lines) p n
(44 ) S
(exit.1..............) k
( sheets  64 to  65 \( 2\) pages 128-130    1 lines) p n
(45 ) S
(help.1..............) k
( sheets  65 to  66 \( 2\) pages 130-132    1 lines) p n
(46 ) S
(ls.1................) k
( sheets  66 to  67 \( 2\) pages 132-134    1 lines) p n
(47 ) S
(mkadm.1.............) k
( sheets  67 to  68 \( 2\) pages 134-136    1 lines) p n
(48 ) S
(mkdir.1.............) k
( sheets  68 to  69 \( 2\) pages 136-138    1 lines) p n
(49 ) S
(mkpcb.1.............) k
( sheets  69 to  70 \( 2\) pages 138-140    1 lines) p n
(50 ) S
(mkusr.1.............) k
( sheets  70 to  71 \( 2\) pages 140-142    1 lines) p n
(51 ) S
(moo.1...............) k
( sheets  71 to  72 \( 2\) pages 142-144    1 lines) p n
(52 ) S
(pwd.1...............) k
( sheets  72 to  73 \( 2\) pages 144-146    1 lines) p n
(53 ) S
(rm.1................) k
( sheets  73 to  74 \( 2\) pages 146-148    1 lines) p n
(54 ) S
(rmadm.1.............) k
( sheets  74 to  75 \( 2\) pages 148-150    1 lines) p n
(55 ) S
(rmdir.1.............) k
( sheets  75 to  76 \( 2\) pages 150-152    1 lines) p n
(56 ) S
(rmpcb.1.............) k
( sheets  76 to  77 \( 2\) pages 152-154    1 lines) p n
(57 ) S
(rmusr.1.............) k
( sheets  77 to  78 \( 2\) pages 154-156    1 lines) p n
(58 ) S
(rspcb.1.............) k
( sheets  78 to  79 \( 2\) pages 156-158    1 lines) p n
(59 ) S
(script.1............) k
( sheets  79 to  80 \( 2\) pages 158-160    1 lines) p n
(60 ) S
(setdate.1...........) k
( sheets  80 to  81 \( 2\) pages 160-162    1 lines) p n
(61 ) S
(shpcb.1.............) k
( sheets  81 to  82 \( 2\) pages 162-164    1 lines) p n
(Table of Content) (Page 1/2) (Oct 22, 18 22:57) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(62 ) p
(sppcb.1.............) k
( sheets  82 to  83 \( 2\) pages 164-166    1 lines) p n
(63 ) S
(sspcb.1.............) k
( sheets  83 to  84 \( 2\) pages 166-168    1 lines) p n
(64 ) S
(time.1..............) k
( sheets  84 to  85 \( 2\) pages 168-170    1 lines) p n
(65 ) S
(touch.1.............) k
( sheets  85 to  86 \( 2\) pages 170-172    1 lines) p n
(66 ) S
(ubpcb.1.............) k
( sheets  86 to  87 \( 2\) pages 172-174    1 lines) p n
(67 ) S
(version.1...........) k
( sheets  87 to  88 \( 2\) pages 174-176    1 lines) p n
(Table of Content) (Page 2/2) (Oct 22, 18 22:57) title
border
grestore
(TechOS Sources) rhead
(Table of Content) (89/89) (Monday October 22, 2018) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
